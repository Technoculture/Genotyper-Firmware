/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.6-dev */

#ifndef PB_GCODE_GCODE_PB_H_INCLUDED
#define PB_GCODE_GCODE_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _gcode_Command_Opcode { 
    gcode_Command_Opcode_HOME = 0, 
    gcode_Command_Opcode_MOVE = 1, 
    gcode_Command_Opcode_ABSOLUTE_POSITION = 2, 
    gcode_Command_Opcode_LOAD_TIP = 3, 
    gcode_Command_Opcode_CHECK_TIP_PRESSENCE = 4 
} gcode_Command_Opcode;

/* Struct definitions */
typedef struct _gcode_Command_Position { 
    int32_t x; 
    int32_t y; 
} gcode_Command_Position;

typedef struct _gcode_Command_Arg { 
    pb_size_t which_argtypes;
    union {
        gcode_Command_Position pos;
        uint32_t num;
    } argtypes; 
} gcode_Command_Arg;

typedef struct _gcode_Command { 
    gcode_Command_Opcode op; 
    bool has_arg;
    gcode_Command_Arg arg; 
} gcode_Command;


/* Helper constants for enums */
#define _gcode_Command_Opcode_MIN gcode_Command_Opcode_HOME
#define _gcode_Command_Opcode_MAX gcode_Command_Opcode_CHECK_TIP_PRESSENCE
#define _gcode_Command_Opcode_ARRAYSIZE ((gcode_Command_Opcode)(gcode_Command_Opcode_CHECK_TIP_PRESSENCE+1))


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define gcode_Command_init_default               {_gcode_Command_Opcode_MIN, false, gcode_Command_Arg_init_default}
#define gcode_Command_Arg_init_default           {0, {gcode_Command_Position_init_default}}
#define gcode_Command_Position_init_default      {0, 0}
#define gcode_Command_init_zero                  {_gcode_Command_Opcode_MIN, false, gcode_Command_Arg_init_zero}
#define gcode_Command_Arg_init_zero              {0, {gcode_Command_Position_init_zero}}
#define gcode_Command_Position_init_zero         {0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define gcode_Command_Position_x_tag             1
#define gcode_Command_Position_y_tag             2
#define gcode_Command_Arg_pos_tag                1
#define gcode_Command_Arg_num_tag                2
#define gcode_Command_op_tag                     1
#define gcode_Command_arg_tag                    2

/* Struct field encoding specification for nanopb */
#define gcode_Command_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, UENUM,    op,                1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  arg,               2)
#define gcode_Command_CALLBACK NULL
#define gcode_Command_DEFAULT NULL
#define gcode_Command_arg_MSGTYPE gcode_Command_Arg

#define gcode_Command_Arg_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    MESSAGE,  (argtypes,pos,argtypes.pos),   1) \
X(a, STATIC,   ONEOF,    UINT32,   (argtypes,num,argtypes.num),   2)
#define gcode_Command_Arg_CALLBACK NULL
#define gcode_Command_Arg_DEFAULT NULL
#define gcode_Command_Arg_argtypes_pos_MSGTYPE gcode_Command_Position

#define gcode_Command_Position_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, SINT32,   x,                 1) \
X(a, STATIC,   REQUIRED, SINT32,   y,                 2)
#define gcode_Command_Position_CALLBACK NULL
#define gcode_Command_Position_DEFAULT NULL

extern const pb_msgdesc_t gcode_Command_msg;
extern const pb_msgdesc_t gcode_Command_Arg_msg;
extern const pb_msgdesc_t gcode_Command_Position_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define gcode_Command_fields &gcode_Command_msg
#define gcode_Command_Arg_fields &gcode_Command_Arg_msg
#define gcode_Command_Position_fields &gcode_Command_Position_msg

/* Maximum encoded size of messages (where known) */
#define gcode_Command_Arg_size                   14
#define gcode_Command_Position_size              12
#define gcode_Command_size                       18

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif

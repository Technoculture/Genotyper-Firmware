
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	40 07 00 20 91 19 00 00 4f 5a 00 00 65 19 00 00     @.. ....OZ..e...
  10:	65 19 00 00 65 19 00 00 65 19 00 00 00 00 00 00     e...e...e.......
	...
  2c:	d5 15 00 00 65 19 00 00 00 00 00 00 81 15 00 00     ....e...........
  3c:	79 2b 00 00                                         y+..

00000040 <_irq_vector_table>:
  40:	85 16 00 00 85 16 00 00 85 16 00 00 85 16 00 00     ................
  50:	85 16 00 00 85 16 00 00 85 16 00 00 85 16 00 00     ................
  60:	85 16 00 00 85 16 00 00 85 16 00 00 85 16 00 00     ................
  70:	85 16 00 00 85 16 00 00 85 16 00 00 85 16 00 00     ................
  80:	85 16 00 00 85 16 00 00 85 16 00 00 85 16 00 00     ................
  90:	85 16 00 00 85 16 00 00 85 16 00 00 85 16 00 00     ................
  a0:	85 16 00 00 85 16 00 00 85 16 00 00 85 16 00 00     ................
  b0:	85 16 00 00 85 16 00 00                             ........

Disassembly of section text:

000000b8 <__aeabi_uldivmod>:
      b8:	b953      	cbnz	r3, d0 <CONFIG_FLASH_SIZE+0x10>
      ba:	b94a      	cbnz	r2, d0 <CONFIG_FLASH_SIZE+0x10>
      bc:	2900      	cmp	r1, #0
      be:	bf08      	it	eq
      c0:	2800      	cmpeq	r0, #0
      c2:	bf1c      	itt	ne
      c4:	f04f 31ff 	movne.w	r1, #4294967295
      c8:	f04f 30ff 	movne.w	r0, #4294967295
      cc:	f000 b974 	b.w	3b8 <__aeabi_idiv0>
      d0:	f1ad 0c08 	sub.w	ip, sp, #8
      d4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
      d8:	f000 f806 	bl	e8 <__udivmoddi4>
      dc:	f8dd e004 	ldr.w	lr, [sp, #4]
      e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
      e4:	b004      	add	sp, #16
      e6:	4770      	bx	lr

000000e8 <__udivmoddi4>:
      e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      ec:	9e08      	ldr	r6, [sp, #32]
      ee:	460d      	mov	r5, r1
      f0:	4604      	mov	r4, r0
      f2:	4688      	mov	r8, r1
      f4:	2b00      	cmp	r3, #0
      f6:	d14d      	bne.n	194 <CONFIG_IDLE_STACK_SIZE+0x94>
      f8:	428a      	cmp	r2, r1
      fa:	4694      	mov	ip, r2
      fc:	d968      	bls.n	1d0 <CONFIG_IDLE_STACK_SIZE+0xd0>
      fe:	fab2 f282 	clz	r2, r2
     102:	b152      	cbz	r2, 11a <CONFIG_IDLE_STACK_SIZE+0x1a>
     104:	fa01 f302 	lsl.w	r3, r1, r2
     108:	f1c2 0120 	rsb	r1, r2, #32
     10c:	fa20 f101 	lsr.w	r1, r0, r1
     110:	fa0c fc02 	lsl.w	ip, ip, r2
     114:	ea41 0803 	orr.w	r8, r1, r3
     118:	4094      	lsls	r4, r2
     11a:	ea4f 451c 	mov.w	r5, ip, lsr #16
     11e:	0c21      	lsrs	r1, r4, #16
     120:	fbb8 fef5 	udiv	lr, r8, r5
     124:	fa1f f78c 	uxth.w	r7, ip
     128:	fb05 831e 	mls	r3, r5, lr, r8
     12c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     130:	fb0e f107 	mul.w	r1, lr, r7
     134:	4299      	cmp	r1, r3
     136:	d90b      	bls.n	150 <CONFIG_IDLE_STACK_SIZE+0x50>
     138:	eb1c 0303 	adds.w	r3, ip, r3
     13c:	f10e 30ff 	add.w	r0, lr, #4294967295
     140:	f080 811e 	bcs.w	380 <CONFIG_IDLE_STACK_SIZE+0x280>
     144:	4299      	cmp	r1, r3
     146:	f240 811b 	bls.w	380 <CONFIG_IDLE_STACK_SIZE+0x280>
     14a:	f1ae 0e02 	sub.w	lr, lr, #2
     14e:	4463      	add	r3, ip
     150:	1a5b      	subs	r3, r3, r1
     152:	b2a4      	uxth	r4, r4
     154:	fbb3 f0f5 	udiv	r0, r3, r5
     158:	fb05 3310 	mls	r3, r5, r0, r3
     15c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     160:	fb00 f707 	mul.w	r7, r0, r7
     164:	42a7      	cmp	r7, r4
     166:	d90a      	bls.n	17e <CONFIG_IDLE_STACK_SIZE+0x7e>
     168:	eb1c 0404 	adds.w	r4, ip, r4
     16c:	f100 33ff 	add.w	r3, r0, #4294967295
     170:	f080 8108 	bcs.w	384 <CONFIG_IDLE_STACK_SIZE+0x284>
     174:	42a7      	cmp	r7, r4
     176:	f240 8105 	bls.w	384 <CONFIG_IDLE_STACK_SIZE+0x284>
     17a:	4464      	add	r4, ip
     17c:	3802      	subs	r0, #2
     17e:	1be4      	subs	r4, r4, r7
     180:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     184:	2100      	movs	r1, #0
     186:	b11e      	cbz	r6, 190 <CONFIG_IDLE_STACK_SIZE+0x90>
     188:	40d4      	lsrs	r4, r2
     18a:	2300      	movs	r3, #0
     18c:	e9c6 4300 	strd	r4, r3, [r6]
     190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     194:	428b      	cmp	r3, r1
     196:	d908      	bls.n	1aa <CONFIG_IDLE_STACK_SIZE+0xaa>
     198:	2e00      	cmp	r6, #0
     19a:	f000 80ee 	beq.w	37a <CONFIG_IDLE_STACK_SIZE+0x27a>
     19e:	2100      	movs	r1, #0
     1a0:	e9c6 0500 	strd	r0, r5, [r6]
     1a4:	4608      	mov	r0, r1
     1a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1aa:	fab3 f183 	clz	r1, r3
     1ae:	2900      	cmp	r1, #0
     1b0:	d14a      	bne.n	248 <CONFIG_IDLE_STACK_SIZE+0x148>
     1b2:	42ab      	cmp	r3, r5
     1b4:	d302      	bcc.n	1bc <CONFIG_IDLE_STACK_SIZE+0xbc>
     1b6:	4282      	cmp	r2, r0
     1b8:	f200 80f9 	bhi.w	3ae <CONFIG_IDLE_STACK_SIZE+0x2ae>
     1bc:	1a84      	subs	r4, r0, r2
     1be:	eb65 0303 	sbc.w	r3, r5, r3
     1c2:	2001      	movs	r0, #1
     1c4:	4698      	mov	r8, r3
     1c6:	2e00      	cmp	r6, #0
     1c8:	d0e2      	beq.n	190 <CONFIG_IDLE_STACK_SIZE+0x90>
     1ca:	e9c6 4800 	strd	r4, r8, [r6]
     1ce:	e7df      	b.n	190 <CONFIG_IDLE_STACK_SIZE+0x90>
     1d0:	b902      	cbnz	r2, 1d4 <CONFIG_IDLE_STACK_SIZE+0xd4>
     1d2:	deff      	udf	#255	; 0xff
     1d4:	fab2 f282 	clz	r2, r2
     1d8:	2a00      	cmp	r2, #0
     1da:	f040 8091 	bne.w	300 <CONFIG_IDLE_STACK_SIZE+0x200>
     1de:	eba1 050c 	sub.w	r5, r1, ip
     1e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
     1e6:	fa1f fe8c 	uxth.w	lr, ip
     1ea:	2101      	movs	r1, #1
     1ec:	fbb5 f3f7 	udiv	r3, r5, r7
     1f0:	fb07 5013 	mls	r0, r7, r3, r5
     1f4:	0c25      	lsrs	r5, r4, #16
     1f6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
     1fa:	fb0e f003 	mul.w	r0, lr, r3
     1fe:	42a8      	cmp	r0, r5
     200:	d908      	bls.n	214 <CONFIG_IDLE_STACK_SIZE+0x114>
     202:	eb1c 0505 	adds.w	r5, ip, r5
     206:	f103 38ff 	add.w	r8, r3, #4294967295
     20a:	d202      	bcs.n	212 <CONFIG_IDLE_STACK_SIZE+0x112>
     20c:	42a8      	cmp	r0, r5
     20e:	f200 80cb 	bhi.w	3a8 <CONFIG_IDLE_STACK_SIZE+0x2a8>
     212:	4643      	mov	r3, r8
     214:	1a2d      	subs	r5, r5, r0
     216:	b2a4      	uxth	r4, r4
     218:	fbb5 f0f7 	udiv	r0, r5, r7
     21c:	fb07 5510 	mls	r5, r7, r0, r5
     220:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     224:	fb0e fe00 	mul.w	lr, lr, r0
     228:	45a6      	cmp	lr, r4
     22a:	d908      	bls.n	23e <CONFIG_IDLE_STACK_SIZE+0x13e>
     22c:	eb1c 0404 	adds.w	r4, ip, r4
     230:	f100 35ff 	add.w	r5, r0, #4294967295
     234:	d202      	bcs.n	23c <CONFIG_IDLE_STACK_SIZE+0x13c>
     236:	45a6      	cmp	lr, r4
     238:	f200 80bb 	bhi.w	3b2 <CONFIG_IDLE_STACK_SIZE+0x2b2>
     23c:	4628      	mov	r0, r5
     23e:	eba4 040e 	sub.w	r4, r4, lr
     242:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
     246:	e79e      	b.n	186 <CONFIG_IDLE_STACK_SIZE+0x86>
     248:	f1c1 0720 	rsb	r7, r1, #32
     24c:	408b      	lsls	r3, r1
     24e:	fa22 fc07 	lsr.w	ip, r2, r7
     252:	ea4c 0c03 	orr.w	ip, ip, r3
     256:	fa20 f407 	lsr.w	r4, r0, r7
     25a:	fa05 f301 	lsl.w	r3, r5, r1
     25e:	431c      	orrs	r4, r3
     260:	40fd      	lsrs	r5, r7
     262:	ea4f 491c 	mov.w	r9, ip, lsr #16
     266:	fa00 f301 	lsl.w	r3, r0, r1
     26a:	fbb5 f8f9 	udiv	r8, r5, r9
     26e:	0c20      	lsrs	r0, r4, #16
     270:	fa1f fe8c 	uxth.w	lr, ip
     274:	fb09 5518 	mls	r5, r9, r8, r5
     278:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
     27c:	fb08 f00e 	mul.w	r0, r8, lr
     280:	42a8      	cmp	r0, r5
     282:	fa02 f201 	lsl.w	r2, r2, r1
     286:	d90b      	bls.n	2a0 <CONFIG_IDLE_STACK_SIZE+0x1a0>
     288:	eb1c 0505 	adds.w	r5, ip, r5
     28c:	f108 3aff 	add.w	sl, r8, #4294967295
     290:	f080 8088 	bcs.w	3a4 <CONFIG_IDLE_STACK_SIZE+0x2a4>
     294:	42a8      	cmp	r0, r5
     296:	f240 8085 	bls.w	3a4 <CONFIG_IDLE_STACK_SIZE+0x2a4>
     29a:	f1a8 0802 	sub.w	r8, r8, #2
     29e:	4465      	add	r5, ip
     2a0:	1a2d      	subs	r5, r5, r0
     2a2:	b2a4      	uxth	r4, r4
     2a4:	fbb5 f0f9 	udiv	r0, r5, r9
     2a8:	fb09 5510 	mls	r5, r9, r0, r5
     2ac:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
     2b0:	fb00 fe0e 	mul.w	lr, r0, lr
     2b4:	45ae      	cmp	lr, r5
     2b6:	d908      	bls.n	2ca <CONFIG_IDLE_STACK_SIZE+0x1ca>
     2b8:	eb1c 0505 	adds.w	r5, ip, r5
     2bc:	f100 34ff 	add.w	r4, r0, #4294967295
     2c0:	d26c      	bcs.n	39c <CONFIG_IDLE_STACK_SIZE+0x29c>
     2c2:	45ae      	cmp	lr, r5
     2c4:	d96a      	bls.n	39c <CONFIG_IDLE_STACK_SIZE+0x29c>
     2c6:	3802      	subs	r0, #2
     2c8:	4465      	add	r5, ip
     2ca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     2ce:	fba0 9402 	umull	r9, r4, r0, r2
     2d2:	eba5 050e 	sub.w	r5, r5, lr
     2d6:	42a5      	cmp	r5, r4
     2d8:	46c8      	mov	r8, r9
     2da:	46a6      	mov	lr, r4
     2dc:	d356      	bcc.n	38c <CONFIG_IDLE_STACK_SIZE+0x28c>
     2de:	d053      	beq.n	388 <CONFIG_IDLE_STACK_SIZE+0x288>
     2e0:	b15e      	cbz	r6, 2fa <CONFIG_IDLE_STACK_SIZE+0x1fa>
     2e2:	ebb3 0208 	subs.w	r2, r3, r8
     2e6:	eb65 050e 	sbc.w	r5, r5, lr
     2ea:	fa05 f707 	lsl.w	r7, r5, r7
     2ee:	fa22 f301 	lsr.w	r3, r2, r1
     2f2:	40cd      	lsrs	r5, r1
     2f4:	431f      	orrs	r7, r3
     2f6:	e9c6 7500 	strd	r7, r5, [r6]
     2fa:	2100      	movs	r1, #0
     2fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     300:	f1c2 0320 	rsb	r3, r2, #32
     304:	fa20 f103 	lsr.w	r1, r0, r3
     308:	fa0c fc02 	lsl.w	ip, ip, r2
     30c:	fa25 f303 	lsr.w	r3, r5, r3
     310:	4095      	lsls	r5, r2
     312:	430d      	orrs	r5, r1
     314:	ea4f 471c 	mov.w	r7, ip, lsr #16
     318:	fa1f fe8c 	uxth.w	lr, ip
     31c:	fbb3 f1f7 	udiv	r1, r3, r7
     320:	fb07 3011 	mls	r0, r7, r1, r3
     324:	0c2b      	lsrs	r3, r5, #16
     326:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     32a:	fb01 f00e 	mul.w	r0, r1, lr
     32e:	4298      	cmp	r0, r3
     330:	fa04 f402 	lsl.w	r4, r4, r2
     334:	d908      	bls.n	348 <CONFIG_IDLE_STACK_SIZE+0x248>
     336:	eb1c 0303 	adds.w	r3, ip, r3
     33a:	f101 38ff 	add.w	r8, r1, #4294967295
     33e:	d22f      	bcs.n	3a0 <CONFIG_IDLE_STACK_SIZE+0x2a0>
     340:	4298      	cmp	r0, r3
     342:	d92d      	bls.n	3a0 <CONFIG_IDLE_STACK_SIZE+0x2a0>
     344:	3902      	subs	r1, #2
     346:	4463      	add	r3, ip
     348:	1a1b      	subs	r3, r3, r0
     34a:	b2ad      	uxth	r5, r5
     34c:	fbb3 f0f7 	udiv	r0, r3, r7
     350:	fb07 3310 	mls	r3, r7, r0, r3
     354:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     358:	fb00 f30e 	mul.w	r3, r0, lr
     35c:	42ab      	cmp	r3, r5
     35e:	d908      	bls.n	372 <CONFIG_IDLE_STACK_SIZE+0x272>
     360:	eb1c 0505 	adds.w	r5, ip, r5
     364:	f100 38ff 	add.w	r8, r0, #4294967295
     368:	d216      	bcs.n	398 <CONFIG_IDLE_STACK_SIZE+0x298>
     36a:	42ab      	cmp	r3, r5
     36c:	d914      	bls.n	398 <CONFIG_IDLE_STACK_SIZE+0x298>
     36e:	3802      	subs	r0, #2
     370:	4465      	add	r5, ip
     372:	1aed      	subs	r5, r5, r3
     374:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     378:	e738      	b.n	1ec <CONFIG_IDLE_STACK_SIZE+0xec>
     37a:	4631      	mov	r1, r6
     37c:	4630      	mov	r0, r6
     37e:	e707      	b.n	190 <CONFIG_IDLE_STACK_SIZE+0x90>
     380:	4686      	mov	lr, r0
     382:	e6e5      	b.n	150 <CONFIG_IDLE_STACK_SIZE+0x50>
     384:	4618      	mov	r0, r3
     386:	e6fa      	b.n	17e <CONFIG_IDLE_STACK_SIZE+0x7e>
     388:	454b      	cmp	r3, r9
     38a:	d2a9      	bcs.n	2e0 <CONFIG_IDLE_STACK_SIZE+0x1e0>
     38c:	ebb9 0802 	subs.w	r8, r9, r2
     390:	eb64 0e0c 	sbc.w	lr, r4, ip
     394:	3801      	subs	r0, #1
     396:	e7a3      	b.n	2e0 <CONFIG_IDLE_STACK_SIZE+0x1e0>
     398:	4640      	mov	r0, r8
     39a:	e7ea      	b.n	372 <CONFIG_IDLE_STACK_SIZE+0x272>
     39c:	4620      	mov	r0, r4
     39e:	e794      	b.n	2ca <CONFIG_IDLE_STACK_SIZE+0x1ca>
     3a0:	4641      	mov	r1, r8
     3a2:	e7d1      	b.n	348 <CONFIG_IDLE_STACK_SIZE+0x248>
     3a4:	46d0      	mov	r8, sl
     3a6:	e77b      	b.n	2a0 <CONFIG_IDLE_STACK_SIZE+0x1a0>
     3a8:	3b02      	subs	r3, #2
     3aa:	4465      	add	r5, ip
     3ac:	e732      	b.n	214 <CONFIG_IDLE_STACK_SIZE+0x114>
     3ae:	4608      	mov	r0, r1
     3b0:	e709      	b.n	1c6 <CONFIG_IDLE_STACK_SIZE+0xc6>
     3b2:	4464      	add	r4, ip
     3b4:	3802      	subs	r0, #2
     3b6:	e742      	b.n	23e <CONFIG_IDLE_STACK_SIZE+0x13e>

000003b8 <__aeabi_idiv0>:
     3b8:	4770      	bx	lr
     3ba:	bf00      	nop

000003bc <main>:
        k_sleep(K_MSEC(1000));
    }
}

void main(void)
{
     3bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
     3be:	4c25      	ldr	r4, [pc, #148]	; (454 <CONFIG_MAIN_STACK_SIZE+0x54>)
     3c0:	4620      	mov	r0, r4
     3c2:	f005 fda1 	bl	5f08 <z_device_ready>
     3c6:	b968      	cbnz	r0, 3e4 <main+0x28>
	const struct device *dev = DEVICE_DT_GET_ANY(ti_tmp100);

    __ASSERT(dev != NULL, "Failed to get device binding");
    __ASSERT(device_is_ready(dev), "Device %s is not ready", dev->name);
     3c8:	4a23      	ldr	r2, [pc, #140]	; (458 <CONFIG_MAIN_STACK_SIZE+0x58>)
     3ca:	4924      	ldr	r1, [pc, #144]	; (45c <CONFIG_MAIN_STACK_SIZE+0x5c>)
     3cc:	4824      	ldr	r0, [pc, #144]	; (460 <CONFIG_MAIN_STACK_SIZE+0x60>)
     3ce:	2330      	movs	r3, #48	; 0x30
     3d0:	f005 f9fe 	bl	57d0 <printk>
     3d4:	6821      	ldr	r1, [r4, #0]
     3d6:	4823      	ldr	r0, [pc, #140]	; (464 <CONFIG_MAIN_STACK_SIZE+0x64>)
     3d8:	f005 f9fa 	bl	57d0 <printk>
     3dc:	481e      	ldr	r0, [pc, #120]	; (458 <CONFIG_MAIN_STACK_SIZE+0x58>)
     3de:	2130      	movs	r1, #48	; 0x30
     3e0:	f005 fabd 	bl	595e <assert_post_action>
	printk("device is %p, name is %s\n", dev, dev->name);
     3e4:	6822      	ldr	r2, [r4, #0]
     3e6:	491b      	ldr	r1, [pc, #108]	; (454 <CONFIG_MAIN_STACK_SIZE+0x54>)
     3e8:	481f      	ldr	r0, [pc, #124]	; (468 <CONFIG_MAIN_STACK_SIZE+0x68>)
     3ea:	f005 f9f1 	bl	57d0 <printk>
	attr.val2 = 0;
     3ee:	2280      	movs	r2, #128	; 0x80
     3f0:	2300      	movs	r3, #0
     3f2:	e9cd 2302 	strd	r2, r3, [sp, #8]
					 const struct sensor_value *val)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	if (api->attr_set == NULL) {
     3f6:	68a4      	ldr	r4, [r4, #8]
     3f8:	6825      	ldr	r5, [r4, #0]
     3fa:	b185      	cbz	r5, 41e <CONFIG_MAIN_STACK_SIZE+0x1e>
		return -ENOSYS;
	}

	return api->attr_set(dev, chan, attr, val);
     3fc:	210d      	movs	r1, #13
     3fe:	4815      	ldr	r0, [pc, #84]	; (454 <CONFIG_MAIN_STACK_SIZE+0x54>)
     400:	ab02      	add	r3, sp, #8
     402:	2207      	movs	r2, #7
     404:	47a8      	blx	r5
    if(ret)
     406:	4601      	mov	r1, r0
     408:	b958      	cbnz	r0, 422 <CONFIG_MAIN_STACK_SIZE+0x22>
static inline int z_impl_sensor_sample_fetch(const struct device *dev)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
     40a:	4d12      	ldr	r5, [pc, #72]	; (454 <CONFIG_MAIN_STACK_SIZE+0x54>)
        printk("temp is %d\n", temp_value.val1);
     40c:	4e17      	ldr	r6, [pc, #92]	; (46c <CONFIG_MAIN_STACK_SIZE+0x6c>)
     40e:	2139      	movs	r1, #57	; 0x39
     410:	68e3      	ldr	r3, [r4, #12]
     412:	4628      	mov	r0, r5
     414:	4798      	blx	r3
        if (ret) {
     416:	4601      	mov	r1, r0
     418:	b140      	cbz	r0, 42c <CONFIG_MAIN_STACK_SIZE+0x2c>
            printk("sensor_sample_fetch failed ret %d\n", ret);
     41a:	4815      	ldr	r0, [pc, #84]	; (470 <CONFIG_MAIN_STACK_SIZE+0x70>)
     41c:	e002      	b.n	424 <CONFIG_MAIN_STACK_SIZE+0x24>
		return -ENOSYS;
     41e:	f06f 0157 	mvn.w	r1, #87	; 0x57
        printk("sensor_attr_set failed ret %d\n", ret);
     422:	4814      	ldr	r0, [pc, #80]	; (474 <CONFIG_MAIN_STACK_SIZE+0x74>)
            printk("sensor_channel_get failed ret %d\n", ret);
     424:	f005 f9d4 	bl	57d0 <printk>
	
	do_main(dev);
}
     428:	b004      	add	sp, #16
     42a:	bd70      	pop	{r4, r5, r6, pc}
					    struct sensor_value *val)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->channel_get(dev, chan, val);
     42c:	210d      	movs	r1, #13
     42e:	6923      	ldr	r3, [r4, #16]
     430:	466a      	mov	r2, sp
     432:	4628      	mov	r0, r5
     434:	4798      	blx	r3
        if (ret) {
     436:	4601      	mov	r1, r0
     438:	b108      	cbz	r0, 43e <CONFIG_MAIN_STACK_SIZE+0x3e>
            printk("sensor_channel_get failed ret %d\n", ret);
     43a:	480f      	ldr	r0, [pc, #60]	; (478 <CONFIG_MAIN_STACK_SIZE+0x78>)
     43c:	e7f2      	b.n	424 <CONFIG_MAIN_STACK_SIZE+0x24>
        printk("temp is %d\n", temp_value.val1);
     43e:	9900      	ldr	r1, [sp, #0]
     440:	4630      	mov	r0, r6
     442:	f005 f9c5 	bl	57d0 <printk>
		/* coverity[OVERRUN] */
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     446:	2100      	movs	r1, #0
     448:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     44c:	f004 fd90 	bl	4f70 <z_impl_k_sleep>
    while(1) {
     450:	e7dd      	b.n	40e <CONFIG_MAIN_STACK_SIZE+0xe>
     452:	bf00      	nop
     454:	0000605c 	.word	0x0000605c
     458:	000062cc 	.word	0x000062cc
     45c:	0000630c 	.word	0x0000630c
     460:	00006321 	.word	0x00006321
     464:	0000633e 	.word	0x0000633e
     468:	00006357 	.word	0x00006357
     46c:	000063d5 	.word	0x000063d5
     470:	00006390 	.word	0x00006390
     474:	00006371 	.word	0x00006371
     478:	000063b3 	.word	0x000063b3

0000047c <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
     47c:	b538      	push	{r3, r4, r5, lr}
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
     47e:	6844      	ldr	r4, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
     480:	6081      	str	r1, [r0, #8]

	return method & SYS_NOTIFY_METHOD_MASK;
     482:	f004 0403 	and.w	r4, r4, #3
	switch (method) {
     486:	2c03      	cmp	r4, #3
{
     488:	4605      	mov	r5, r0
	switch (method) {
     48a:	d002      	beq.n	492 <sys_notify_finalize+0x16>
     48c:	b12c      	cbz	r4, 49a <sys_notify_finalize+0x1e>
     48e:	2000      	movs	r0, #0
     490:	e000      	b.n	494 <sys_notify_finalize+0x18>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
     492:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
     494:	2300      	movs	r3, #0
     496:	606b      	str	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
     498:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT_NO_MSG(false);
     49a:	4a05      	ldr	r2, [pc, #20]	; (4b0 <sys_notify_finalize+0x34>)
     49c:	4905      	ldr	r1, [pc, #20]	; (4b4 <sys_notify_finalize+0x38>)
     49e:	4806      	ldr	r0, [pc, #24]	; (4b8 <sys_notify_finalize+0x3c>)
     4a0:	2345      	movs	r3, #69	; 0x45
     4a2:	f005 f995 	bl	57d0 <printk>
     4a6:	4802      	ldr	r0, [pc, #8]	; (4b0 <sys_notify_finalize+0x34>)
     4a8:	2145      	movs	r1, #69	; 0x45
     4aa:	f005 fa58 	bl	595e <assert_post_action>
     4ae:	e7ee      	b.n	48e <sys_notify_finalize+0x12>
     4b0:	000063e1 	.word	0x000063e1
     4b4:	0000648f 	.word	0x0000648f
     4b8:	00006321 	.word	0x00006321

000004bc <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     4bc:	680b      	ldr	r3, [r1, #0]
     4be:	3301      	adds	r3, #1
     4c0:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     4c2:	4b01      	ldr	r3, [pc, #4]	; (4c8 <char_out+0xc>)
     4c4:	681b      	ldr	r3, [r3, #0]
     4c6:	4718      	bx	r3
     4c8:	20000000 	.word	0x20000000

000004cc <__printk_hook_install>:
	_char_out = fn;
     4cc:	4b01      	ldr	r3, [pc, #4]	; (4d4 <__printk_hook_install+0x8>)
     4ce:	6018      	str	r0, [r3, #0]
}
     4d0:	4770      	bx	lr
     4d2:	bf00      	nop
     4d4:	20000000 	.word	0x20000000

000004d8 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
     4d8:	b507      	push	{r0, r1, r2, lr}
     4da:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
     4dc:	2100      	movs	r1, #0
{
     4de:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
     4e0:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
     4e2:	4803      	ldr	r0, [pc, #12]	; (4f0 <vprintk+0x18>)
     4e4:	a901      	add	r1, sp, #4
     4e6:	f000 fabd 	bl	a64 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
     4ea:	b003      	add	sp, #12
     4ec:	f85d fb04 	ldr.w	pc, [sp], #4
     4f0:	000004bd 	.word	0x000004bd

000004f4 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     4f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     4f8:	f8b0 901c 	ldrh.w	r9, [r0, #28]
{
     4fc:	9200      	str	r2, [sp, #0]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     4fe:	f019 0f08 	tst.w	r9, #8
{
     502:	4604      	mov	r4, r0
	if (processing) {
     504:	d022      	beq.n	54c <process_event+0x58>
		if (evt == EVT_COMPLETE) {
     506:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     508:	bf0c      	ite	eq
     50a:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     50e:	f049 0920 	orrne.w	r9, r9, #32
     512:	f8a0 901c 	strh.w	r9, [r0, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
     516:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
     518:	4620      	mov	r0, r4
     51a:	f003 fceb 	bl	3ef4 <z_spin_unlock_valid>
     51e:	b968      	cbnz	r0, 53c <process_event+0x48>
     520:	4a9b      	ldr	r2, [pc, #620]	; (790 <process_event+0x29c>)
     522:	499c      	ldr	r1, [pc, #624]	; (794 <process_event+0x2a0>)
     524:	489c      	ldr	r0, [pc, #624]	; (798 <process_event+0x2a4>)
     526:	23ac      	movs	r3, #172	; 0xac
     528:	f005 f952 	bl	57d0 <printk>
     52c:	489b      	ldr	r0, [pc, #620]	; (79c <process_event+0x2a8>)
     52e:	4621      	mov	r1, r4
     530:	f005 f94e 	bl	57d0 <printk>
     534:	4896      	ldr	r0, [pc, #600]	; (790 <process_event+0x29c>)
     536:	21ac      	movs	r1, #172	; 0xac
     538:	f005 fa11 	bl	595e <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     53c:	9b00      	ldr	r3, [sp, #0]
     53e:	f383 8811 	msr	BASEPRI, r3
     542:	f3bf 8f6f 	isb	sy
}
     546:	b003      	add	sp, #12
     548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
     54c:	4f94      	ldr	r7, [pc, #592]	; (7a0 <process_event+0x2ac>)
     54e:	f8df 8248 	ldr.w	r8, [pc, #584]	; 798 <process_event+0x2a4>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     552:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
     556:	2902      	cmp	r1, #2
     558:	d106      	bne.n	568 <process_event+0x74>
			evt = process_recheck(mgr);
     55a:	4620      	mov	r0, r4
     55c:	f005 f945 	bl	57ea <process_recheck>
		if (evt == EVT_NOP) {
     560:	2800      	cmp	r0, #0
     562:	d0d8      	beq.n	516 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
     564:	2801      	cmp	r0, #1
     566:	d164      	bne.n	632 <process_event+0x13e>
			res = mgr->last_res;
     568:	f8d4 b018 	ldr.w	fp, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     56c:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
     56e:	f1bb 0f00 	cmp.w	fp, #0
     572:	da19      	bge.n	5a8 <process_event+0xb4>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
     574:	2600      	movs	r6, #0
		*clients = mgr->clients;
     576:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     578:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
     57c:	e9c4 6600 	strd	r6, r6, [r4]
     580:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
     584:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     586:	8ba3      	ldrh	r3, [r4, #28]
     588:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     58c:	454a      	cmp	r2, r9
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     58e:	9201      	str	r2, [sp, #4]
				   && !sys_slist_is_empty(&mgr->monitors);
     590:	d003      	beq.n	59a <process_event+0xa6>
		if (do_monitors
     592:	68a2      	ldr	r2, [r4, #8]
     594:	2a00      	cmp	r2, #0
     596:	f040 8113 	bne.w	7c0 <process_event+0x2cc>
		    || !sys_slist_is_empty(&clients)
     59a:	b915      	cbnz	r5, 5a2 <process_event+0xae>
		    || (transit != NULL)) {
     59c:	2e00      	cmp	r6, #0
     59e:	f000 8159 	beq.w	854 <CONFIG_ISR_STACK_SIZE+0x54>
     5a2:	f04f 0a00 	mov.w	sl, #0
     5a6:	e10d      	b.n	7c4 <process_event+0x2d0>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     5a8:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     5ac:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     5ae:	2901      	cmp	r1, #1
     5b0:	d820      	bhi.n	5f4 <process_event+0x100>
	list->head = NULL;
     5b2:	2100      	movs	r1, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     5b4:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
     5b8:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
     5ba:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     5bc:	b29b      	uxth	r3, r3
	list->tail = NULL;
     5be:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     5c2:	d10a      	bne.n	5da <process_event+0xe6>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     5c4:	b13d      	cbz	r5, 5d6 <process_event+0xe2>
     5c6:	8be2      	ldrh	r2, [r4, #30]
     5c8:	4629      	mov	r1, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
     5ca:	6809      	ldr	r1, [r1, #0]
				mgr->refs += 1U;
     5cc:	3201      	adds	r2, #1
     5ce:	b292      	uxth	r2, r2
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     5d0:	2900      	cmp	r1, #0
     5d2:	d1fa      	bne.n	5ca <process_event+0xd6>
     5d4:	83e2      	strh	r2, [r4, #30]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     5d6:	f043 0302 	orr.w	r3, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
     5da:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
     5dc:	4620      	mov	r0, r4
     5de:	f005 f904 	bl	57ea <process_recheck>
     5e2:	4606      	mov	r6, r0
     5e4:	2800      	cmp	r0, #0
     5e6:	d0ce      	beq.n	586 <process_event+0x92>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     5e8:	8ba3      	ldrh	r3, [r4, #28]
     5ea:	f043 0320 	orr.w	r3, r3, #32
     5ee:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
     5f0:	2600      	movs	r6, #0
     5f2:	e7c8      	b.n	586 <process_event+0x92>
	} else if (state == ONOFF_STATE_TO_OFF) {
     5f4:	2a04      	cmp	r2, #4
     5f6:	d10d      	bne.n	614 <process_event+0x120>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     5f8:	f023 0307 	bic.w	r3, r3, #7
     5fc:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
     5fe:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
     600:	4620      	mov	r0, r4
     602:	f005 f8f2 	bl	57ea <process_recheck>
     606:	4605      	mov	r5, r0
     608:	b188      	cbz	r0, 62e <process_event+0x13a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     60a:	f042 0220 	orr.w	r2, r2, #32
     60e:	83a2      	strh	r2, [r4, #28]
     610:	2500      	movs	r5, #0
     612:	e7ed      	b.n	5f0 <process_event+0xfc>
		__ASSERT_NO_MSG(false);
     614:	4963      	ldr	r1, [pc, #396]	; (7a4 <process_event+0x2b0>)
     616:	f240 131b 	movw	r3, #283	; 0x11b
     61a:	463a      	mov	r2, r7
     61c:	4640      	mov	r0, r8
     61e:	f005 f8d7 	bl	57d0 <printk>
     622:	f240 111b 	movw	r1, #283	; 0x11b
     626:	4638      	mov	r0, r7
     628:	f005 f999 	bl	595e <assert_post_action>
     62c:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
     62e:	462e      	mov	r6, r5
     630:	e7a9      	b.n	586 <process_event+0x92>
		} else if (evt == EVT_START) {
     632:	2803      	cmp	r0, #3
     634:	d134      	bne.n	6a0 <process_event+0x1ac>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
     636:	f1b9 0f00 	cmp.w	r9, #0
     63a:	d00b      	beq.n	654 <process_event+0x160>
     63c:	495a      	ldr	r1, [pc, #360]	; (7a8 <process_event+0x2b4>)
     63e:	4640      	mov	r0, r8
     640:	f44f 73ab 	mov.w	r3, #342	; 0x156
     644:	463a      	mov	r2, r7
     646:	f005 f8c3 	bl	57d0 <printk>
     64a:	f44f 71ab 	mov.w	r1, #342	; 0x156
     64e:	4638      	mov	r0, r7
     650:	f005 f985 	bl	595e <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
     654:	6823      	ldr	r3, [r4, #0]
     656:	b95b      	cbnz	r3, 670 <process_event+0x17c>
     658:	4954      	ldr	r1, [pc, #336]	; (7ac <process_event+0x2b8>)
     65a:	4640      	mov	r0, r8
     65c:	f240 1357 	movw	r3, #343	; 0x157
     660:	463a      	mov	r2, r7
     662:	f005 f8b5 	bl	57d0 <printk>
     666:	f240 1157 	movw	r1, #343	; 0x157
     66a:	4638      	mov	r0, r7
     66c:	f005 f977 	bl	595e <assert_post_action>
			transit = mgr->transitions->start;
     670:	6923      	ldr	r3, [r4, #16]
     672:	681e      	ldr	r6, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
     674:	b95e      	cbnz	r6, 68e <process_event+0x19a>
     676:	494e      	ldr	r1, [pc, #312]	; (7b0 <process_event+0x2bc>)
     678:	4640      	mov	r0, r8
     67a:	f44f 73ad 	mov.w	r3, #346	; 0x15a
     67e:	463a      	mov	r2, r7
     680:	f005 f8a6 	bl	57d0 <printk>
     684:	f44f 71ad 	mov.w	r1, #346	; 0x15a
     688:	4638      	mov	r0, r7
     68a:	f005 f968 	bl	595e <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     68e:	8ba3      	ldrh	r3, [r4, #28]
     690:	f023 0307 	bic.w	r3, r3, #7
     694:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
     698:	83a3      	strh	r3, [r4, #28]
}
     69a:	2500      	movs	r5, #0
		res = 0;
     69c:	46ab      	mov	fp, r5
}
     69e:	e772      	b.n	586 <process_event+0x92>
		} else if (evt == EVT_STOP) {
     6a0:	2804      	cmp	r0, #4
     6a2:	d131      	bne.n	708 <process_event+0x214>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
     6a4:	f1b9 0f02 	cmp.w	r9, #2
     6a8:	d00b      	beq.n	6c2 <process_event+0x1ce>
     6aa:	4942      	ldr	r1, [pc, #264]	; (7b4 <process_event+0x2c0>)
     6ac:	4640      	mov	r0, r8
     6ae:	f240 135d 	movw	r3, #349	; 0x15d
     6b2:	463a      	mov	r2, r7
     6b4:	f005 f88c 	bl	57d0 <printk>
     6b8:	f240 115d 	movw	r1, #349	; 0x15d
     6bc:	4638      	mov	r0, r7
     6be:	f005 f94e 	bl	595e <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
     6c2:	8be3      	ldrh	r3, [r4, #30]
     6c4:	b15b      	cbz	r3, 6de <process_event+0x1ea>
     6c6:	493c      	ldr	r1, [pc, #240]	; (7b8 <process_event+0x2c4>)
     6c8:	4640      	mov	r0, r8
     6ca:	f44f 73af 	mov.w	r3, #350	; 0x15e
     6ce:	463a      	mov	r2, r7
     6d0:	f005 f87e 	bl	57d0 <printk>
     6d4:	f44f 71af 	mov.w	r1, #350	; 0x15e
     6d8:	4638      	mov	r0, r7
     6da:	f005 f940 	bl	595e <assert_post_action>
			transit = mgr->transitions->stop;
     6de:	6923      	ldr	r3, [r4, #16]
     6e0:	685e      	ldr	r6, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
     6e2:	b95e      	cbnz	r6, 6fc <process_event+0x208>
     6e4:	4932      	ldr	r1, [pc, #200]	; (7b0 <process_event+0x2bc>)
     6e6:	4640      	mov	r0, r8
     6e8:	f240 1361 	movw	r3, #353	; 0x161
     6ec:	463a      	mov	r2, r7
     6ee:	f005 f86f 	bl	57d0 <printk>
     6f2:	f240 1161 	movw	r1, #353	; 0x161
     6f6:	4638      	mov	r0, r7
     6f8:	f005 f931 	bl	595e <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     6fc:	8ba3      	ldrh	r3, [r4, #28]
     6fe:	f023 0307 	bic.w	r3, r3, #7
     702:	f043 0304 	orr.w	r3, r3, #4
     706:	e7c7      	b.n	698 <process_event+0x1a4>
		} else if (evt == EVT_RESET) {
     708:	2805      	cmp	r0, #5
     70a:	d131      	bne.n	770 <process_event+0x27c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
     70c:	f1b9 0f01 	cmp.w	r9, #1
     710:	d00b      	beq.n	72a <process_event+0x236>
     712:	492a      	ldr	r1, [pc, #168]	; (7bc <process_event+0x2c8>)
     714:	4640      	mov	r0, r8
     716:	f44f 73b2 	mov.w	r3, #356	; 0x164
     71a:	463a      	mov	r2, r7
     71c:	f005 f858 	bl	57d0 <printk>
     720:	f44f 71b2 	mov.w	r1, #356	; 0x164
     724:	4638      	mov	r0, r7
     726:	f005 f91a 	bl	595e <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
     72a:	6823      	ldr	r3, [r4, #0]
     72c:	b95b      	cbnz	r3, 746 <process_event+0x252>
     72e:	491f      	ldr	r1, [pc, #124]	; (7ac <process_event+0x2b8>)
     730:	4640      	mov	r0, r8
     732:	f240 1365 	movw	r3, #357	; 0x165
     736:	463a      	mov	r2, r7
     738:	f005 f84a 	bl	57d0 <printk>
     73c:	f240 1165 	movw	r1, #357	; 0x165
     740:	4638      	mov	r0, r7
     742:	f005 f90c 	bl	595e <assert_post_action>
			transit = mgr->transitions->reset;
     746:	6923      	ldr	r3, [r4, #16]
     748:	689e      	ldr	r6, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
     74a:	b95e      	cbnz	r6, 764 <process_event+0x270>
     74c:	4918      	ldr	r1, [pc, #96]	; (7b0 <process_event+0x2bc>)
     74e:	4640      	mov	r0, r8
     750:	f44f 73b4 	mov.w	r3, #360	; 0x168
     754:	463a      	mov	r2, r7
     756:	f005 f83b 	bl	57d0 <printk>
     75a:	f44f 71b4 	mov.w	r1, #360	; 0x168
     75e:	4638      	mov	r0, r7
     760:	f005 f8fd 	bl	595e <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     764:	8ba3      	ldrh	r3, [r4, #28]
     766:	f023 0307 	bic.w	r3, r3, #7
     76a:	f043 0305 	orr.w	r3, r3, #5
     76e:	e793      	b.n	698 <process_event+0x1a4>
			__ASSERT_NO_MSG(false);
     770:	490c      	ldr	r1, [pc, #48]	; (7a4 <process_event+0x2b0>)
     772:	f240 136b 	movw	r3, #363	; 0x16b
     776:	463a      	mov	r2, r7
     778:	4640      	mov	r0, r8
     77a:	f005 f829 	bl	57d0 <printk>
     77e:	2500      	movs	r5, #0
     780:	f240 116b 	movw	r1, #363	; 0x16b
     784:	4638      	mov	r0, r7
     786:	f005 f8ea 	bl	595e <assert_post_action>
		onoff_transition_fn transit = NULL;
     78a:	462e      	mov	r6, r5
     78c:	e786      	b.n	69c <process_event+0x1a8>
     78e:	bf00      	nop
     790:	000064a7 	.word	0x000064a7
     794:	000064cd 	.word	0x000064cd
     798:	00006321 	.word	0x00006321
     79c:	000064e4 	.word	0x000064e4
     7a0:	00006404 	.word	0x00006404
     7a4:	0000648f 	.word	0x0000648f
     7a8:	00006426 	.word	0x00006426
     7ac:	00006432 	.word	0x00006432
     7b0:	00006455 	.word	0x00006455
     7b4:	0000646c 	.word	0x0000646c
     7b8:	00006482 	.word	0x00006482
     7bc:	00006491 	.word	0x00006491
				   && !sys_slist_is_empty(&mgr->monitors);
     7c0:	f04f 0a01 	mov.w	sl, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     7c4:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
     7c8:	f104 0914 	add.w	r9, r4, #20
			mgr->flags = flags;
     7cc:	83a3      	strh	r3, [r4, #28]
     7ce:	4648      	mov	r0, r9
     7d0:	f003 fb90 	bl	3ef4 <z_spin_unlock_valid>
     7d4:	b968      	cbnz	r0, 7f2 <process_event+0x2fe>
     7d6:	4a38      	ldr	r2, [pc, #224]	; (8b8 <CONFIG_ISR_STACK_SIZE+0xb8>)
     7d8:	4938      	ldr	r1, [pc, #224]	; (8bc <CONFIG_ISR_STACK_SIZE+0xbc>)
     7da:	23ac      	movs	r3, #172	; 0xac
     7dc:	4640      	mov	r0, r8
     7de:	f004 fff7 	bl	57d0 <printk>
     7e2:	4837      	ldr	r0, [pc, #220]	; (8c0 <CONFIG_ISR_STACK_SIZE+0xc0>)
     7e4:	4649      	mov	r1, r9
     7e6:	f004 fff3 	bl	57d0 <printk>
     7ea:	4833      	ldr	r0, [pc, #204]	; (8b8 <CONFIG_ISR_STACK_SIZE+0xb8>)
     7ec:	21ac      	movs	r1, #172	; 0xac
     7ee:	f005 f8b6 	bl	595e <assert_post_action>
     7f2:	9b00      	ldr	r3, [sp, #0]
     7f4:	f383 8811 	msr	BASEPRI, r3
     7f8:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     7fc:	f1ba 0f00 	cmp.w	sl, #0
     800:	d137      	bne.n	872 <CONFIG_ISR_STACK_SIZE+0x72>
	while (!sys_slist_is_empty(list)) {
     802:	2d00      	cmp	r5, #0
     804:	d147      	bne.n	896 <CONFIG_ISR_STACK_SIZE+0x96>
			if (transit != NULL) {
     806:	b116      	cbz	r6, 80e <CONFIG_ISR_STACK_SIZE+0xe>
				transit(mgr, transition_complete);
     808:	492e      	ldr	r1, [pc, #184]	; (8c4 <CONFIG_ISR_STACK_SIZE+0xc4>)
     80a:	4620      	mov	r0, r4
     80c:	47b0      	blx	r6
	__asm__ volatile(
     80e:	f04f 0320 	mov.w	r3, #32
     812:	f3ef 8b11 	mrs	fp, BASEPRI
     816:	f383 8812 	msr	BASEPRI_MAX, r3
     81a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
     81e:	4648      	mov	r0, r9
	k.key = arch_irq_lock();
     820:	f8cd b000 	str.w	fp, [sp]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
     824:	f003 fb58 	bl	3ed8 <z_spin_lock_valid>
     828:	b968      	cbnz	r0, 846 <CONFIG_ISR_STACK_SIZE+0x46>
     82a:	4a23      	ldr	r2, [pc, #140]	; (8b8 <CONFIG_ISR_STACK_SIZE+0xb8>)
     82c:	4926      	ldr	r1, [pc, #152]	; (8c8 <CONFIG_ISR_STACK_SIZE+0xc8>)
     82e:	2381      	movs	r3, #129	; 0x81
     830:	4640      	mov	r0, r8
     832:	f004 ffcd 	bl	57d0 <printk>
     836:	4825      	ldr	r0, [pc, #148]	; (8cc <CONFIG_ISR_STACK_SIZE+0xcc>)
     838:	4649      	mov	r1, r9
     83a:	f004 ffc9 	bl	57d0 <printk>
     83e:	481e      	ldr	r0, [pc, #120]	; (8b8 <CONFIG_ISR_STACK_SIZE+0xb8>)
     840:	2181      	movs	r1, #129	; 0x81
     842:	f005 f88c 	bl	595e <assert_post_action>
	z_spin_lock_set_owner(l);
     846:	4648      	mov	r0, r9
     848:	f003 fb64 	bl	3f14 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     84c:	8ba3      	ldrh	r3, [r4, #28]
     84e:	f023 0308 	bic.w	r3, r3, #8
     852:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     854:	8ba3      	ldrh	r3, [r4, #28]
     856:	06da      	lsls	r2, r3, #27
     858:	d525      	bpl.n	8a6 <CONFIG_ISR_STACK_SIZE+0xa6>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     85a:	f023 0310 	bic.w	r3, r3, #16
     85e:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
     860:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     862:	f8b4 901c 	ldrh.w	r9, [r4, #28]
     866:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
     86a:	2900      	cmp	r1, #0
     86c:	f47f ae73 	bne.w	556 <process_event+0x62>
out:
     870:	e651      	b.n	516 <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     872:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     874:	2900      	cmp	r1, #0
     876:	d0c4      	beq.n	802 <CONFIG_ISR_STACK_SIZE+0x2>
	return node->next;
     878:	f8d1 a000 	ldr.w	sl, [r1]
		mon->callback(mgr, mon, state, res);
     87c:	684b      	ldr	r3, [r1, #4]
     87e:	9a01      	ldr	r2, [sp, #4]
     880:	469c      	mov	ip, r3
     882:	4620      	mov	r0, r4
     884:	465b      	mov	r3, fp
     886:	47e0      	blx	ip
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     888:	f1ba 0f00 	cmp.w	sl, #0
     88c:	d0b9      	beq.n	802 <CONFIG_ISR_STACK_SIZE+0x2>
     88e:	4651      	mov	r1, sl
     890:	f8da a000 	ldr.w	sl, [sl]
     894:	e7f2      	b.n	87c <CONFIG_ISR_STACK_SIZE+0x7c>
     896:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
     898:	9a01      	ldr	r2, [sp, #4]
     89a:	682d      	ldr	r5, [r5, #0]
     89c:	465b      	mov	r3, fp
     89e:	4620      	mov	r0, r4
     8a0:	f004 ffbf 	bl	5822 <notify_one>
     8a4:	e7ad      	b.n	802 <CONFIG_ISR_STACK_SIZE+0x2>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     8a6:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     8aa:	bf1e      	ittt	ne
     8ac:	f023 0320 	bicne.w	r3, r3, #32
     8b0:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
     8b2:	2102      	movne	r1, #2
     8b4:	e7d5      	b.n	862 <CONFIG_ISR_STACK_SIZE+0x62>
     8b6:	bf00      	nop
     8b8:	000064a7 	.word	0x000064a7
     8bc:	000064cd 	.word	0x000064cd
     8c0:	000064e4 	.word	0x000064e4
     8c4:	000008d1 	.word	0x000008d1
     8c8:	000064f9 	.word	0x000064f9
     8cc:	0000650e 	.word	0x0000650e

000008d0 <transition_complete>:
{
     8d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     8d2:	4604      	mov	r4, r0
     8d4:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
     8d6:	f100 0614 	add.w	r6, r0, #20
     8da:	f04f 0320 	mov.w	r3, #32
     8de:	f3ef 8711 	mrs	r7, BASEPRI
     8e2:	f383 8812 	msr	BASEPRI_MAX, r3
     8e6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
     8ea:	4630      	mov	r0, r6
     8ec:	f003 faf4 	bl	3ed8 <z_spin_lock_valid>
     8f0:	b968      	cbnz	r0, 90e <transition_complete+0x3e>
     8f2:	4a0c      	ldr	r2, [pc, #48]	; (924 <transition_complete+0x54>)
     8f4:	490c      	ldr	r1, [pc, #48]	; (928 <transition_complete+0x58>)
     8f6:	480d      	ldr	r0, [pc, #52]	; (92c <transition_complete+0x5c>)
     8f8:	2381      	movs	r3, #129	; 0x81
     8fa:	f004 ff69 	bl	57d0 <printk>
     8fe:	480c      	ldr	r0, [pc, #48]	; (930 <transition_complete+0x60>)
     900:	4631      	mov	r1, r6
     902:	f004 ff65 	bl	57d0 <printk>
     906:	4807      	ldr	r0, [pc, #28]	; (924 <transition_complete+0x54>)
     908:	2181      	movs	r1, #129	; 0x81
     90a:	f005 f828 	bl	595e <assert_post_action>
	z_spin_lock_set_owner(l);
     90e:	4630      	mov	r0, r6
     910:	f003 fb00 	bl	3f14 <z_spin_lock_set_owner>
	mgr->last_res = res;
     914:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
     916:	463a      	mov	r2, r7
     918:	4620      	mov	r0, r4
     91a:	2101      	movs	r1, #1
}
     91c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
     920:	f7ff bde8 	b.w	4f4 <process_event>
     924:	000064a7 	.word	0x000064a7
     928:	000064f9 	.word	0x000064f9
     92c:	00006321 	.word	0x00006321
     930:	0000650e 	.word	0x0000650e

00000934 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
     934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     938:	4604      	mov	r4, r0
     93a:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
     93c:	f004 ff87 	bl	584e <validate_args>

	if (rv < 0) {
     940:	1e05      	subs	r5, r0, #0
     942:	db5e      	blt.n	a02 <onoff_request+0xce>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
     944:	f104 0914 	add.w	r9, r4, #20
     948:	f04f 0320 	mov.w	r3, #32
     94c:	f3ef 8a11 	mrs	sl, BASEPRI
     950:	f383 8812 	msr	BASEPRI_MAX, r3
     954:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
     958:	4648      	mov	r0, r9
     95a:	f003 fabd 	bl	3ed8 <z_spin_lock_valid>
     95e:	b968      	cbnz	r0, 97c <onoff_request+0x48>
     960:	4a38      	ldr	r2, [pc, #224]	; (a44 <onoff_request+0x110>)
     962:	4939      	ldr	r1, [pc, #228]	; (a48 <onoff_request+0x114>)
     964:	4839      	ldr	r0, [pc, #228]	; (a4c <onoff_request+0x118>)
     966:	2381      	movs	r3, #129	; 0x81
     968:	f004 ff32 	bl	57d0 <printk>
     96c:	4838      	ldr	r0, [pc, #224]	; (a50 <onoff_request+0x11c>)
     96e:	4649      	mov	r1, r9
     970:	f004 ff2e 	bl	57d0 <printk>
     974:	4833      	ldr	r0, [pc, #204]	; (a44 <onoff_request+0x110>)
     976:	2181      	movs	r1, #129	; 0x81
     978:	f004 fff1 	bl	595e <assert_post_action>
	z_spin_lock_set_owner(l);
     97c:	4648      	mov	r0, r9
     97e:	f003 fac9 	bl	3f14 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
     982:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     984:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
     986:	f64f 71ff 	movw	r1, #65535	; 0xffff
     98a:	428b      	cmp	r3, r1
     98c:	f002 0607 	and.w	r6, r2, #7
     990:	d050      	beq.n	a34 <onoff_request+0x100>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
     992:	2e02      	cmp	r6, #2
     994:	d124      	bne.n	9e0 <onoff_request+0xac>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
     996:	3301      	adds	r3, #1
     998:	83e3      	strh	r3, [r4, #30]
	rv = state;
     99a:	4635      	mov	r5, r6
		notify = true;
     99c:	f04f 0801 	mov.w	r8, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
     9a0:	4648      	mov	r0, r9
     9a2:	f003 faa7 	bl	3ef4 <z_spin_unlock_valid>
     9a6:	b968      	cbnz	r0, 9c4 <onoff_request+0x90>
     9a8:	4a26      	ldr	r2, [pc, #152]	; (a44 <onoff_request+0x110>)
     9aa:	492a      	ldr	r1, [pc, #168]	; (a54 <onoff_request+0x120>)
     9ac:	4827      	ldr	r0, [pc, #156]	; (a4c <onoff_request+0x118>)
     9ae:	23ac      	movs	r3, #172	; 0xac
     9b0:	f004 ff0e 	bl	57d0 <printk>
     9b4:	4828      	ldr	r0, [pc, #160]	; (a58 <onoff_request+0x124>)
     9b6:	4649      	mov	r1, r9
     9b8:	f004 ff0a 	bl	57d0 <printk>
     9bc:	4821      	ldr	r0, [pc, #132]	; (a44 <onoff_request+0x110>)
     9be:	21ac      	movs	r1, #172	; 0xac
     9c0:	f004 ffcd 	bl	595e <assert_post_action>
	__asm__ volatile(
     9c4:	f38a 8811 	msr	BASEPRI, sl
     9c8:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
     9cc:	f1b8 0f00 	cmp.w	r8, #0
     9d0:	d017      	beq.n	a02 <onoff_request+0xce>
			notify_one(mgr, cli, state, 0);
     9d2:	2300      	movs	r3, #0
     9d4:	4632      	mov	r2, r6
     9d6:	4639      	mov	r1, r7
     9d8:	4620      	mov	r0, r4
     9da:	f004 ff22 	bl	5822 <notify_one>
     9de:	e010      	b.n	a02 <onoff_request+0xce>
	} else if ((state == ONOFF_STATE_OFF)
     9e0:	0793      	lsls	r3, r2, #30
     9e2:	d001      	beq.n	9e8 <onoff_request+0xb4>
		   || (state == ONOFF_STATE_TO_ON)) {
     9e4:	2e06      	cmp	r6, #6
     9e6:	d10f      	bne.n	a08 <onoff_request+0xd4>
	parent->next = child;
     9e8:	2300      	movs	r3, #0
     9ea:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
     9ec:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
     9ee:	b9f3      	cbnz	r3, a2e <onoff_request+0xfa>
	list->head = node;
     9f0:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
     9f4:	4635      	mov	r5, r6
     9f6:	b9fe      	cbnz	r6, a38 <onoff_request+0x104>
		process_event(mgr, EVT_RECHECK, key);
     9f8:	4652      	mov	r2, sl
     9fa:	2102      	movs	r1, #2
     9fc:	4620      	mov	r0, r4
     9fe:	f7ff fd79 	bl	4f4 <process_event>
		}
	}

	return rv;
}
     a02:	4628      	mov	r0, r5
     a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
     a08:	2e05      	cmp	r6, #5
     a0a:	d018      	beq.n	a3e <onoff_request+0x10a>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
     a0c:	2e01      	cmp	r6, #1
     a0e:	d00b      	beq.n	a28 <onoff_request+0xf4>
     a10:	4912      	ldr	r1, [pc, #72]	; (a5c <onoff_request+0x128>)
     a12:	480e      	ldr	r0, [pc, #56]	; (a4c <onoff_request+0x118>)
     a14:	4a12      	ldr	r2, [pc, #72]	; (a60 <onoff_request+0x12c>)
     a16:	f240 13c9 	movw	r3, #457	; 0x1c9
     a1a:	f004 fed9 	bl	57d0 <printk>
     a1e:	4810      	ldr	r0, [pc, #64]	; (a60 <onoff_request+0x12c>)
     a20:	f240 11c9 	movw	r1, #457	; 0x1c9
     a24:	f004 ff9b 	bl	595e <assert_post_action>
		rv = -EIO;
     a28:	f06f 0504 	mvn.w	r5, #4
     a2c:	e004      	b.n	a38 <onoff_request+0x104>
	parent->next = child;
     a2e:	601f      	str	r7, [r3, #0]
	list->tail = node;
     a30:	6067      	str	r7, [r4, #4]
}
     a32:	e7df      	b.n	9f4 <onoff_request+0xc0>
		rv = -EAGAIN;
     a34:	f06f 050a 	mvn.w	r5, #10
     a38:	f04f 0800 	mov.w	r8, #0
     a3c:	e7b0      	b.n	9a0 <onoff_request+0x6c>
		rv = -ENOTSUP;
     a3e:	f06f 0585 	mvn.w	r5, #133	; 0x85
     a42:	e7f9      	b.n	a38 <onoff_request+0x104>
     a44:	000064a7 	.word	0x000064a7
     a48:	000064f9 	.word	0x000064f9
     a4c:	00006321 	.word	0x00006321
     a50:	0000650e 	.word	0x0000650e
     a54:	000064cd 	.word	0x000064cd
     a58:	000064e4 	.word	0x000064e4
     a5c:	00006491 	.word	0x00006491
     a60:	00006404 	.word	0x00006404

00000a64 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     a68:	b091      	sub	sp, #68	; 0x44
     a6a:	468b      	mov	fp, r1
     a6c:	9002      	str	r0, [sp, #8]
     a6e:	4692      	mov	sl, r2
     a70:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     a72:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     a74:	f89a 0000 	ldrb.w	r0, [sl]
     a78:	b908      	cbnz	r0, a7e <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
     a7a:	4628      	mov	r0, r5
     a7c:	e35f      	b.n	113e <cbvprintf+0x6da>
		if (*fp != '%') {
     a7e:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
     a80:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
     a84:	d007      	beq.n	a96 <cbvprintf+0x32>
			OUTC('%');
     a86:	9b02      	ldr	r3, [sp, #8]
     a88:	4659      	mov	r1, fp
     a8a:	4798      	blx	r3
     a8c:	2800      	cmp	r0, #0
     a8e:	f2c0 8356 	blt.w	113e <cbvprintf+0x6da>
     a92:	3501      	adds	r5, #1
			break;
     a94:	e212      	b.n	ebc <cbvprintf+0x458>
		} state = {
     a96:	2218      	movs	r2, #24
     a98:	2100      	movs	r1, #0
     a9a:	a80a      	add	r0, sp, #40	; 0x28
     a9c:	f005 f805 	bl	5aaa <memset>
	if (*sp == '%') {
     aa0:	f89a 3001 	ldrb.w	r3, [sl, #1]
     aa4:	2b25      	cmp	r3, #37	; 0x25
     aa6:	d078      	beq.n	b9a <cbvprintf+0x136>
     aa8:	2200      	movs	r2, #0
     aaa:	4610      	mov	r0, r2
     aac:	4696      	mov	lr, r2
     aae:	4694      	mov	ip, r2
     ab0:	4616      	mov	r6, r2
     ab2:	4639      	mov	r1, r7
		switch (*sp) {
     ab4:	f817 3b01 	ldrb.w	r3, [r7], #1
     ab8:	2b2b      	cmp	r3, #43	; 0x2b
     aba:	f000 809d 	beq.w	bf8 <cbvprintf+0x194>
     abe:	f200 8094 	bhi.w	bea <cbvprintf+0x186>
     ac2:	2b20      	cmp	r3, #32
     ac4:	f000 809b 	beq.w	bfe <cbvprintf+0x19a>
     ac8:	2b23      	cmp	r3, #35	; 0x23
     aca:	f000 809b 	beq.w	c04 <cbvprintf+0x1a0>
     ace:	b12e      	cbz	r6, adc <cbvprintf+0x78>
     ad0:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     ad4:	f046 0604 	orr.w	r6, r6, #4
     ad8:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     adc:	f1bc 0f00 	cmp.w	ip, #0
     ae0:	d005      	beq.n	aee <cbvprintf+0x8a>
     ae2:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     ae6:	f046 0608 	orr.w	r6, r6, #8
     aea:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     aee:	f1be 0f00 	cmp.w	lr, #0
     af2:	d005      	beq.n	b00 <cbvprintf+0x9c>
     af4:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     af8:	f046 0610 	orr.w	r6, r6, #16
     afc:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     b00:	b128      	cbz	r0, b0e <cbvprintf+0xaa>
     b02:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     b06:	f040 0020 	orr.w	r0, r0, #32
     b0a:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     b0e:	b12a      	cbz	r2, b1c <cbvprintf+0xb8>
     b10:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     b14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     b18:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
     b1c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     b20:	f002 0044 	and.w	r0, r2, #68	; 0x44
     b24:	2844      	cmp	r0, #68	; 0x44
     b26:	d103      	bne.n	b30 <cbvprintf+0xcc>
		conv->flag_zero = false;
     b28:	f36f 1286 	bfc	r2, #6, #1
     b2c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
     b30:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     b34:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
     b36:	f042 0280 	orr.w	r2, r2, #128	; 0x80
     b3a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     b3e:	d17b      	bne.n	c38 <cbvprintf+0x1d4>
		conv->width_star = true;
     b40:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     b44:	f042 0201 	orr.w	r2, r2, #1
			++sp;
     b48:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
     b4a:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
     b4e:	781a      	ldrb	r2, [r3, #0]
     b50:	2a2e      	cmp	r2, #46	; 0x2e
     b52:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     b56:	bf0c      	ite	eq
     b58:	2101      	moveq	r1, #1
     b5a:	2100      	movne	r1, #0
     b5c:	f361 0241 	bfi	r2, r1, #1, #1
     b60:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
     b64:	d174      	bne.n	c50 <cbvprintf+0x1ec>
	if (*sp == '*') {
     b66:	785a      	ldrb	r2, [r3, #1]
     b68:	2a2a      	cmp	r2, #42	; 0x2a
     b6a:	d06a      	beq.n	c42 <cbvprintf+0x1de>
	++sp;
     b6c:	3301      	adds	r3, #1
	size_t val = 0;
     b6e:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
     b70:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     b72:	4618      	mov	r0, r3
     b74:	f810 2b01 	ldrb.w	r2, [r0], #1
     b78:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     b7c:	2f09      	cmp	r7, #9
     b7e:	f240 808e 	bls.w	c9e <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
     b82:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
     b86:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
     b88:	f3c2 0040 	ubfx	r0, r2, #1, #1
     b8c:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
     b90:	f361 0241 	bfi	r2, r1, #1, #1
     b94:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     b98:	e05a      	b.n	c50 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
     b9a:	f10a 0702 	add.w	r7, sl, #2
     b9e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
     ba2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     ba6:	07d9      	lsls	r1, r3, #31
     ba8:	f140 8149 	bpl.w	e3e <cbvprintf+0x3da>
			width = va_arg(ap, int);
     bac:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
     bb0:	f1b9 0f00 	cmp.w	r9, #0
     bb4:	da07      	bge.n	bc6 <cbvprintf+0x162>
				conv->flag_dash = true;
     bb6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     bba:	f042 0204 	orr.w	r2, r2, #4
     bbe:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
     bc2:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
     bc6:	075a      	lsls	r2, r3, #29
     bc8:	f140 8142 	bpl.w	e50 <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
     bcc:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
     bd0:	f1b8 0f00 	cmp.w	r8, #0
     bd4:	f280 8141 	bge.w	e5a <cbvprintf+0x3f6>
				conv->prec_present = false;
     bd8:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     bdc:	f36f 0341 	bfc	r3, #1, #1
     be0:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
     be4:	f04f 38ff 	mov.w	r8, #4294967295
     be8:	e137      	b.n	e5a <cbvprintf+0x3f6>
		switch (*sp) {
     bea:	2b2d      	cmp	r3, #45	; 0x2d
     bec:	d00c      	beq.n	c08 <cbvprintf+0x1a4>
     bee:	2b30      	cmp	r3, #48	; 0x30
     bf0:	f47f af6d 	bne.w	ace <cbvprintf+0x6a>
			conv->flag_zero = true;
     bf4:	2201      	movs	r2, #1
	} while (loop);
     bf6:	e75c      	b.n	ab2 <cbvprintf+0x4e>
			conv->flag_plus = true;
     bf8:	f04f 0c01 	mov.w	ip, #1
     bfc:	e759      	b.n	ab2 <cbvprintf+0x4e>
			conv->flag_space = true;
     bfe:	f04f 0e01 	mov.w	lr, #1
     c02:	e756      	b.n	ab2 <cbvprintf+0x4e>
			conv->flag_hash = true;
     c04:	2001      	movs	r0, #1
     c06:	e754      	b.n	ab2 <cbvprintf+0x4e>
		switch (*sp) {
     c08:	2601      	movs	r6, #1
     c0a:	e752      	b.n	ab2 <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
     c0c:	fb0c 0202 	mla	r2, ip, r2, r0
     c10:	3a30      	subs	r2, #48	; 0x30
     c12:	4633      	mov	r3, r6
     c14:	461e      	mov	r6, r3
     c16:	f816 0b01 	ldrb.w	r0, [r6], #1
     c1a:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     c1e:	2f09      	cmp	r7, #9
     c20:	d9f4      	bls.n	c0c <cbvprintf+0x1a8>
	if (sp != wp) {
     c22:	4299      	cmp	r1, r3
     c24:	d093      	beq.n	b4e <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
     c26:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
     c2a:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
     c2c:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     c2e:	f362 0141 	bfi	r1, r2, #1, #1
     c32:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
     c36:	e78a      	b.n	b4e <cbvprintf+0xea>
     c38:	460b      	mov	r3, r1
	size_t val = 0;
     c3a:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     c3c:	f04f 0c0a 	mov.w	ip, #10
     c40:	e7e8      	b.n	c14 <cbvprintf+0x1b0>
		conv->prec_star = true;
     c42:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     c46:	f042 0204 	orr.w	r2, r2, #4
     c4a:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
     c4e:	3302      	adds	r3, #2
	switch (*sp) {
     c50:	461f      	mov	r7, r3
     c52:	f817 2b01 	ldrb.w	r2, [r7], #1
     c56:	2a6c      	cmp	r2, #108	; 0x6c
     c58:	d041      	beq.n	cde <cbvprintf+0x27a>
     c5a:	d825      	bhi.n	ca8 <cbvprintf+0x244>
     c5c:	2a68      	cmp	r2, #104	; 0x68
     c5e:	d02b      	beq.n	cb8 <cbvprintf+0x254>
     c60:	2a6a      	cmp	r2, #106	; 0x6a
     c62:	d046      	beq.n	cf2 <cbvprintf+0x28e>
     c64:	2a4c      	cmp	r2, #76	; 0x4c
     c66:	d04c      	beq.n	d02 <cbvprintf+0x29e>
     c68:	461f      	mov	r7, r3
	conv->specifier = *sp++;
     c6a:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
     c6e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	conv->specifier = *sp++;
     c72:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
     c76:	2a78      	cmp	r2, #120	; 0x78
     c78:	f200 80d9 	bhi.w	e2e <cbvprintf+0x3ca>
     c7c:	2a57      	cmp	r2, #87	; 0x57
     c7e:	d84d      	bhi.n	d1c <cbvprintf+0x2b8>
     c80:	2a41      	cmp	r2, #65	; 0x41
     c82:	d003      	beq.n	c8c <cbvprintf+0x228>
     c84:	3a45      	subs	r2, #69	; 0x45
     c86:	2a02      	cmp	r2, #2
     c88:	f200 80d1 	bhi.w	e2e <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
     c8c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     c90:	2204      	movs	r2, #4
     c92:	f362 0302 	bfi	r3, r2, #0, #3
     c96:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
     c9a:	2301      	movs	r3, #1
			break;
     c9c:	e09e      	b.n	ddc <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
     c9e:	fb06 2101 	mla	r1, r6, r1, r2
     ca2:	3930      	subs	r1, #48	; 0x30
     ca4:	4603      	mov	r3, r0
     ca6:	e764      	b.n	b72 <cbvprintf+0x10e>
	switch (*sp) {
     ca8:	2a74      	cmp	r2, #116	; 0x74
     caa:	d026      	beq.n	cfa <cbvprintf+0x296>
     cac:	2a7a      	cmp	r2, #122	; 0x7a
     cae:	d1db      	bne.n	c68 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
     cb0:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     cb4:	2206      	movs	r2, #6
     cb6:	e00d      	b.n	cd4 <cbvprintf+0x270>
		if (*++sp == 'h') {
     cb8:	785a      	ldrb	r2, [r3, #1]
     cba:	2a68      	cmp	r2, #104	; 0x68
     cbc:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     cc0:	d106      	bne.n	cd0 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
     cc2:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     cc4:	f361 02c6 	bfi	r2, r1, #3, #4
     cc8:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
     ccc:	1c9f      	adds	r7, r3, #2
     cce:	e7cc      	b.n	c6a <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
     cd0:	4613      	mov	r3, r2
     cd2:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
     cd4:	f362 03c6 	bfi	r3, r2, #3, #4
     cd8:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
     cdc:	e7c5      	b.n	c6a <cbvprintf+0x206>
		if (*++sp == 'l') {
     cde:	785a      	ldrb	r2, [r3, #1]
     ce0:	2a6c      	cmp	r2, #108	; 0x6c
     ce2:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     ce6:	d101      	bne.n	cec <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
     ce8:	2104      	movs	r1, #4
     cea:	e7eb      	b.n	cc4 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
     cec:	4613      	mov	r3, r2
     cee:	2203      	movs	r2, #3
     cf0:	e7f0      	b.n	cd4 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
     cf2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     cf6:	2205      	movs	r2, #5
     cf8:	e7ec      	b.n	cd4 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
     cfa:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     cfe:	2207      	movs	r2, #7
     d00:	e7e8      	b.n	cd4 <cbvprintf+0x270>
		conv->unsupported = true;
     d02:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
     d06:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
     d0a:	f023 0302 	bic.w	r3, r3, #2
     d0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     d12:	f043 0302 	orr.w	r3, r3, #2
     d16:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
     d1a:	e7a6      	b.n	c6a <cbvprintf+0x206>
	switch (conv->specifier) {
     d1c:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
     d20:	2920      	cmp	r1, #32
     d22:	f200 8084 	bhi.w	e2e <cbvprintf+0x3ca>
     d26:	a001      	add	r0, pc, #4	; (adr r0, d2c <cbvprintf+0x2c8>)
     d28:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
     d2c:	00000df1 	.word	0x00000df1
     d30:	00000e2f 	.word	0x00000e2f
     d34:	00000e2f 	.word	0x00000e2f
     d38:	00000e2f 	.word	0x00000e2f
     d3c:	00000e2f 	.word	0x00000e2f
     d40:	00000e2f 	.word	0x00000e2f
     d44:	00000e2f 	.word	0x00000e2f
     d48:	00000e2f 	.word	0x00000e2f
     d4c:	00000e2f 	.word	0x00000e2f
     d50:	00000c8d 	.word	0x00000c8d
     d54:	00000e2f 	.word	0x00000e2f
     d58:	00000df1 	.word	0x00000df1
     d5c:	00000db1 	.word	0x00000db1
     d60:	00000c8d 	.word	0x00000c8d
     d64:	00000c8d 	.word	0x00000c8d
     d68:	00000c8d 	.word	0x00000c8d
     d6c:	00000e2f 	.word	0x00000e2f
     d70:	00000db1 	.word	0x00000db1
     d74:	00000e2f 	.word	0x00000e2f
     d78:	00000e2f 	.word	0x00000e2f
     d7c:	00000e2f 	.word	0x00000e2f
     d80:	00000e2f 	.word	0x00000e2f
     d84:	00000df9 	.word	0x00000df9
     d88:	00000df1 	.word	0x00000df1
     d8c:	00000e15 	.word	0x00000e15
     d90:	00000e2f 	.word	0x00000e2f
     d94:	00000e2f 	.word	0x00000e2f
     d98:	00000e15 	.word	0x00000e15
     d9c:	00000e2f 	.word	0x00000e2f
     da0:	00000df1 	.word	0x00000df1
     da4:	00000e2f 	.word	0x00000e2f
     da8:	00000e2f 	.word	0x00000e2f
     dac:	00000df1 	.word	0x00000df1
		conv->specifier_cat = SPECIFIER_SINT;
     db0:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     db4:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
     db6:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
     dba:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     dbe:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
     dc0:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
     dc4:	bf02      	ittt	eq
     dc6:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
     dca:	f041 0101 	orreq.w	r1, r1, #1
     dce:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
     dd2:	2a63      	cmp	r2, #99	; 0x63
     dd4:	d131      	bne.n	e3a <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
     dd6:	3b00      	subs	r3, #0
     dd8:	bf18      	it	ne
     dda:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
     ddc:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     de0:	f3c2 0140 	ubfx	r1, r2, #1, #1
     de4:	430b      	orrs	r3, r1
     de6:	f363 0241 	bfi	r2, r3, #1, #1
     dea:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     dee:	e6d8      	b.n	ba2 <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
     df0:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     df4:	2002      	movs	r0, #2
     df6:	e7de      	b.n	db6 <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
     df8:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     dfc:	f003 0378 	and.w	r3, r3, #120	; 0x78
     e00:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
     e04:	2103      	movs	r1, #3
     e06:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     e0a:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
     e0c:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     e10:	4143      	adcs	r3, r0
     e12:	e7e3      	b.n	ddc <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
     e14:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
     e18:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
     e1a:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
     e1e:	f361 0202 	bfi	r2, r1, #0, #3
     e22:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
     e26:	bf14      	ite	ne
     e28:	2301      	movne	r3, #1
     e2a:	2300      	moveq	r3, #0
     e2c:	e7d6      	b.n	ddc <cbvprintf+0x378>
		conv->invalid = true;
     e2e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     e32:	f043 0301 	orr.w	r3, r3, #1
     e36:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
     e3a:	2300      	movs	r3, #0
     e3c:	e7ce      	b.n	ddc <cbvprintf+0x378>
		} else if (conv->width_present) {
     e3e:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
     e42:	2a00      	cmp	r2, #0
			width = conv->width_value;
     e44:	bfb4      	ite	lt
     e46:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
     e4a:	f04f 39ff 	movge.w	r9, #4294967295
     e4e:	e6ba      	b.n	bc6 <cbvprintf+0x162>
		} else if (conv->prec_present) {
     e50:	079b      	lsls	r3, r3, #30
     e52:	f57f aec7 	bpl.w	be4 <cbvprintf+0x180>
			precision = conv->prec_value;
     e56:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
     e5a:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		conv->pad0_value = 0;
     e5e:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
     e60:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
     e64:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
     e68:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
     e6c:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
     e6e:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
     e72:	d138      	bne.n	ee6 <cbvprintf+0x482>
			switch (length_mod) {
     e74:	1ecb      	subs	r3, r1, #3
     e76:	2b04      	cmp	r3, #4
     e78:	d822      	bhi.n	ec0 <cbvprintf+0x45c>
     e7a:	e8df f003 	tbb	[pc, r3]
     e7e:	0903      	.short	0x0903
     e80:	2109      	.short	0x2109
     e82:	21          	.byte	0x21
     e83:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
     e84:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
     e88:	17da      	asrs	r2, r3, #31
     e8a:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
     e8e:	e006      	b.n	e9e <cbvprintf+0x43a>
					(sint_value_type)va_arg(ap, intmax_t);
     e90:	3407      	adds	r4, #7
     e92:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
     e96:	e8f4 2302 	ldrd	r2, r3, [r4], #8
     e9a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
     e9e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     ea2:	f013 0603 	ands.w	r6, r3, #3
     ea6:	d056      	beq.n	f56 <cbvprintf+0x4f2>
			OUTS(sp, fp);
     ea8:	9802      	ldr	r0, [sp, #8]
     eaa:	463b      	mov	r3, r7
     eac:	4652      	mov	r2, sl
     eae:	4659      	mov	r1, fp
     eb0:	f004 fd3f 	bl	5932 <outs>
     eb4:	2800      	cmp	r0, #0
     eb6:	f2c0 8142 	blt.w	113e <cbvprintf+0x6da>
     eba:	4405      	add	r5, r0
			continue;
     ebc:	46ba      	mov	sl, r7
     ebe:	e5d9      	b.n	a74 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     ec0:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
     ec4:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
     ec6:	ea4f 72e3 	mov.w	r2, r3, asr #31
     eca:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
     ece:	d105      	bne.n	edc <cbvprintf+0x478>
				value->uint = (unsigned char)value->uint;
     ed0:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
     ed4:	930a      	str	r3, [sp, #40]	; 0x28
     ed6:	2300      	movs	r3, #0
     ed8:	930b      	str	r3, [sp, #44]	; 0x2c
     eda:	e7e0      	b.n	e9e <cbvprintf+0x43a>
			} else if (length_mod == LENGTH_H) {
     edc:	2902      	cmp	r1, #2
     ede:	d1de      	bne.n	e9e <cbvprintf+0x43a>
				value->sint = (short)value->sint;
     ee0:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
     ee4:	e7d0      	b.n	e88 <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
     ee6:	2b02      	cmp	r3, #2
     ee8:	d123      	bne.n	f32 <cbvprintf+0x4ce>
			switch (length_mod) {
     eea:	1ecb      	subs	r3, r1, #3
     eec:	2b04      	cmp	r3, #4
     eee:	d813      	bhi.n	f18 <cbvprintf+0x4b4>
     ef0:	e8df f003 	tbb	[pc, r3]
     ef4:	120a0a03 	.word	0x120a0a03
     ef8:	12          	.byte	0x12
     ef9:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
     efa:	6822      	ldr	r2, [r4, #0]
     efc:	920a      	str	r2, [sp, #40]	; 0x28
     efe:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
     f00:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
     f02:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
     f04:	4604      	mov	r4, r0
     f06:	e7ca      	b.n	e9e <cbvprintf+0x43a>
					(uint_value_type)va_arg(ap,
     f08:	1de0      	adds	r0, r4, #7
     f0a:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
     f0e:	e8f0 2302 	ldrd	r2, r3, [r0], #8
     f12:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
     f16:	e7f5      	b.n	f04 <cbvprintf+0x4a0>
					(uint_value_type)va_arg(ap, size_t);
     f18:	f854 3b04 	ldr.w	r3, [r4], #4
     f1c:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
     f1e:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
     f20:	f04f 0300 	mov.w	r3, #0
     f24:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
     f26:	d0d3      	beq.n	ed0 <cbvprintf+0x46c>
			} else if (length_mod == LENGTH_H) {
     f28:	2902      	cmp	r1, #2
     f2a:	d1b8      	bne.n	e9e <cbvprintf+0x43a>
				value->uint = (unsigned short)value->uint;
     f2c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
     f30:	e7d0      	b.n	ed4 <cbvprintf+0x470>
		} else if (specifier_cat == SPECIFIER_FP) {
     f32:	2b04      	cmp	r3, #4
     f34:	d109      	bne.n	f4a <cbvprintf+0x4e6>
					(sint_value_type)va_arg(ap, long long);
     f36:	1de3      	adds	r3, r4, #7
     f38:	f023 0307 	bic.w	r3, r3, #7
     f3c:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
     f40:	e9d3 2300 	ldrd	r2, r3, [r3]
     f44:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
     f48:	e7a9      	b.n	e9e <cbvprintf+0x43a>
		} else if (specifier_cat == SPECIFIER_PTR) {
     f4a:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
     f4c:	bf04      	itt	eq
     f4e:	f854 3b04 	ldreq.w	r3, [r4], #4
     f52:	930a      	streq	r3, [sp, #40]	; 0x28
     f54:	e7a3      	b.n	e9e <cbvprintf+0x43a>
		switch (conv->specifier) {
     f56:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
     f5a:	2878      	cmp	r0, #120	; 0x78
     f5c:	d8ae      	bhi.n	ebc <cbvprintf+0x458>
     f5e:	2862      	cmp	r0, #98	; 0x62
     f60:	d822      	bhi.n	fa8 <cbvprintf+0x544>
     f62:	2825      	cmp	r0, #37	; 0x25
     f64:	f43f ad8f 	beq.w	a86 <cbvprintf+0x22>
     f68:	2858      	cmp	r0, #88	; 0x58
     f6a:	d1a7      	bne.n	ebc <cbvprintf+0x458>
			bps = encode_uint(value->uint, conv, buf, bpe);
     f6c:	f10d 0326 	add.w	r3, sp, #38	; 0x26
     f70:	9300      	str	r3, [sp, #0]
     f72:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
     f76:	ab04      	add	r3, sp, #16
     f78:	aa0c      	add	r2, sp, #48	; 0x30
     f7a:	f004 fc94 	bl	58a6 <encode_uint>
     f7e:	4682      	mov	sl, r0
			if (precision >= 0) {
     f80:	f1b8 0f00 	cmp.w	r8, #0
     f84:	f10d 0026 	add.w	r0, sp, #38	; 0x26
     f88:	db0c      	blt.n	fa4 <cbvprintf+0x540>
				conv->flag_zero = false;
     f8a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
     f8e:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
     f92:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
     f96:	4598      	cmp	r8, r3
				conv->flag_zero = false;
     f98:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
     f9c:	d902      	bls.n	fa4 <cbvprintf+0x540>
					conv->pad0_value = precision - (int)len;
     f9e:	eba8 0303 	sub.w	r3, r8, r3
     fa2:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
     fa4:	4680      	mov	r8, r0
     fa6:	e03d      	b.n	1024 <cbvprintf+0x5c0>
		switch (conv->specifier) {
     fa8:	3863      	subs	r0, #99	; 0x63
     faa:	2815      	cmp	r0, #21
     fac:	d886      	bhi.n	ebc <cbvprintf+0x458>
     fae:	a201      	add	r2, pc, #4	; (adr r2, fb4 <cbvprintf+0x550>)
     fb0:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
     fb4:	00001035 	.word	0x00001035
     fb8:	00001099 	.word	0x00001099
     fbc:	00000ebd 	.word	0x00000ebd
     fc0:	00000ebd 	.word	0x00000ebd
     fc4:	00000ebd 	.word	0x00000ebd
     fc8:	00000ebd 	.word	0x00000ebd
     fcc:	00001099 	.word	0x00001099
     fd0:	00000ebd 	.word	0x00000ebd
     fd4:	00000ebd 	.word	0x00000ebd
     fd8:	00000ebd 	.word	0x00000ebd
     fdc:	00000ebd 	.word	0x00000ebd
     fe0:	000010f3 	.word	0x000010f3
     fe4:	000010c1 	.word	0x000010c1
     fe8:	000010c5 	.word	0x000010c5
     fec:	00000ebd 	.word	0x00000ebd
     ff0:	00000ebd 	.word	0x00000ebd
     ff4:	0000100d 	.word	0x0000100d
     ff8:	00000ebd 	.word	0x00000ebd
     ffc:	000010c1 	.word	0x000010c1
    1000:	00000ebd 	.word	0x00000ebd
    1004:	00000ebd 	.word	0x00000ebd
    1008:	000010c1 	.word	0x000010c1
			if (precision >= 0) {
    100c:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    1010:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    1014:	db0a      	blt.n	102c <cbvprintf+0x5c8>
				len = strnlen(bps, precision);
    1016:	4641      	mov	r1, r8
    1018:	4650      	mov	r0, sl
    101a:	f004 fd26 	bl	5a6a <strnlen>
			bpe = bps + len;
    101e:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
    1022:	2600      	movs	r6, #0
		if (bps == NULL) {
    1024:	f1ba 0f00 	cmp.w	sl, #0
    1028:	d10c      	bne.n	1044 <cbvprintf+0x5e0>
    102a:	e747      	b.n	ebc <cbvprintf+0x458>
				len = strlen(bps);
    102c:	4650      	mov	r0, sl
    102e:	f004 fd15 	bl	5a5c <strlen>
    1032:	e7f4      	b.n	101e <cbvprintf+0x5ba>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    1034:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1036:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
    103a:	2600      	movs	r6, #0
			bps = buf;
    103c:	f10d 0a10 	add.w	sl, sp, #16
			bpe = buf + 1;
    1040:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
    1044:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    1048:	b106      	cbz	r6, 104c <cbvprintf+0x5e8>
			nj_len += 1U;
    104a:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    104c:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    1050:	06d0      	lsls	r0, r2, #27
    1052:	d568      	bpl.n	1126 <cbvprintf+0x6c2>
			nj_len += 2U;
    1054:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    1056:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    1058:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    105a:	bf48      	it	mi
    105c:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    105e:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    1060:	bf48      	it	mi
    1062:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    1064:	f1b9 0f00 	cmp.w	r9, #0
    1068:	dd76      	ble.n	1158 <cbvprintf+0x6f4>
			if (!conv->flag_dash) {
    106a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    106e:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    1072:	f3c2 0380 	ubfx	r3, r2, #2, #1
    1076:	9303      	str	r3, [sp, #12]
    1078:	0753      	lsls	r3, r2, #29
    107a:	d46d      	bmi.n	1158 <cbvprintf+0x6f4>
				if (conv->flag_zero) {
    107c:	0650      	lsls	r0, r2, #25
    107e:	d561      	bpl.n	1144 <cbvprintf+0x6e0>
					if (sign != 0) {
    1080:	b146      	cbz	r6, 1094 <cbvprintf+0x630>
						OUTC(sign);
    1082:	9b02      	ldr	r3, [sp, #8]
    1084:	4659      	mov	r1, fp
    1086:	4630      	mov	r0, r6
    1088:	4798      	blx	r3
    108a:	2800      	cmp	r0, #0
    108c:	db57      	blt.n	113e <cbvprintf+0x6da>
						sign = 0;
    108e:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    1090:	3501      	adds	r5, #1
						sign = 0;
    1092:	461e      	mov	r6, r3
					pad = '0';
    1094:	2330      	movs	r3, #48	; 0x30
    1096:	e056      	b.n	1146 <cbvprintf+0x6e2>
			if (conv->flag_plus) {
    1098:	071e      	lsls	r6, r3, #28
    109a:	d40f      	bmi.n	10bc <cbvprintf+0x658>
				sign = ' ';
    109c:	f013 0610 	ands.w	r6, r3, #16
    10a0:	bf18      	it	ne
    10a2:	2620      	movne	r6, #32
			sint = value->sint;
    10a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
    10a8:	2b00      	cmp	r3, #0
    10aa:	f6bf af5f 	bge.w	f6c <cbvprintf+0x508>
				value->uint = (uint_value_type)-sint;
    10ae:	4252      	negs	r2, r2
    10b0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    10b4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
    10b8:	262d      	movs	r6, #45	; 0x2d
    10ba:	e757      	b.n	f6c <cbvprintf+0x508>
				sign = '+';
    10bc:	262b      	movs	r6, #43	; 0x2b
    10be:	e7f1      	b.n	10a4 <cbvprintf+0x640>
		switch (conv->specifier) {
    10c0:	2600      	movs	r6, #0
    10c2:	e753      	b.n	f6c <cbvprintf+0x508>
			if (value->ptr != NULL) {
    10c4:	980a      	ldr	r0, [sp, #40]	; 0x28
    10c6:	b340      	cbz	r0, 111a <cbvprintf+0x6b6>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    10c8:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    10cc:	9300      	str	r3, [sp, #0]
    10ce:	aa0c      	add	r2, sp, #48	; 0x30
    10d0:	ab04      	add	r3, sp, #16
    10d2:	2100      	movs	r1, #0
    10d4:	f004 fbe7 	bl	58a6 <encode_uint>
				conv->altform_0c = true;
    10d8:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    10dc:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    10e0:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    10e4:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    10e8:	4682      	mov	sl, r0
				conv->altform_0c = true;
    10ea:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
    10ee:	2600      	movs	r6, #0
				goto prec_int_pad0;
    10f0:	e746      	b.n	f80 <cbvprintf+0x51c>
				store_count(conv, value->ptr, count);
    10f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    10f4:	2907      	cmp	r1, #7
    10f6:	f63f aee1 	bhi.w	ebc <cbvprintf+0x458>
    10fa:	e8df f001 	tbb	[pc, r1]
    10fe:	040c      	.short	0x040c
    1100:	08080c06 	.word	0x08080c06
    1104:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    1106:	701d      	strb	r5, [r3, #0]
		break;
    1108:	e6d8      	b.n	ebc <cbvprintf+0x458>
		*(short *)dp = (short)count;
    110a:	801d      	strh	r5, [r3, #0]
		break;
    110c:	e6d6      	b.n	ebc <cbvprintf+0x458>
		*(intmax_t *)dp = (intmax_t)count;
    110e:	17ea      	asrs	r2, r5, #31
    1110:	e9c3 5200 	strd	r5, r2, [r3]
		break;
    1114:	e6d2      	b.n	ebc <cbvprintf+0x458>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    1116:	601d      	str	r5, [r3, #0]
		break;
    1118:	e6d0      	b.n	ebc <cbvprintf+0x458>
			bps = "(nil)";
    111a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 11e4 <cbvprintf+0x780>
    111e:	4606      	mov	r6, r0
			bpe = bps + 5;
    1120:	f10a 0805 	add.w	r8, sl, #5
    1124:	e78e      	b.n	1044 <cbvprintf+0x5e0>
		} else if (conv->altform_0) {
    1126:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    1128:	bf48      	it	mi
    112a:	3301      	addmi	r3, #1
    112c:	e793      	b.n	1056 <cbvprintf+0x5f2>
					OUTC(pad);
    112e:	4618      	mov	r0, r3
    1130:	9303      	str	r3, [sp, #12]
    1132:	4659      	mov	r1, fp
    1134:	9b02      	ldr	r3, [sp, #8]
    1136:	4798      	blx	r3
    1138:	2800      	cmp	r0, #0
    113a:	9b03      	ldr	r3, [sp, #12]
    113c:	da04      	bge.n	1148 <cbvprintf+0x6e4>
#undef OUTS
#undef OUTC
}
    113e:	b011      	add	sp, #68	; 0x44
    1140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    1144:	2320      	movs	r3, #32
    1146:	444d      	add	r5, r9
    1148:	464a      	mov	r2, r9
				while (width-- > 0) {
    114a:	2a00      	cmp	r2, #0
    114c:	eba5 0109 	sub.w	r1, r5, r9
    1150:	f109 39ff 	add.w	r9, r9, #4294967295
    1154:	dceb      	bgt.n	112e <cbvprintf+0x6ca>
    1156:	460d      	mov	r5, r1
		if (sign != 0) {
    1158:	b136      	cbz	r6, 1168 <cbvprintf+0x704>
			OUTC(sign);
    115a:	9b02      	ldr	r3, [sp, #8]
    115c:	4659      	mov	r1, fp
    115e:	4630      	mov	r0, r6
    1160:	4798      	blx	r3
    1162:	2800      	cmp	r0, #0
    1164:	dbeb      	blt.n	113e <cbvprintf+0x6da>
    1166:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    1168:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    116c:	06d9      	lsls	r1, r3, #27
    116e:	d401      	bmi.n	1174 <cbvprintf+0x710>
    1170:	071a      	lsls	r2, r3, #28
    1172:	d506      	bpl.n	1182 <cbvprintf+0x71e>
				OUTC('0');
    1174:	9b02      	ldr	r3, [sp, #8]
    1176:	4659      	mov	r1, fp
    1178:	2030      	movs	r0, #48	; 0x30
    117a:	4798      	blx	r3
    117c:	2800      	cmp	r0, #0
    117e:	dbde      	blt.n	113e <cbvprintf+0x6da>
    1180:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    1182:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    1186:	06db      	lsls	r3, r3, #27
    1188:	d507      	bpl.n	119a <cbvprintf+0x736>
				OUTC(conv->specifier);
    118a:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    118e:	9b02      	ldr	r3, [sp, #8]
    1190:	4659      	mov	r1, fp
    1192:	4798      	blx	r3
    1194:	2800      	cmp	r0, #0
    1196:	dbd2      	blt.n	113e <cbvprintf+0x6da>
    1198:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    119a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    119c:	442e      	add	r6, r5
    119e:	1b73      	subs	r3, r6, r5
    11a0:	2b00      	cmp	r3, #0
    11a2:	dc16      	bgt.n	11d2 <cbvprintf+0x76e>
			OUTS(bps, bpe);
    11a4:	9802      	ldr	r0, [sp, #8]
    11a6:	4643      	mov	r3, r8
    11a8:	4652      	mov	r2, sl
    11aa:	4659      	mov	r1, fp
    11ac:	f004 fbc1 	bl	5932 <outs>
    11b0:	2800      	cmp	r0, #0
    11b2:	dbc4      	blt.n	113e <cbvprintf+0x6da>
    11b4:	4405      	add	r5, r0
		while (width > 0) {
    11b6:	44a9      	add	r9, r5
    11b8:	eba9 0305 	sub.w	r3, r9, r5
    11bc:	2b00      	cmp	r3, #0
    11be:	f77f ae7d 	ble.w	ebc <cbvprintf+0x458>
			OUTC(' ');
    11c2:	9b02      	ldr	r3, [sp, #8]
    11c4:	4659      	mov	r1, fp
    11c6:	2020      	movs	r0, #32
    11c8:	4798      	blx	r3
    11ca:	2800      	cmp	r0, #0
    11cc:	dbb7      	blt.n	113e <cbvprintf+0x6da>
    11ce:	3501      	adds	r5, #1
			--width;
    11d0:	e7f2      	b.n	11b8 <cbvprintf+0x754>
				OUTC('0');
    11d2:	9b02      	ldr	r3, [sp, #8]
    11d4:	4659      	mov	r1, fp
    11d6:	2030      	movs	r0, #48	; 0x30
    11d8:	4798      	blx	r3
    11da:	2800      	cmp	r0, #0
    11dc:	dbaf      	blt.n	113e <cbvprintf+0x6da>
    11de:	3501      	adds	r5, #1
    11e0:	e7dd      	b.n	119e <cbvprintf+0x73a>
    11e2:	bf00      	nop
    11e4:	00006526 	.word	0x00006526

000011e8 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    11e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    11ea:	4605      	mov	r5, r0
	__asm__ volatile(
    11ec:	f04f 0320 	mov.w	r3, #32
    11f0:	f3ef 8611 	mrs	r6, BASEPRI
    11f4:	f383 8812 	msr	BASEPRI_MAX, r3
    11f8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    11fc:	481d      	ldr	r0, [pc, #116]	; (1274 <pm_state_notify+0x8c>)
    11fe:	f002 fe6b 	bl	3ed8 <z_spin_lock_valid>
    1202:	b968      	cbnz	r0, 1220 <pm_state_notify+0x38>
    1204:	4a1c      	ldr	r2, [pc, #112]	; (1278 <pm_state_notify+0x90>)
    1206:	491d      	ldr	r1, [pc, #116]	; (127c <pm_state_notify+0x94>)
    1208:	481d      	ldr	r0, [pc, #116]	; (1280 <pm_state_notify+0x98>)
    120a:	2381      	movs	r3, #129	; 0x81
    120c:	f004 fae0 	bl	57d0 <printk>
    1210:	4918      	ldr	r1, [pc, #96]	; (1274 <pm_state_notify+0x8c>)
    1212:	481c      	ldr	r0, [pc, #112]	; (1284 <pm_state_notify+0x9c>)
    1214:	f004 fadc 	bl	57d0 <printk>
    1218:	4817      	ldr	r0, [pc, #92]	; (1278 <pm_state_notify+0x90>)
    121a:	2181      	movs	r1, #129	; 0x81
    121c:	f004 fb9f 	bl	595e <assert_post_action>
	z_spin_lock_set_owner(l);
    1220:	4814      	ldr	r0, [pc, #80]	; (1274 <pm_state_notify+0x8c>)
    1222:	f002 fe77 	bl	3f14 <z_spin_lock_set_owner>
	return list->head;
    1226:	4b18      	ldr	r3, [pc, #96]	; (1288 <pm_state_notify+0xa0>)
    1228:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    122a:	b15c      	cbz	r4, 1244 <pm_state_notify+0x5c>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_state.state);
    122c:	4f17      	ldr	r7, [pc, #92]	; (128c <pm_state_notify+0xa4>)
			callback = notifier->state_exit;
    122e:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    1232:	2d00      	cmp	r5, #0
    1234:	bf08      	it	eq
    1236:	4613      	moveq	r3, r2
		if (callback) {
    1238:	b10b      	cbz	r3, 123e <pm_state_notify+0x56>
			callback(z_power_state.state);
    123a:	7838      	ldrb	r0, [r7, #0]
    123c:	4798      	blx	r3
	return node->next;
    123e:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1240:	2c00      	cmp	r4, #0
    1242:	d1f4      	bne.n	122e <pm_state_notify+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1244:	480b      	ldr	r0, [pc, #44]	; (1274 <pm_state_notify+0x8c>)
    1246:	f002 fe55 	bl	3ef4 <z_spin_unlock_valid>
    124a:	b968      	cbnz	r0, 1268 <pm_state_notify+0x80>
    124c:	4a0a      	ldr	r2, [pc, #40]	; (1278 <pm_state_notify+0x90>)
    124e:	4910      	ldr	r1, [pc, #64]	; (1290 <pm_state_notify+0xa8>)
    1250:	480b      	ldr	r0, [pc, #44]	; (1280 <pm_state_notify+0x98>)
    1252:	23ac      	movs	r3, #172	; 0xac
    1254:	f004 fabc 	bl	57d0 <printk>
    1258:	4906      	ldr	r1, [pc, #24]	; (1274 <pm_state_notify+0x8c>)
    125a:	480e      	ldr	r0, [pc, #56]	; (1294 <pm_state_notify+0xac>)
    125c:	f004 fab8 	bl	57d0 <printk>
    1260:	4805      	ldr	r0, [pc, #20]	; (1278 <pm_state_notify+0x90>)
    1262:	21ac      	movs	r1, #172	; 0xac
    1264:	f004 fb7b 	bl	595e <assert_post_action>
	__asm__ volatile(
    1268:	f386 8811 	msr	BASEPRI, r6
    126c:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    1270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1272:	bf00      	nop
    1274:	20000178 	.word	0x20000178
    1278:	000064a7 	.word	0x000064a7
    127c:	000064f9 	.word	0x000064f9
    1280:	00006321 	.word	0x00006321
    1284:	0000650e 	.word	0x0000650e
    1288:	2000017c 	.word	0x2000017c
    128c:	20000184 	.word	0x20000184
    1290:	000064cd 	.word	0x000064cd
    1294:	000064e4 	.word	0x000064e4

00001298 <pm_system_resume>:

void pm_system_resume(void)
{
    1298:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
    129a:	4b0f      	ldr	r3, [pc, #60]	; (12d8 <pm_system_resume+0x40>)
    129c:	681a      	ldr	r2, [r3, #0]
    129e:	b9ba      	cbnz	r2, 12d0 <pm_system_resume+0x38>
		post_ops_done = 1;
    12a0:	2201      	movs	r2, #1
    12a2:	601a      	str	r2, [r3, #0]
		exit_pos_ops(z_power_state);
    12a4:	4a0d      	ldr	r2, [pc, #52]	; (12dc <pm_system_resume+0x44>)
    12a6:	ca07      	ldmia	r2, {r0, r1, r2}
    12a8:	ab01      	add	r3, sp, #4
    12aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    12ae:	4a0c      	ldr	r2, [pc, #48]	; (12e0 <pm_system_resume+0x48>)
    12b0:	b14a      	cbz	r2, 12c6 <pm_system_resume+0x2e>
		pm_power_state_exit_post_ops(info);
    12b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    12b6:	f004 fc2a 	bl	5b0e <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    12ba:	2000      	movs	r0, #0
	}
}
    12bc:	b005      	add	sp, #20
    12be:	f85d eb04 	ldr.w	lr, [sp], #4
		pm_state_notify(false);
    12c2:	f7ff bf91 	b.w	11e8 <pm_state_notify>
    12c6:	f382 8811 	msr	BASEPRI, r2
    12ca:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    12ce:	e7f4      	b.n	12ba <pm_system_resume+0x22>
}
    12d0:	b005      	add	sp, #20
    12d2:	f85d fb04 	ldr.w	pc, [sp], #4
    12d6:	bf00      	nop
    12d8:	20000004 	.word	0x20000004
    12dc:	20000184 	.word	0x20000184
    12e0:	00005b0f 	.word	0x00005b0f

000012e4 <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
    12e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    12e6:	b089      	sub	sp, #36	; 0x24
	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);
	z_power_state = pm_policy_next_state(ticks);
    12e8:	466e      	mov	r6, sp
    12ea:	4601      	mov	r1, r0
{
    12ec:	4605      	mov	r5, r0
	z_power_state = pm_policy_next_state(ticks);
    12ee:	4630      	mov	r0, r6
    12f0:	f004 fb3d 	bl	596e <pm_policy_next_state>
    12f4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    12f8:	4c20      	ldr	r4, [pc, #128]	; (137c <pm_system_suspend+0x98>)
    12fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
    12fe:	7820      	ldrb	r0, [r4, #0]
    1300:	4626      	mov	r6, r4
    1302:	2800      	cmp	r0, #0
    1304:	d037      	beq.n	1376 <pm_system_suspend+0x92>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
		return z_power_state.state;
	}
	post_ops_done = 0;
    1306:	4b1e      	ldr	r3, [pc, #120]	; (1380 <pm_system_suspend+0x9c>)
    1308:	2000      	movs	r0, #0
    130a:	6018      	str	r0, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
    130c:	1c6b      	adds	r3, r5, #1
    130e:	d01d      	beq.n	134c <pm_system_suspend+0x68>
		/*
		 * Just a sanity check in case the policy manager does not
		 * handle this error condition properly.
		 */
		__ASSERT(z_power_state.min_residency_us >=
    1310:	4291      	cmp	r1, r2
    1312:	d20c      	bcs.n	132e <pm_system_suspend+0x4a>
    1314:	491b      	ldr	r1, [pc, #108]	; (1384 <pm_system_suspend+0xa0>)
    1316:	4a1c      	ldr	r2, [pc, #112]	; (1388 <pm_system_suspend+0xa4>)
    1318:	481c      	ldr	r0, [pc, #112]	; (138c <pm_system_suspend+0xa8>)
    131a:	23ca      	movs	r3, #202	; 0xca
    131c:	f004 fa58 	bl	57d0 <printk>
    1320:	481b      	ldr	r0, [pc, #108]	; (1390 <pm_system_suspend+0xac>)
    1322:	f004 fa55 	bl	57d0 <printk>
    1326:	4818      	ldr	r0, [pc, #96]	; (1388 <pm_system_suspend+0xa4>)
    1328:	21ca      	movs	r1, #202	; 0xca
    132a:	f004 fb18 	bl	595e <assert_post_action>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    132e:	68a7      	ldr	r7, [r4, #8]
    1330:	4818      	ldr	r0, [pc, #96]	; (1394 <pm_system_suspend+0xb0>)
    1332:	4a19      	ldr	r2, [pc, #100]	; (1398 <pm_system_suspend+0xb4>)
    1334:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    1338:	2100      	movs	r1, #0
    133a:	2300      	movs	r3, #0
    133c:	fbe7 010c 	umlal	r0, r1, r7, ip
    1340:	f7fe feba 	bl	b8 <__aeabi_uldivmod>

		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    1344:	2101      	movs	r1, #1
    1346:	1a28      	subs	r0, r5, r0
    1348:	f004 f8c8 	bl	54dc <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    134c:	f002 ff9e 	bl	428c <k_sched_lock>
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
    1350:	2001      	movs	r0, #1
    1352:	f7ff ff49 	bl	11e8 <pm_state_notify>
	pm_state_set(z_power_state);
    1356:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    135a:	ab05      	add	r3, sp, #20
    135c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    1360:	4a0e      	ldr	r2, [pc, #56]	; (139c <pm_system_suspend+0xb8>)
    1362:	b11a      	cbz	r2, 136c <pm_system_suspend+0x88>
		pm_power_state_set(info);
    1364:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    1368:	f004 fbbe 	bl	5ae8 <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
    136c:	f7ff ff94 	bl	1298 <pm_system_resume>
	k_sched_unlock();
    1370:	f003 fbdc 	bl	4b2c <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
	return z_power_state.state;
    1374:	7820      	ldrb	r0, [r4, #0]
}
    1376:	b009      	add	sp, #36	; 0x24
    1378:	bdf0      	pop	{r4, r5, r6, r7, pc}
    137a:	bf00      	nop
    137c:	20000184 	.word	0x20000184
    1380:	20000004 	.word	0x20000004
    1384:	000065a2 	.word	0x000065a2
    1388:	0000652c 	.word	0x0000652c
    138c:	00006321 	.word	0x00006321
    1390:	000065e2 	.word	0x000065e2
    1394:	000f423f 	.word	0x000f423f
    1398:	000f4240 	.word	0x000f4240
    139c:	00005ae9 	.word	0x00005ae9

000013a0 <tmp100_channel_get>:
			      struct sensor_value *val)
{
	struct tmp100_data *drv_data = dev->data;
    int32_t uval;

	if (chan != SENSOR_CHAN_AMBIENT_TEMP) {
    13a0:	290d      	cmp	r1, #13
	struct tmp100_data *drv_data = dev->data;
    13a2:	6903      	ldr	r3, [r0, #16]
	if (chan != SENSOR_CHAN_AMBIENT_TEMP) {
    13a4:	d10d      	bne.n	13c2 <tmp100_channel_get+0x22>
		return -ENOTSUP;
	}

    uval = (int32_t)drv_data->sample * TMP100_TEMP_SCALE;
    13a6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    val->val1 = uval / 1000000;
    13aa:	4807      	ldr	r0, [pc, #28]	; (13c8 <tmp100_channel_get+0x28>)
    uval = (int32_t)drv_data->sample * TMP100_TEMP_SCALE;
    13ac:	f24f 4124 	movw	r1, #62500	; 0xf424
    13b0:	434b      	muls	r3, r1
    val->val1 = uval / 1000000;
    13b2:	fb93 f1f0 	sdiv	r1, r3, r0
    val->val2 = uval % 1000000;
    13b6:	fb00 3311 	mls	r3, r0, r1, r3
    val->val1 = uval / 1000000;
    13ba:	6011      	str	r1, [r2, #0]
    val->val2 = uval % 1000000;
    13bc:	6053      	str	r3, [r2, #4]

	return 0;
    13be:	2000      	movs	r0, #0
    13c0:	4770      	bx	lr
		return -ENOTSUP;
    13c2:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    13c6:	4770      	bx	lr
    13c8:	000f4240 	.word	0x000f4240

000013cc <tmp100_init>:
	.sample_fetch = tmp100_sample_fetch,
	.channel_get = tmp100_channel_get,
};

int tmp100_init(const struct device *dev)
{
    13cc:	b510      	push	{r4, lr}
	struct tmp100_data *drv_data = dev->data;
    13ce:	6904      	ldr	r4, [r0, #16]
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    13d0:	4804      	ldr	r0, [pc, #16]	; (13e4 <tmp100_init+0x18>)
    13d2:	f002 fb79 	bl	3ac8 <z_impl_device_get_binding>
	drv_data->i2c = device_get_binding(DT_INST_BUS_LABEL(0));
    if (drv_data->i2c == NULL) {
        LOG_DBG("Failed to get pointer to %s device!",
                DT_INST_BUS_LABEL(0));
        return -EINVAL;
    13d6:	2800      	cmp	r0, #0
	drv_data->i2c = device_get_binding(DT_INST_BUS_LABEL(0));
    13d8:	6020      	str	r0, [r4, #0]
    }
	return 0;
}
    13da:	bf0c      	ite	eq
    13dc:	f06f 0015 	mvneq.w	r0, #21
    13e0:	2000      	movne	r0, #0
    13e2:	bd10      	pop	{r4, pc}
    13e4:	00006607 	.word	0x00006607

000013e8 <tmp100_sample_fetch>:
    __ASSERT_NO_MSG(chan == SENSOR_CHAN_ALL || chan == SENSOR_CHAN_AMBIENT_TEMP);
    13e8:	2939      	cmp	r1, #57	; 0x39
{
    13ea:	b513      	push	{r0, r1, r4, lr}
	struct tmp100_data *drv_data = dev->data;
    13ec:	6904      	ldr	r4, [r0, #16]
    __ASSERT_NO_MSG(chan == SENSOR_CHAN_ALL || chan == SENSOR_CHAN_AMBIENT_TEMP);
    13ee:	d00b      	beq.n	1408 <tmp100_sample_fetch+0x20>
    13f0:	290d      	cmp	r1, #13
    13f2:	d009      	beq.n	1408 <tmp100_sample_fetch+0x20>
    13f4:	490d      	ldr	r1, [pc, #52]	; (142c <tmp100_sample_fetch+0x44>)
    13f6:	480e      	ldr	r0, [pc, #56]	; (1430 <tmp100_sample_fetch+0x48>)
    13f8:	4a0e      	ldr	r2, [pc, #56]	; (1434 <tmp100_sample_fetch+0x4c>)
    13fa:	2360      	movs	r3, #96	; 0x60
    13fc:	f004 f9e8 	bl	57d0 <printk>
    1400:	480c      	ldr	r0, [pc, #48]	; (1434 <tmp100_sample_fetch+0x4c>)
    1402:	2160      	movs	r1, #96	; 0x60
    1404:	f004 faab 	bl	595e <assert_post_action>
    if (tmp100_reg_read(drv_data, TMP100_REG_TEMPERATURE, &val) < 0) {
    1408:	6820      	ldr	r0, [r4, #0]
    140a:	f10d 0206 	add.w	r2, sp, #6
    140e:	2100      	movs	r1, #0
    1410:	f004 fab2 	bl	5978 <tmp100_reg_read.isra.0>
    1414:	2800      	cmp	r0, #0
	drv_data->sample = arithmetic_shift_right((int16_t)val, 4);
    1416:	bfa3      	ittte	ge
    1418:	f9bd 3006 	ldrshge.w	r3, [sp, #6]
	return 0;
    141c:	2000      	movge	r0, #0

	/* make all bits of sign_ext be the same as the value's sign bit */
	sign_ext = -sign_ext;

	/* shift value and fill opened bit positions with sign bit */
	return (value >> shift) | (sign_ext << (64 - shift));
    141e:	091b      	lsrge	r3, r3, #4
        return -EIO;
    1420:	f06f 0004 	mvnlt.w	r0, #4
	drv_data->sample = arithmetic_shift_right((int16_t)val, 4);
    1424:	bfa8      	it	ge
    1426:	80a3      	strhge	r3, [r4, #4]
}
    1428:	b002      	add	sp, #8
    142a:	bd10      	pop	{r4, pc}
    142c:	0000664b 	.word	0x0000664b
    1430:	00006321 	.word	0x00006321
    1434:	0000660d 	.word	0x0000660d

00001438 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    1438:	4901      	ldr	r1, [pc, #4]	; (1440 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    143a:	2210      	movs	r2, #16
	str	r2, [r1]
    143c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    143e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    1440:	e000ed10 	.word	0xe000ed10

00001444 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    1444:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    1446:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    1448:	f380 8811 	msr	BASEPRI, r0
	isb
    144c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    1450:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    1454:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    1456:	b662      	cpsie	i
	isb
    1458:	f3bf 8f6f 	isb	sy

	bx	lr
    145c:	4770      	bx	lr
    145e:	bf00      	nop

00001460 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    1460:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    1462:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    1464:	f381 8811 	msr	BASEPRI, r1

	wfe
    1468:	bf20      	wfe

	msr	BASEPRI, r0
    146a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    146e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    1470:	4770      	bx	lr
    1472:	bf00      	nop

00001474 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1474:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1476:	2b00      	cmp	r3, #0
    1478:	db08      	blt.n	148c <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    147a:	2201      	movs	r2, #1
    147c:	f000 001f 	and.w	r0, r0, #31
    1480:	fa02 f000 	lsl.w	r0, r2, r0
    1484:	095b      	lsrs	r3, r3, #5
    1486:	4a02      	ldr	r2, [pc, #8]	; (1490 <arch_irq_enable+0x1c>)
    1488:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    148c:	4770      	bx	lr
    148e:	bf00      	nop
    1490:	e000e100 	.word	0xe000e100

00001494 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    1494:	4b05      	ldr	r3, [pc, #20]	; (14ac <arch_irq_is_enabled+0x18>)
    1496:	0942      	lsrs	r2, r0, #5
    1498:	f000 001f 	and.w	r0, r0, #31
    149c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    14a0:	2301      	movs	r3, #1
    14a2:	fa03 f000 	lsl.w	r0, r3, r0
}
    14a6:	4010      	ands	r0, r2
    14a8:	4770      	bx	lr
    14aa:	bf00      	nop
    14ac:	e000e100 	.word	0xe000e100

000014b0 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    14b0:	b570      	push	{r4, r5, r6, lr}
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    14b2:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    14b4:	2c07      	cmp	r4, #7
{
    14b6:	4605      	mov	r5, r0
    14b8:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    14ba:	d90f      	bls.n	14dc <z_arm_irq_priority_set+0x2c>
    14bc:	4a11      	ldr	r2, [pc, #68]	; (1504 <z_arm_irq_priority_set+0x54>)
    14be:	4912      	ldr	r1, [pc, #72]	; (1508 <z_arm_irq_priority_set+0x58>)
    14c0:	4812      	ldr	r0, [pc, #72]	; (150c <z_arm_irq_priority_set+0x5c>)
    14c2:	2358      	movs	r3, #88	; 0x58
    14c4:	f004 f984 	bl	57d0 <printk>
    14c8:	4811      	ldr	r0, [pc, #68]	; (1510 <z_arm_irq_priority_set+0x60>)
    14ca:	4631      	mov	r1, r6
    14cc:	2307      	movs	r3, #7
    14ce:	462a      	mov	r2, r5
    14d0:	f004 f97e 	bl	57d0 <printk>
    14d4:	480b      	ldr	r0, [pc, #44]	; (1504 <z_arm_irq_priority_set+0x54>)
    14d6:	2158      	movs	r1, #88	; 0x58
    14d8:	f004 fa41 	bl	595e <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    14dc:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    14de:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    14e0:	bfac      	ite	ge
    14e2:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    14e6:	4b0b      	ldrlt	r3, [pc, #44]	; (1514 <z_arm_irq_priority_set+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    14e8:	ea4f 1444 	mov.w	r4, r4, lsl #5
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    14ec:	bfb8      	it	lt
    14ee:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    14f2:	b2e4      	uxtb	r4, r4
    14f4:	bfaa      	itet	ge
    14f6:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    14fa:	555c      	strblt	r4, [r3, r5]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    14fc:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
}
    1500:	bd70      	pop	{r4, r5, r6, pc}
    1502:	bf00      	nop
    1504:	0000668e 	.word	0x0000668e
    1508:	000066c4 	.word	0x000066c4
    150c:	00006321 	.word	0x00006321
    1510:	000066df 	.word	0x000066df
    1514:	e000ed14 	.word	0xe000ed14

00001518 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    1518:	bf30      	wfi
    b z_SysNmiOnReset
    151a:	f7ff bffd 	b.w	1518 <z_SysNmiOnReset>
    151e:	bf00      	nop

00001520 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    1520:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1522:	4b08      	ldr	r3, [pc, #32]	; (1544 <z_arm_prep_c+0x24>)
    1524:	4a08      	ldr	r2, [pc, #32]	; (1548 <z_arm_prep_c+0x28>)
    1526:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    152a:	6093      	str	r3, [r2, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    152c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1530:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    1534:	f002 fb6a 	bl	3c0c <z_bss_zero>
	z_data_copy();
    1538:	f003 fe0c 	bl	5154 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    153c:	f000 fa1c 	bl	1978 <z_arm_interrupt_init>
	z_cstart();
    1540:	f002 fb6e 	bl	3c20 <z_cstart>
    1544:	00000000 	.word	0x00000000
    1548:	e000ed00 	.word	0xe000ed00

0000154c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    154c:	4a09      	ldr	r2, [pc, #36]	; (1574 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    154e:	490a      	ldr	r1, [pc, #40]	; (1578 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    1550:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    1552:	6809      	ldr	r1, [r1, #0]
    1554:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1556:	4909      	ldr	r1, [pc, #36]	; (157c <arch_swap+0x30>)
	_current->arch.basepri = key;
    1558:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    155a:	684b      	ldr	r3, [r1, #4]
    155c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1560:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    1562:	2300      	movs	r3, #0
    1564:	f383 8811 	msr	BASEPRI, r3
    1568:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    156c:	6893      	ldr	r3, [r2, #8]
}
    156e:	6f98      	ldr	r0, [r3, #120]	; 0x78
    1570:	4770      	bx	lr
    1572:	bf00      	nop
    1574:	200002dc 	.word	0x200002dc
    1578:	000062c8 	.word	0x000062c8
    157c:	e000ed00 	.word	0xe000ed00

00001580 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1580:	4912      	ldr	r1, [pc, #72]	; (15cc <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    1582:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1584:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    1588:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    158a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    158e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1592:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    1594:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    1598:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    159c:	4f0c      	ldr	r7, [pc, #48]	; (15d0 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    159e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    15a2:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    15a4:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    15a6:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    15a8:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    15aa:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    15ac:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    15ae:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    15b2:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    15b4:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    15b6:	f000 fa21 	bl	19fc <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    15ba:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    15be:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    15c2:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    15c6:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    15ca:	4770      	bx	lr
    ldr r1, =_kernel
    15cc:	200002dc 	.word	0x200002dc
    ldr v4, =_SCS_ICSR
    15d0:	e000ed04 	.word	0xe000ed04

000015d4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    15d4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    15d8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    15da:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    15de:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    15e2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    15e4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    15e8:	2902      	cmp	r1, #2
    beq _oops
    15ea:	d0ff      	beq.n	15ec <_oops>

000015ec <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    15ec:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    15ee:	f004 fa26 	bl	5a3e <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    15f2:	bd01      	pop	{r0, pc}

000015f4 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    15f4:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    15f8:	9b00      	ldr	r3, [sp, #0]
    15fa:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    15fe:	490a      	ldr	r1, [pc, #40]	; (1628 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    1600:	9b01      	ldr	r3, [sp, #4]
    1602:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    1606:	9b02      	ldr	r3, [sp, #8]
    1608:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    160c:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    1610:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    1614:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    1618:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    161c:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    161e:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    1620:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    1622:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    1624:	4770      	bx	lr
    1626:	bf00      	nop
    1628:	00005893 	.word	0x00005893

0000162c <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    162c:	4a09      	ldr	r2, [pc, #36]	; (1654 <z_check_thread_stack_fail+0x28>)
{
    162e:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    1630:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    1632:	b170      	cbz	r0, 1652 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    1634:	f113 0f16 	cmn.w	r3, #22
    1638:	6e40      	ldr	r0, [r0, #100]	; 0x64
    163a:	d005      	beq.n	1648 <z_check_thread_stack_fail+0x1c>
    163c:	f1a0 0220 	sub.w	r2, r0, #32
    1640:	429a      	cmp	r2, r3
    1642:	d805      	bhi.n	1650 <z_check_thread_stack_fail+0x24>
    1644:	4283      	cmp	r3, r0
    1646:	d203      	bcs.n	1650 <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    1648:	4281      	cmp	r1, r0
    164a:	bf28      	it	cs
    164c:	2000      	movcs	r0, #0
    164e:	4770      	bx	lr
    1650:	2000      	movs	r0, #0
}
    1652:	4770      	bx	lr
    1654:	200002dc 	.word	0x200002dc

00001658 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    1658:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    165a:	4b09      	ldr	r3, [pc, #36]	; (1680 <arch_switch_to_main_thread+0x28>)
    165c:	6098      	str	r0, [r3, #8]
{
    165e:	460d      	mov	r5, r1
    1660:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    1662:	f000 f9cb 	bl	19fc <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    1666:	4620      	mov	r0, r4
    1668:	f385 8809 	msr	PSP, r5
    166c:	2100      	movs	r1, #0
    166e:	b663      	cpsie	if
    1670:	f381 8811 	msr	BASEPRI, r1
    1674:	f3bf 8f6f 	isb	sy
    1678:	2200      	movs	r2, #0
    167a:	2300      	movs	r3, #0
    167c:	f004 f909 	bl	5892 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    1680:	200002dc 	.word	0x200002dc

00001684 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1684:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    1686:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1688:	4a0b      	ldr	r2, [pc, #44]	; (16b8 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    168a:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    168c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    168e:	bf1e      	ittt	ne
	movne	r1, #0
    1690:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1692:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    1694:	f004 fc54 	blne	5f40 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1698:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    169a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    169e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    16a2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    16a6:	4905      	ldr	r1, [pc, #20]	; (16bc <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    16a8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    16aa:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    16ac:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    16ae:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    16b2:	4903      	ldr	r1, [pc, #12]	; (16c0 <_isr_wrapper+0x3c>)
	bx r1
    16b4:	4708      	bx	r1
    16b6:	0000      	.short	0x0000
	ldr r2, =_kernel
    16b8:	200002dc 	.word	0x200002dc
	ldr r1, =_sw_isr_table
    16bc:	00006074 	.word	0x00006074
	ldr r1, =z_arm_int_exit
    16c0:	000016c5 	.word	0x000016c5

000016c4 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    16c4:	4b04      	ldr	r3, [pc, #16]	; (16d8 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    16c6:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    16c8:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    16ca:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    16cc:	d003      	beq.n	16d6 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    16ce:	4903      	ldr	r1, [pc, #12]	; (16dc <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    16d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    16d4:	600a      	str	r2, [r1, #0]

000016d6 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    16d6:	4770      	bx	lr
	ldr r3, =_kernel
    16d8:	200002dc 	.word	0x200002dc
	ldr r1, =_SCS_ICSR
    16dc:	e000ed04 	.word	0xe000ed04

000016e0 <mem_manage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    16e0:	4b22      	ldr	r3, [pc, #136]	; (176c <mem_manage_fault+0x8c>)
{
    16e2:	b570      	push	{r4, r5, r6, lr}
    16e4:	4615      	mov	r5, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    16e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    16e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    16ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
    16ec:	4604      	mov	r4, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    16ee:	0790      	lsls	r0, r2, #30
    16f0:	d519      	bpl.n	1726 <mem_manage_fault+0x46>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    16f2:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    16f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    16f6:	0612      	lsls	r2, r2, #24
    16f8:	d515      	bpl.n	1726 <mem_manage_fault+0x46>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    16fa:	b119      	cbz	r1, 1704 <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    16fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    16fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    1702:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    1704:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1706:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1708:	06d6      	lsls	r6, r2, #27
    170a:	d40f      	bmi.n	172c <mem_manage_fault+0x4c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    170c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    170e:	0799      	lsls	r1, r3, #30
    1710:	d40c      	bmi.n	172c <mem_manage_fault+0x4c>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1712:	2400      	movs	r4, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1714:	4a15      	ldr	r2, [pc, #84]	; (176c <mem_manage_fault+0x8c>)
    1716:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1718:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    171c:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    171e:	2300      	movs	r3, #0
    1720:	702b      	strb	r3, [r5, #0]

	return reason;
}
    1722:	4620      	mov	r0, r4
    1724:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
    1726:	f06f 0015 	mvn.w	r0, #21
    172a:	e7eb      	b.n	1704 <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    172c:	4e0f      	ldr	r6, [pc, #60]	; (176c <mem_manage_fault+0x8c>)
    172e:	6873      	ldr	r3, [r6, #4]
    1730:	051a      	lsls	r2, r3, #20
    1732:	d5ee      	bpl.n	1712 <mem_manage_fault+0x32>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    1734:	4621      	mov	r1, r4
    1736:	f7ff ff79 	bl	162c <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    173a:	4604      	mov	r4, r0
    173c:	b118      	cbz	r0, 1746 <mem_manage_fault+0x66>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    173e:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    1742:	2402      	movs	r4, #2
    1744:	e7e6      	b.n	1714 <mem_manage_fault+0x34>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    1746:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1748:	06db      	lsls	r3, r3, #27
    174a:	d5e2      	bpl.n	1712 <mem_manage_fault+0x32>
    174c:	4a08      	ldr	r2, [pc, #32]	; (1770 <mem_manage_fault+0x90>)
    174e:	4909      	ldr	r1, [pc, #36]	; (1774 <mem_manage_fault+0x94>)
    1750:	4809      	ldr	r0, [pc, #36]	; (1778 <mem_manage_fault+0x98>)
    1752:	f240 1349 	movw	r3, #329	; 0x149
    1756:	f004 f83b 	bl	57d0 <printk>
    175a:	4808      	ldr	r0, [pc, #32]	; (177c <mem_manage_fault+0x9c>)
    175c:	f004 f838 	bl	57d0 <printk>
    1760:	4803      	ldr	r0, [pc, #12]	; (1770 <mem_manage_fault+0x90>)
    1762:	f240 1149 	movw	r1, #329	; 0x149
    1766:	f004 f8fa 	bl	595e <assert_post_action>
    176a:	e7d3      	b.n	1714 <mem_manage_fault+0x34>
    176c:	e000ed00 	.word	0xe000ed00
    1770:	0000671f 	.word	0x0000671f
    1774:	00006759 	.word	0x00006759
    1778:	00006321 	.word	0x00006321
    177c:	000067a3 	.word	0x000067a3

00001780 <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1780:	4b0c      	ldr	r3, [pc, #48]	; (17b4 <bus_fault.constprop.0+0x34>)
    1782:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1784:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1786:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1788:	0592      	lsls	r2, r2, #22
    178a:	d508      	bpl.n	179e <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    178c:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    178e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1790:	0412      	lsls	r2, r2, #16
    1792:	d504      	bpl.n	179e <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    1794:	b118      	cbz	r0, 179e <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1796:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1798:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    179c:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    179e:	4b05      	ldr	r3, [pc, #20]	; (17b4 <bus_fault.constprop.0+0x34>)
    17a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    17a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    17a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    17a6:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    17a8:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    17ac:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    17ae:	7008      	strb	r0, [r1, #0]

	return reason;
}
    17b0:	4770      	bx	lr
    17b2:	bf00      	nop
    17b4:	e000ed00 	.word	0xe000ed00

000017b8 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    17b8:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    17ba:	4b5e      	ldr	r3, [pc, #376]	; (1934 <z_arm_fault+0x17c>)
    17bc:	685c      	ldr	r4, [r3, #4]
{
    17be:	b08a      	sub	sp, #40	; 0x28
    17c0:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    17c2:	f3c4 0408 	ubfx	r4, r4, #0, #9
    17c6:	2600      	movs	r6, #0
    17c8:	f386 8811 	msr	BASEPRI, r6
    17cc:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    17d0:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    17d4:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    17d8:	d108      	bne.n	17ec <z_arm_fault+0x34>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    17da:	f002 030c 	and.w	r3, r2, #12
    17de:	2b08      	cmp	r3, #8
    17e0:	d004      	beq.n	17ec <z_arm_fault+0x34>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    17e2:	0711      	lsls	r1, r2, #28
			ptr_esf = (z_arch_esf_t *)msp;
    17e4:	bf5c      	itt	pl
    17e6:	4605      	movpl	r5, r0
			*nested_exc = true;
    17e8:	2601      	movpl	r6, #1

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    17ea:	b97d      	cbnz	r5, 180c <z_arm_fault+0x54>
    17ec:	4a52      	ldr	r2, [pc, #328]	; (1938 <z_arm_fault+0x180>)
    17ee:	4953      	ldr	r1, [pc, #332]	; (193c <z_arm_fault+0x184>)
    17f0:	4853      	ldr	r0, [pc, #332]	; (1940 <z_arm_fault+0x188>)
    17f2:	f240 33f2 	movw	r3, #1010	; 0x3f2
    17f6:	f003 ffeb 	bl	57d0 <printk>
    17fa:	4852      	ldr	r0, [pc, #328]	; (1944 <z_arm_fault+0x18c>)
    17fc:	f003 ffe8 	bl	57d0 <printk>
    1800:	484d      	ldr	r0, [pc, #308]	; (1938 <z_arm_fault+0x180>)
    1802:	f240 31f2 	movw	r1, #1010	; 0x3f2
    1806:	f004 f8aa 	bl	595e <assert_post_action>
    180a:	2500      	movs	r5, #0
	*recoverable = false;
    180c:	2300      	movs	r3, #0
    180e:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    1812:	1ee3      	subs	r3, r4, #3
    1814:	2b03      	cmp	r3, #3
    1816:	f200 8086 	bhi.w	1926 <z_arm_fault+0x16e>
    181a:	e8df f003 	tbb	[pc, r3]
    181e:	6f02      	.short	0x6f02
    1820:	7773      	.short	0x7773
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1822:	4b44      	ldr	r3, [pc, #272]	; (1934 <z_arm_fault+0x17c>)
    1824:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    1826:	f014 0402 	ands.w	r4, r4, #2
    182a:	d17c      	bne.n	1926 <z_arm_fault+0x16e>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    182c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    182e:	2a00      	cmp	r2, #0
    1830:	db0a      	blt.n	1848 <z_arm_fault+0x90>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    1832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1834:	0052      	lsls	r2, r2, #1
    1836:	d554      	bpl.n	18e2 <z_arm_fault+0x12a>
	uint16_t fault_insn = *(ret_addr - 1);
    1838:	69aa      	ldr	r2, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    183a:	f832 1c02 	ldrh.w	r1, [r2, #-2]
    183e:	f64d 7202 	movw	r2, #57090	; 0xdf02
    1842:	4291      	cmp	r1, r2
    1844:	d119      	bne.n	187a <z_arm_fault+0xc2>
			reason = esf->basic.r0;
    1846:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    1848:	f89d 3007 	ldrb.w	r3, [sp, #7]
    184c:	b99b      	cbnz	r3, 1876 <z_arm_fault+0xbe>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    184e:	2220      	movs	r2, #32
    1850:	4629      	mov	r1, r5
    1852:	a802      	add	r0, sp, #8
    1854:	f004 f91e 	bl	5a94 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    1858:	9b09      	ldr	r3, [sp, #36]	; 0x24
    185a:	2e00      	cmp	r6, #0
    185c:	d065      	beq.n	192a <z_arm_fault+0x172>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    185e:	f3c3 0208 	ubfx	r2, r3, #0, #9
    1862:	b922      	cbnz	r2, 186e <z_arm_fault+0xb6>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    1864:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    1868:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    186c:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    186e:	a902      	add	r1, sp, #8
    1870:	4620      	mov	r0, r4
    1872:	f004 f8e2 	bl	5a3a <z_arm_fatal_error>
}
    1876:	b00a      	add	sp, #40	; 0x28
    1878:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_MMFSR != 0) {
    187a:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    187e:	b13a      	cbz	r2, 1890 <z_arm_fault+0xd8>
			reason = mem_manage_fault(esf, 1, recoverable);
    1880:	f10d 0207 	add.w	r2, sp, #7
    1884:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    1886:	4628      	mov	r0, r5
    1888:	f7ff ff2a 	bl	16e0 <mem_manage_fault>
		reason = bus_fault(esf, 0, recoverable);
    188c:	4604      	mov	r4, r0
		break;
    188e:	e7db      	b.n	1848 <z_arm_fault+0x90>
		} else if (SCB_BFSR != 0) {
    1890:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
    1894:	b12a      	cbz	r2, 18a2 <z_arm_fault+0xea>
			reason = bus_fault(esf, 1, recoverable);
    1896:	f10d 0107 	add.w	r1, sp, #7
    189a:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    189c:	f7ff ff70 	bl	1780 <bus_fault.constprop.0>
    18a0:	e7f4      	b.n	188c <z_arm_fault+0xd4>
		} else if (SCB_UFSR != 0) {
    18a2:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    18a4:	b292      	uxth	r2, r2
    18a6:	b162      	cbz	r2, 18c2 <z_arm_fault+0x10a>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    18a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    18aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    18ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    18ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    18b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    18b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    18b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    18b6:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    18ba:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    18be:	629a      	str	r2, [r3, #40]	; 0x28
	return reason;
    18c0:	e7c2      	b.n	1848 <z_arm_fault+0x90>
			__ASSERT(0,
    18c2:	4921      	ldr	r1, [pc, #132]	; (1948 <z_arm_fault+0x190>)
    18c4:	4a1c      	ldr	r2, [pc, #112]	; (1938 <z_arm_fault+0x180>)
    18c6:	481e      	ldr	r0, [pc, #120]	; (1940 <z_arm_fault+0x188>)
    18c8:	f240 23c3 	movw	r3, #707	; 0x2c3
    18cc:	f003 ff80 	bl	57d0 <printk>
    18d0:	481e      	ldr	r0, [pc, #120]	; (194c <z_arm_fault+0x194>)
    18d2:	f003 ff7d 	bl	57d0 <printk>
    18d6:	f240 21c3 	movw	r1, #707	; 0x2c3
		__ASSERT(0,
    18da:	4817      	ldr	r0, [pc, #92]	; (1938 <z_arm_fault+0x180>)
    18dc:	f004 f83f 	bl	595e <assert_post_action>
    18e0:	e7b2      	b.n	1848 <z_arm_fault+0x90>
    18e2:	4919      	ldr	r1, [pc, #100]	; (1948 <z_arm_fault+0x190>)
    18e4:	4a14      	ldr	r2, [pc, #80]	; (1938 <z_arm_fault+0x180>)
    18e6:	4816      	ldr	r0, [pc, #88]	; (1940 <z_arm_fault+0x188>)
    18e8:	f240 23c7 	movw	r3, #711	; 0x2c7
    18ec:	f003 ff70 	bl	57d0 <printk>
    18f0:	4817      	ldr	r0, [pc, #92]	; (1950 <z_arm_fault+0x198>)
    18f2:	f003 ff6d 	bl	57d0 <printk>
    18f6:	f240 21c7 	movw	r1, #711	; 0x2c7
    18fa:	e7ee      	b.n	18da <z_arm_fault+0x122>
		reason = mem_manage_fault(esf, 0, recoverable);
    18fc:	f10d 0207 	add.w	r2, sp, #7
    1900:	2100      	movs	r1, #0
    1902:	e7c0      	b.n	1886 <z_arm_fault+0xce>
		reason = bus_fault(esf, 0, recoverable);
    1904:	f10d 0107 	add.w	r1, sp, #7
    1908:	2000      	movs	r0, #0
    190a:	e7c7      	b.n	189c <z_arm_fault+0xe4>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    190c:	4b09      	ldr	r3, [pc, #36]	; (1934 <z_arm_fault+0x17c>)
    190e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1910:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1912:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1914:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    1916:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1918:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    191a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    191c:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    1920:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    1924:	629a      	str	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1926:	2400      	movs	r4, #0
    1928:	e78e      	b.n	1848 <z_arm_fault+0x90>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    192a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    192e:	f023 0301 	bic.w	r3, r3, #1
    1932:	e79b      	b.n	186c <z_arm_fault+0xb4>
    1934:	e000ed00 	.word	0xe000ed00
    1938:	0000671f 	.word	0x0000671f
    193c:	000067c6 	.word	0x000067c6
    1940:	00006321 	.word	0x00006321
    1944:	000067d9 	.word	0x000067d9
    1948:	0000648f 	.word	0x0000648f
    194c:	00006817 	.word	0x00006817
    1950:	0000683b 	.word	0x0000683b

00001954 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1954:	4a02      	ldr	r2, [pc, #8]	; (1960 <z_arm_fault_init+0xc>)
    1956:	6953      	ldr	r3, [r2, #20]
    1958:	f043 0310 	orr.w	r3, r3, #16
    195c:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    195e:	4770      	bx	lr
    1960:	e000ed00 	.word	0xe000ed00

00001964 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    1964:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    1968:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    196c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    196e:	4672      	mov	r2, lr
	bl z_arm_fault
    1970:	f7ff ff22 	bl	17b8 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    1974:	bd01      	pop	{r0, pc}
    1976:	bf00      	nop

00001978 <z_arm_interrupt_init>:
    1978:	4804      	ldr	r0, [pc, #16]	; (198c <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    197a:	2300      	movs	r3, #0
    197c:	2120      	movs	r1, #32
    197e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1980:	3301      	adds	r3, #1
    1982:	2b1e      	cmp	r3, #30
    1984:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1988:	d1f9      	bne.n	197e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    198a:	4770      	bx	lr
    198c:	e000e100 	.word	0xe000e100

00001990 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    1990:	f004 fb02 	bl	5f98 <z_arm_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1994:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1996:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    199a:	4808      	ldr	r0, [pc, #32]	; (19bc <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    199c:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    19a0:	1840      	adds	r0, r0, r1
    msr PSP, r0
    19a2:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    19a6:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    19aa:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    19ac:	4308      	orrs	r0, r1
    msr CONTROL, r0
    19ae:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    19b2:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    19b6:	f7ff fdb3 	bl	1520 <z_arm_prep_c>
    19ba:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    19bc:	20000880 	.word	0x20000880

000019c0 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    19c0:	4b06      	ldr	r3, [pc, #24]	; (19dc <z_impl_k_thread_abort+0x1c>)
    19c2:	689b      	ldr	r3, [r3, #8]
    19c4:	4283      	cmp	r3, r0
    19c6:	d107      	bne.n	19d8 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    19c8:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    19cc:	b123      	cbz	r3, 19d8 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    19ce:	4a04      	ldr	r2, [pc, #16]	; (19e0 <z_impl_k_thread_abort+0x20>)
    19d0:	6853      	ldr	r3, [r2, #4]
    19d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    19d6:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    19d8:	f003 bb08 	b.w	4fec <z_thread_abort>
    19dc:	200002dc 	.word	0x200002dc
    19e0:	e000ed00 	.word	0xe000ed00

000019e4 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    19e4:	4b02      	ldr	r3, [pc, #8]	; (19f0 <z_arm_configure_static_mpu_regions+0xc>)
    19e6:	4a03      	ldr	r2, [pc, #12]	; (19f4 <z_arm_configure_static_mpu_regions+0x10>)
    19e8:	4803      	ldr	r0, [pc, #12]	; (19f8 <z_arm_configure_static_mpu_regions+0x14>)
    19ea:	2101      	movs	r1, #1
    19ec:	f000 b86e 	b.w	1acc <arm_core_mpu_configure_static_mpu_regions>
    19f0:	20006000 	.word	0x20006000
    19f4:	20000000 	.word	0x20000000
    19f8:	000061cc 	.word	0x000061cc

000019fc <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    19fc:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    19fe:	4b05      	ldr	r3, [pc, #20]	; (1a14 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    1a00:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    1a02:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    1a04:	4a04      	ldr	r2, [pc, #16]	; (1a18 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    1a06:	2120      	movs	r1, #32
    1a08:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    1a0c:	4618      	mov	r0, r3
    1a0e:	2101      	movs	r1, #1
    1a10:	f000 b884 	b.w	1b1c <arm_core_mpu_configure_dynamic_mpu_regions>
    1a14:	20000198 	.word	0x20000198
    1a18:	150b0000 	.word	0x150b0000

00001a1c <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    1a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    1a1e:	4f1f      	ldr	r7, [pc, #124]	; (1a9c <mpu_configure_regions+0x80>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    1a20:	2600      	movs	r6, #0
    1a22:	428e      	cmp	r6, r1
    1a24:	db01      	blt.n	1a2a <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    1a26:	4610      	mov	r0, r2
    1a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
    1a2a:	6844      	ldr	r4, [r0, #4]
    1a2c:	b39c      	cbz	r4, 1a96 <mpu_configure_regions+0x7a>
		if (do_sanity_check &&
    1a2e:	b153      	cbz	r3, 1a46 <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    1a30:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    1a34:	ea14 0f0c 	tst.w	r4, ip
    1a38:	d118      	bne.n	1a6c <mpu_configure_regions+0x50>
		&&
    1a3a:	2c1f      	cmp	r4, #31
    1a3c:	d916      	bls.n	1a6c <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
    1a3e:	6805      	ldr	r5, [r0, #0]
		&&
    1a40:	ea1c 0f05 	tst.w	ip, r5
    1a44:	d112      	bne.n	1a6c <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    1a46:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    1a48:	6805      	ldr	r5, [r0, #0]
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    1a4a:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    1a4e:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
    1a50:	d90f      	bls.n	1a72 <mpu_configure_regions+0x56>
	if (size > (1UL << 31)) {
    1a52:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    1a56:	d80e      	bhi.n	1a76 <mpu_configure_regions+0x5a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    1a58:	3c01      	subs	r4, #1
    1a5a:	fab4 f484 	clz	r4, r4
    1a5e:	f1c4 041f 	rsb	r4, r4, #31
    1a62:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    1a64:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    1a66:	ea4c 0404 	orr.w	r4, ip, r4
    1a6a:	d906      	bls.n	1a7a <mpu_configure_regions+0x5e>
			return -EINVAL;
    1a6c:	f06f 0215 	mvn.w	r2, #21
    1a70:	e7d9      	b.n	1a26 <mpu_configure_regions+0xa>
		return REGION_32B;
    1a72:	2408      	movs	r4, #8
    1a74:	e7f6      	b.n	1a64 <mpu_configure_regions+0x48>
		return REGION_4G;
    1a76:	243e      	movs	r4, #62	; 0x3e
    1a78:	e7f4      	b.n	1a64 <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1a7a:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    1a7e:	4315      	orrs	r5, r2
    1a80:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1a84:	f044 0401 	orr.w	r4, r4, #1
    1a88:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1a8c:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
		reg_index++;
    1a90:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1a92:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    1a96:	3601      	adds	r6, #1
    1a98:	300c      	adds	r0, #12
    1a9a:	e7c2      	b.n	1a22 <mpu_configure_regions+0x6>
    1a9c:	e000ed00 	.word	0xe000ed00

00001aa0 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    1aa0:	4b04      	ldr	r3, [pc, #16]	; (1ab4 <arm_core_mpu_enable+0x14>)
    1aa2:	2205      	movs	r2, #5
    1aa4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    1aa8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1aac:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    1ab0:	4770      	bx	lr
    1ab2:	bf00      	nop
    1ab4:	e000ed00 	.word	0xe000ed00

00001ab8 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    1ab8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    1abc:	4b02      	ldr	r3, [pc, #8]	; (1ac8 <arm_core_mpu_disable+0x10>)
    1abe:	2200      	movs	r2, #0
    1ac0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    1ac4:	4770      	bx	lr
    1ac6:	bf00      	nop
    1ac8:	e000ed00 	.word	0xe000ed00

00001acc <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    1acc:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    1ace:	4d0e      	ldr	r5, [pc, #56]	; (1b08 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    1ad0:	2301      	movs	r3, #1
    1ad2:	782a      	ldrb	r2, [r5, #0]
    1ad4:	f7ff ffa2 	bl	1a1c <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    1ad8:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    1ada:	3016      	adds	r0, #22
{
    1adc:	460c      	mov	r4, r1
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    1ade:	d111      	bne.n	1b04 <arm_core_mpu_configure_static_mpu_regions+0x38>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    1ae0:	f240 1311 	movw	r3, #273	; 0x111
    1ae4:	4a09      	ldr	r2, [pc, #36]	; (1b0c <arm_core_mpu_configure_static_mpu_regions+0x40>)
    1ae6:	490a      	ldr	r1, [pc, #40]	; (1b10 <arm_core_mpu_configure_static_mpu_regions+0x44>)
    1ae8:	480a      	ldr	r0, [pc, #40]	; (1b14 <arm_core_mpu_configure_static_mpu_regions+0x48>)
    1aea:	f003 fe71 	bl	57d0 <printk>
    1aee:	4621      	mov	r1, r4
    1af0:	4809      	ldr	r0, [pc, #36]	; (1b18 <arm_core_mpu_configure_static_mpu_regions+0x4c>)
    1af2:	f003 fe6d 	bl	57d0 <printk>
			regions_num);
	}
}
    1af6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    1afa:	4804      	ldr	r0, [pc, #16]	; (1b0c <arm_core_mpu_configure_static_mpu_regions+0x40>)
    1afc:	f240 1111 	movw	r1, #273	; 0x111
    1b00:	f003 bf2d 	b.w	595e <assert_post_action>
}
    1b04:	bd38      	pop	{r3, r4, r5, pc}
    1b06:	bf00      	nop
    1b08:	20000320 	.word	0x20000320
    1b0c:	0000686b 	.word	0x0000686b
    1b10:	0000648f 	.word	0x0000648f
    1b14:	00006321 	.word	0x00006321
    1b18:	000068a2 	.word	0x000068a2

00001b1c <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    1b1c:	b510      	push	{r4, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    1b1e:	4a12      	ldr	r2, [pc, #72]	; (1b68 <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>)
    1b20:	2300      	movs	r3, #0
    1b22:	7812      	ldrb	r2, [r2, #0]
    1b24:	f7ff ff7a 	bl	1a1c <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    1b28:	f110 0f16 	cmn.w	r0, #22
    1b2c:	460c      	mov	r4, r1
    1b2e:	d009      	beq.n	1b44 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    1b30:	4a0e      	ldr	r2, [pc, #56]	; (1b6c <arm_core_mpu_configure_dynamic_mpu_regions+0x50>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    1b32:	2807      	cmp	r0, #7
    1b34:	dd00      	ble.n	1b38 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    1b36:	bd10      	pop	{r4, pc}
    1b38:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    1b3c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
    1b40:	3001      	adds	r0, #1
    1b42:	e7f6      	b.n	1b32 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    1b44:	4a0a      	ldr	r2, [pc, #40]	; (1b70 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
    1b46:	490b      	ldr	r1, [pc, #44]	; (1b74 <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
    1b48:	480b      	ldr	r0, [pc, #44]	; (1b78 <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)
    1b4a:	f44f 7398 	mov.w	r3, #304	; 0x130
    1b4e:	f003 fe3f 	bl	57d0 <printk>
    1b52:	4621      	mov	r1, r4
    1b54:	4809      	ldr	r0, [pc, #36]	; (1b7c <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)
    1b56:	f003 fe3b 	bl	57d0 <printk>
}
    1b5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    1b5e:	4804      	ldr	r0, [pc, #16]	; (1b70 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
    1b60:	f44f 7198 	mov.w	r1, #304	; 0x130
    1b64:	f003 befb 	b.w	595e <assert_post_action>
    1b68:	20000320 	.word	0x20000320
    1b6c:	e000ed00 	.word	0xe000ed00
    1b70:	0000686b 	.word	0x0000686b
    1b74:	0000648f 	.word	0x0000648f
    1b78:	00006321 	.word	0x00006321
    1b7c:	000068ce 	.word	0x000068ce

00001b80 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    1b80:	4927      	ldr	r1, [pc, #156]	; (1c20 <z_arm_mpu_init+0xa0>)
{
    1b82:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    1b84:	680c      	ldr	r4, [r1, #0]
    1b86:	2c08      	cmp	r4, #8
    1b88:	d913      	bls.n	1bb2 <z_arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    1b8a:	f44f 73a4 	mov.w	r3, #328	; 0x148
    1b8e:	4a25      	ldr	r2, [pc, #148]	; (1c24 <z_arm_mpu_init+0xa4>)
    1b90:	4925      	ldr	r1, [pc, #148]	; (1c28 <z_arm_mpu_init+0xa8>)
    1b92:	4826      	ldr	r0, [pc, #152]	; (1c2c <z_arm_mpu_init+0xac>)
    1b94:	f003 fe1c 	bl	57d0 <printk>
    1b98:	4825      	ldr	r0, [pc, #148]	; (1c30 <z_arm_mpu_init+0xb0>)
    1b9a:	2208      	movs	r2, #8
    1b9c:	4621      	mov	r1, r4
    1b9e:	f003 fe17 	bl	57d0 <printk>
    1ba2:	4820      	ldr	r0, [pc, #128]	; (1c24 <z_arm_mpu_init+0xa4>)
    1ba4:	f44f 71a4 	mov.w	r1, #328	; 0x148
    1ba8:	f003 fed9 	bl	595e <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    1bac:	f04f 30ff 	mov.w	r0, #4294967295
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
    1bb0:	bd10      	pop	{r4, pc}
	arm_core_mpu_disable();
    1bb2:	f7ff ff81 	bl	1ab8 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1bb6:	6848      	ldr	r0, [r1, #4]
    1bb8:	491e      	ldr	r1, [pc, #120]	; (1c34 <z_arm_mpu_init+0xb4>)
    1bba:	2200      	movs	r2, #0
    1bbc:	4294      	cmp	r4, r2
    1bbe:	f100 000c 	add.w	r0, r0, #12
    1bc2:	d11a      	bne.n	1bfa <z_arm_mpu_init+0x7a>
	static_regions_num = mpu_config.num_regions;
    1bc4:	4b1c      	ldr	r3, [pc, #112]	; (1c38 <z_arm_mpu_init+0xb8>)
    1bc6:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    1bc8:	f7ff ff6a 	bl	1aa0 <arm_core_mpu_enable>
	__ASSERT(
    1bcc:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
    1bd0:	f3c3 2307 	ubfx	r3, r3, #8, #8
    1bd4:	2b08      	cmp	r3, #8
    1bd6:	d00e      	beq.n	1bf6 <z_arm_mpu_init+0x76>
    1bd8:	4918      	ldr	r1, [pc, #96]	; (1c3c <z_arm_mpu_init+0xbc>)
    1bda:	4a12      	ldr	r2, [pc, #72]	; (1c24 <z_arm_mpu_init+0xa4>)
    1bdc:	4813      	ldr	r0, [pc, #76]	; (1c2c <z_arm_mpu_init+0xac>)
    1bde:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
    1be2:	f003 fdf5 	bl	57d0 <printk>
    1be6:	4816      	ldr	r0, [pc, #88]	; (1c40 <z_arm_mpu_init+0xc0>)
    1be8:	f003 fdf2 	bl	57d0 <printk>
    1bec:	480d      	ldr	r0, [pc, #52]	; (1c24 <z_arm_mpu_init+0xa4>)
    1bee:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
    1bf2:	f003 feb4 	bl	595e <assert_post_action>
	return 0;
    1bf6:	2000      	movs	r0, #0
    1bf8:	e7da      	b.n	1bb0 <z_arm_mpu_init+0x30>
    1bfa:	f8c1 2098 	str.w	r2, [r1, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1bfe:	f850 3c0c 	ldr.w	r3, [r0, #-12]
    1c02:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    1c06:	4313      	orrs	r3, r2
    1c08:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1c0c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1c10:	f850 3c04 	ldr.w	r3, [r0, #-4]
    1c14:	f043 0301 	orr.w	r3, r3, #1
    1c18:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1c1c:	3201      	adds	r2, #1
    1c1e:	e7cd      	b.n	1bbc <z_arm_mpu_init+0x3c>
    1c20:	000061d8 	.word	0x000061d8
    1c24:	0000686b 	.word	0x0000686b
    1c28:	0000648f 	.word	0x0000648f
    1c2c:	00006321 	.word	0x00006321
    1c30:	000068fb 	.word	0x000068fb
    1c34:	e000ed00 	.word	0xe000ed00
    1c38:	20000320 	.word	0x20000320
    1c3c:	0000692f 	.word	0x0000692f
    1c40:	0000697f 	.word	0x0000697f

00001c44 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    1c44:	4b01      	ldr	r3, [pc, #4]	; (1c4c <__stdout_hook_install+0x8>)
    1c46:	6018      	str	r0, [r3, #0]
}
    1c48:	4770      	bx	lr
    1c4a:	bf00      	nop
    1c4c:	20000008 	.word	0x20000008

00001c50 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    1c50:	b120      	cbz	r0, 1c5c <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    1c52:	4b03      	ldr	r3, [pc, #12]	; (1c60 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    1c54:	0180      	lsls	r0, r0, #6
    1c56:	f043 0301 	orr.w	r3, r3, #1
    1c5a:	4718      	bx	r3
}

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    1c5c:	4770      	bx	lr
    1c5e:	bf00      	nop
    1c60:	000061b0 	.word	0x000061b0

00001c64 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1c64:	b537      	push	{r0, r1, r2, r4, r5, lr}
    1c66:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
    1c68:	490a      	ldr	r1, [pc, #40]	; (1c94 <onoff_start+0x30>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1c6a:	4a0b      	ldr	r2, [pc, #44]	; (1c98 <onoff_start+0x34>)
	size_t offset = (size_t)(mgr - data->mgr);
    1c6c:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1c6e:	2340      	movs	r3, #64	; 0x40
    1c70:	9300      	str	r3, [sp, #0]
    1c72:	1149      	asrs	r1, r1, #5
{
    1c74:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1c76:	4623      	mov	r3, r4
    1c78:	4808      	ldr	r0, [pc, #32]	; (1c9c <onoff_start+0x38>)
    1c7a:	f003 ff66 	bl	5b4a <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    1c7e:	1e01      	subs	r1, r0, #0
    1c80:	da05      	bge.n	1c8e <onoff_start+0x2a>
		notify(mgr, err);
    1c82:	4628      	mov	r0, r5
    1c84:	4623      	mov	r3, r4
	}
}
    1c86:	b003      	add	sp, #12
    1c88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
    1c8c:	4718      	bx	r3
}
    1c8e:	b003      	add	sp, #12
    1c90:	bd30      	pop	{r4, r5, pc}
    1c92:	bf00      	nop
    1c94:	200001b4 	.word	0x200001b4
    1c98:	00005bbb 	.word	0x00005bbb
    1c9c:	00005fe4 	.word	0x00005fe4

00001ca0 <get_status>:
{
    1ca0:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    1ca2:	b2cc      	uxtb	r4, r1
    1ca4:	2c01      	cmp	r4, #1
{
    1ca6:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    1ca8:	d909      	bls.n	1cbe <get_status+0x1e>
    1caa:	4909      	ldr	r1, [pc, #36]	; (1cd0 <get_status+0x30>)
    1cac:	4809      	ldr	r0, [pc, #36]	; (1cd4 <get_status+0x34>)
    1cae:	4a0a      	ldr	r2, [pc, #40]	; (1cd8 <get_status+0x38>)
    1cb0:	237e      	movs	r3, #126	; 0x7e
    1cb2:	f003 fd8d 	bl	57d0 <printk>
    1cb6:	4808      	ldr	r0, [pc, #32]	; (1cd8 <get_status+0x38>)
    1cb8:	217e      	movs	r1, #126	; 0x7e
    1cba:	f003 fe50 	bl	595e <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    1cbe:	6929      	ldr	r1, [r5, #16]
    1cc0:	230c      	movs	r3, #12
    1cc2:	fb04 1403 	mla	r4, r4, r3, r1
    1cc6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
    1cc8:	f000 0007 	and.w	r0, r0, #7
    1ccc:	bd38      	pop	{r3, r4, r5, pc}
    1cce:	bf00      	nop
    1cd0:	000069ec 	.word	0x000069ec
    1cd4:	00006321 	.word	0x00006321
    1cd8:	000069af 	.word	0x000069af

00001cdc <stop>:
{
    1cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1cde:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    1ce0:	2c01      	cmp	r4, #1
	struct nrf_clock_control_data *data = dev->data;
    1ce2:	6906      	ldr	r6, [r0, #16]
{
    1ce4:	4605      	mov	r5, r0
    1ce6:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    1ce8:	d90b      	bls.n	1d02 <stop+0x26>
    1cea:	4918      	ldr	r1, [pc, #96]	; (1d4c <stop+0x70>)
    1cec:	4818      	ldr	r0, [pc, #96]	; (1d50 <stop+0x74>)
    1cee:	4a19      	ldr	r2, [pc, #100]	; (1d54 <stop+0x78>)
    1cf0:	f240 1353 	movw	r3, #339	; 0x153
    1cf4:	f003 fd6c 	bl	57d0 <printk>
    1cf8:	4816      	ldr	r0, [pc, #88]	; (1d54 <stop+0x78>)
    1cfa:	f240 1153 	movw	r1, #339	; 0x153
    1cfe:	f003 fe2e 	bl	595e <assert_post_action>
	__asm__ volatile(
    1d02:	f04f 0320 	mov.w	r3, #32
    1d06:	f3ef 8111 	mrs	r1, BASEPRI
    1d0a:	f383 8812 	msr	BASEPRI_MAX, r3
    1d0e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    1d12:	220c      	movs	r2, #12
    1d14:	fb02 6304 	mla	r3, r2, r4, r6
    1d18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    1d1a:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    1d1e:	d001      	beq.n	1d24 <stop+0x48>
    1d20:	429f      	cmp	r7, r3
    1d22:	d110      	bne.n	1d46 <stop+0x6a>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    1d24:	fb02 6604 	mla	r6, r2, r4, r6
    1d28:	2301      	movs	r3, #1
    1d2a:	64b3      	str	r3, [r6, #72]	; 0x48
	int err = 0;
    1d2c:	2000      	movs	r0, #0
	__asm__ volatile(
    1d2e:	f381 8811 	msr	BASEPRI, r1
    1d32:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    1d36:	b928      	cbnz	r0, 1d44 <stop+0x68>
	get_sub_config(dev, type)->stop();
    1d38:	6869      	ldr	r1, [r5, #4]
    1d3a:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
    1d3e:	6863      	ldr	r3, [r4, #4]
    1d40:	4798      	blx	r3
	return 0;
    1d42:	2000      	movs	r0, #0
}
    1d44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
    1d46:	f04f 30ff 	mov.w	r0, #4294967295
    1d4a:	e7f0      	b.n	1d2e <stop+0x52>
    1d4c:	000069ec 	.word	0x000069ec
    1d50:	00006321 	.word	0x00006321
    1d54:	000069af 	.word	0x000069af

00001d58 <onoff_stop>:
{
    1d58:	b570      	push	{r4, r5, r6, lr}
    1d5a:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    1d5c:	4906      	ldr	r1, [pc, #24]	; (1d78 <onoff_stop+0x20>)
    1d5e:	1a41      	subs	r1, r0, r1
{
    1d60:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1d62:	1149      	asrs	r1, r1, #5
    1d64:	4805      	ldr	r0, [pc, #20]	; (1d7c <onoff_stop+0x24>)
    1d66:	2240      	movs	r2, #64	; 0x40
    1d68:	f7ff ffb8 	bl	1cdc <stop>
	notify(mgr, res);
    1d6c:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1d6e:	4601      	mov	r1, r0
	notify(mgr, res);
    1d70:	4620      	mov	r0, r4
}
    1d72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    1d76:	4718      	bx	r3
    1d78:	200001b4 	.word	0x200001b4
    1d7c:	00005fe4 	.word	0x00005fe4

00001d80 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1d80:	2200      	movs	r2, #0
{
    1d82:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1d84:	2101      	movs	r1, #1
{
    1d86:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1d88:	4610      	mov	r0, r2
    1d8a:	f7ff fb91 	bl	14b0 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    1d8e:	2000      	movs	r0, #0
    1d90:	f7ff fb70 	bl	1474 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    1d94:	480f      	ldr	r0, [pc, #60]	; (1dd4 <clk_init+0x54>)
    1d96:	f001 f923 	bl	2fe0 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    1d9a:	4b0f      	ldr	r3, [pc, #60]	; (1dd8 <clk_init+0x58>)
    1d9c:	4298      	cmp	r0, r3
    1d9e:	d115      	bne.n	1dcc <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    1da0:	f001 f942 	bl	3028 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    1da4:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    1da6:	490d      	ldr	r1, [pc, #52]	; (1ddc <clk_init+0x5c>)
    1da8:	4630      	mov	r0, r6
    1daa:	f003 fd5f 	bl	586c <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    1dae:	2800      	cmp	r0, #0
    1db0:	db0b      	blt.n	1dca <clk_init+0x4a>
	struct nrf_clock_control_data *data = dev->data;
    1db2:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    1db4:	4909      	ldr	r1, [pc, #36]	; (1ddc <clk_init+0x5c>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1db6:	2501      	movs	r5, #1
    1db8:	64b5      	str	r5, [r6, #72]	; 0x48
		err = onoff_manager_init(get_onoff_manager(dev, i),
    1dba:	f104 0020 	add.w	r0, r4, #32
    1dbe:	f003 fd55 	bl	586c <onoff_manager_init>
		if (err < 0) {
    1dc2:	2800      	cmp	r0, #0
    1dc4:	db01      	blt.n	1dca <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1dc6:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
    1dc8:	2000      	movs	r0, #0
}
    1dca:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    1dcc:	f06f 0004 	mvn.w	r0, #4
    1dd0:	e7fb      	b.n	1dca <clk_init+0x4a>
    1dd2:	bf00      	nop
    1dd4:	00001e15 	.word	0x00001e15
    1dd8:	0bad0000 	.word	0x0bad0000
    1ddc:	0000621c 	.word	0x0000621c

00001de0 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    1de0:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    1de2:	230c      	movs	r3, #12
    1de4:	4809      	ldr	r0, [pc, #36]	; (1e0c <clkstarted_handle.constprop.0+0x2c>)
    1de6:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    1de8:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    1dea:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    1dec:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
    1df0:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    1df2:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
    1df4:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
    1df6:	4418      	add	r0, r3
    1df8:	f003 fe94 	bl	5b24 <set_on_state>
	if (callback) {
    1dfc:	b12d      	cbz	r5, 1e0a <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    1dfe:	4632      	mov	r2, r6
    1e00:	462b      	mov	r3, r5
    1e02:	4803      	ldr	r0, [pc, #12]	; (1e10 <clkstarted_handle.constprop.0+0x30>)
}
    1e04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    1e08:	4718      	bx	r3
}
    1e0a:	bd70      	pop	{r4, r5, r6, pc}
    1e0c:	200001b4 	.word	0x200001b4
    1e10:	00005fe4 	.word	0x00005fe4

00001e14 <clock_event_handler>:
	switch (event) {
    1e14:	2801      	cmp	r0, #1
{
    1e16:	b508      	push	{r3, lr}
	switch (event) {
    1e18:	d006      	beq.n	1e28 <clock_event_handler+0x14>
    1e1a:	2803      	cmp	r0, #3
    1e1c:	d008      	beq.n	1e30 <clock_event_handler+0x1c>
    1e1e:	b9a8      	cbnz	r0, 1e4c <clock_event_handler+0x38>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    1e20:	4b10      	ldr	r3, [pc, #64]	; (1e64 <clock_event_handler+0x50>)
    1e22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    1e24:	075b      	lsls	r3, r3, #29
    1e26:	d11b      	bne.n	1e60 <clock_event_handler+0x4c>
}
    1e28:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    1e2c:	f7ff bfd8 	b.w	1de0 <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
    1e30:	490d      	ldr	r1, [pc, #52]	; (1e68 <clock_event_handler+0x54>)
    1e32:	4a0e      	ldr	r2, [pc, #56]	; (1e6c <clock_event_handler+0x58>)
    1e34:	480e      	ldr	r0, [pc, #56]	; (1e70 <clock_event_handler+0x5c>)
    1e36:	f240 2366 	movw	r3, #614	; 0x266
    1e3a:	f003 fcc9 	bl	57d0 <printk>
    1e3e:	f240 2166 	movw	r1, #614	; 0x266
}
    1e42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
    1e46:	4809      	ldr	r0, [pc, #36]	; (1e6c <clock_event_handler+0x58>)
    1e48:	f003 bd89 	b.w	595e <assert_post_action>
    1e4c:	4906      	ldr	r1, [pc, #24]	; (1e68 <clock_event_handler+0x54>)
    1e4e:	4a07      	ldr	r2, [pc, #28]	; (1e6c <clock_event_handler+0x58>)
    1e50:	4807      	ldr	r0, [pc, #28]	; (1e70 <clock_event_handler+0x5c>)
    1e52:	f240 236a 	movw	r3, #618	; 0x26a
    1e56:	f003 fcbb 	bl	57d0 <printk>
    1e5a:	f240 216a 	movw	r1, #618	; 0x26a
    1e5e:	e7f0      	b.n	1e42 <clock_event_handler+0x2e>
}
    1e60:	bd08      	pop	{r3, pc}
    1e62:	bf00      	nop
    1e64:	200001b4 	.word	0x200001b4
    1e68:	0000648f 	.word	0x0000648f
    1e6c:	000069af 	.word	0x000069af
    1e70:	00006321 	.word	0x00006321

00001e74 <generic_hfclk_start>:
{
    1e74:	b508      	push	{r3, lr}
	__asm__ volatile(
    1e76:	f04f 0320 	mov.w	r3, #32
    1e7a:	f3ef 8111 	mrs	r1, BASEPRI
    1e7e:	f383 8812 	msr	BASEPRI_MAX, r3
    1e82:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    1e86:	4a12      	ldr	r2, [pc, #72]	; (1ed0 <generic_hfclk_start+0x5c>)
    1e88:	6813      	ldr	r3, [r2, #0]
    1e8a:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    1e8e:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    1e92:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    1e94:	d00c      	beq.n	1eb0 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    1e96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1e9a:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    1e9e:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    1ea2:	f013 0301 	ands.w	r3, r3, #1
    1ea6:	d003      	beq.n	1eb0 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    1ea8:	480a      	ldr	r0, [pc, #40]	; (1ed4 <generic_hfclk_start+0x60>)
    1eaa:	f003 fe3b 	bl	5b24 <set_on_state>
			already_started = true;
    1eae:	2301      	movs	r3, #1
	__asm__ volatile(
    1eb0:	f381 8811 	msr	BASEPRI, r1
    1eb4:	f3bf 8f6f 	isb	sy
	if (already_started) {
    1eb8:	b123      	cbz	r3, 1ec4 <generic_hfclk_start+0x50>
}
    1eba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    1ebe:	2000      	movs	r0, #0
    1ec0:	f7ff bf8e 	b.w	1de0 <clkstarted_handle.constprop.0>
}
    1ec4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    1ec8:	2001      	movs	r0, #1
    1eca:	f001 b8cd 	b.w	3068 <nrfx_clock_start>
    1ece:	bf00      	nop
    1ed0:	2000020c 	.word	0x2000020c
    1ed4:	200001fc 	.word	0x200001fc

00001ed8 <api_blocking_start>:
{
    1ed8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1eda:	2200      	movs	r2, #0
    1edc:	2301      	movs	r3, #1
    1ede:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1ee2:	4a09      	ldr	r2, [pc, #36]	; (1f08 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1ee4:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1ee8:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1eea:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1eee:	f003 fe5d 	bl	5bac <api_start>
	if (err < 0) {
    1ef2:	2800      	cmp	r0, #0
    1ef4:	db05      	blt.n	1f02 <api_blocking_start+0x2a>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    1ef6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    1efa:	2300      	movs	r3, #0
    1efc:	4668      	mov	r0, sp
    1efe:	f002 f87b 	bl	3ff8 <z_impl_k_sem_take>
}
    1f02:	b005      	add	sp, #20
    1f04:	f85d fb04 	ldr.w	pc, [sp], #4
    1f08:	00005bd9 	.word	0x00005bd9

00001f0c <generic_hfclk_stop>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1f0c:	4b09      	ldr	r3, [pc, #36]	; (1f34 <generic_hfclk_stop+0x28>)
    1f0e:	f3bf 8f5b 	dmb	ish
    1f12:	e853 2f00 	ldrex	r2, [r3]
    1f16:	f022 0102 	bic.w	r1, r2, #2
    1f1a:	e843 1000 	strex	r0, r1, [r3]
    1f1e:	2800      	cmp	r0, #0
    1f20:	d1f7      	bne.n	1f12 <generic_hfclk_stop+0x6>
    1f22:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    1f26:	07d3      	lsls	r3, r2, #31
    1f28:	d402      	bmi.n	1f30 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    1f2a:	2001      	movs	r0, #1
    1f2c:	f001 b8f0 	b.w	3110 <nrfx_clock_stop>
}
    1f30:	4770      	bx	lr
    1f32:	bf00      	nop
    1f34:	2000020c 	.word	0x2000020c

00001f38 <z_nrf_clock_control_lf_on>:
{
    1f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1f3c:	4947      	ldr	r1, [pc, #284]	; (205c <z_nrf_clock_control_lf_on+0x124>)
    1f3e:	f3bf 8f5b 	dmb	ish
    1f42:	4606      	mov	r6, r0
    1f44:	2201      	movs	r2, #1
    1f46:	e851 3f00 	ldrex	r3, [r1]
    1f4a:	e841 2000 	strex	r0, r2, [r1]
    1f4e:	2800      	cmp	r0, #0
    1f50:	d1f9      	bne.n	1f46 <z_nrf_clock_control_lf_on+0xe>
    1f52:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    1f56:	b9a3      	cbnz	r3, 1f82 <z_nrf_clock_control_lf_on+0x4a>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    1f58:	4941      	ldr	r1, [pc, #260]	; (2060 <z_nrf_clock_control_lf_on+0x128>)
		err = onoff_request(mgr, &cli);
    1f5a:	4842      	ldr	r0, [pc, #264]	; (2064 <z_nrf_clock_control_lf_on+0x12c>)
    1f5c:	604b      	str	r3, [r1, #4]
    1f5e:	60cb      	str	r3, [r1, #12]
    1f60:	608a      	str	r2, [r1, #8]
    1f62:	f7fe fce7 	bl	934 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    1f66:	2800      	cmp	r0, #0
    1f68:	da0b      	bge.n	1f82 <z_nrf_clock_control_lf_on+0x4a>
    1f6a:	493f      	ldr	r1, [pc, #252]	; (2068 <z_nrf_clock_control_lf_on+0x130>)
    1f6c:	483f      	ldr	r0, [pc, #252]	; (206c <z_nrf_clock_control_lf_on+0x134>)
    1f6e:	4a40      	ldr	r2, [pc, #256]	; (2070 <z_nrf_clock_control_lf_on+0x138>)
    1f70:	f240 2326 	movw	r3, #550	; 0x226
    1f74:	f003 fc2c 	bl	57d0 <printk>
    1f78:	483d      	ldr	r0, [pc, #244]	; (2070 <z_nrf_clock_control_lf_on+0x138>)
    1f7a:	f240 2126 	movw	r1, #550	; 0x226
    1f7e:	f003 fcee 	bl	595e <assert_post_action>
	switch (start_mode) {
    1f82:	b396      	cbz	r6, 1fea <z_nrf_clock_control_lf_on+0xb2>
    1f84:	1e73      	subs	r3, r6, #1
    1f86:	2b01      	cmp	r3, #1
    1f88:	d853      	bhi.n	2032 <z_nrf_clock_control_lf_on+0xfa>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    1f8a:	2e01      	cmp	r6, #1
    1f8c:	d107      	bne.n	1f9e <z_nrf_clock_control_lf_on+0x66>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    1f8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1f92:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    1f96:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    1f9a:	2b01      	cmp	r3, #1
    1f9c:	d025      	beq.n	1fea <z_nrf_clock_control_lf_on+0xb2>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    1f9e:	f003 ffc9 	bl	5f34 <k_is_in_isr>
    1fa2:	4604      	mov	r4, r0
    1fa4:	b918      	cbnz	r0, 1fae <z_nrf_clock_control_lf_on+0x76>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    1fa6:	4b33      	ldr	r3, [pc, #204]	; (2074 <z_nrf_clock_control_lf_on+0x13c>)
	int key = isr_mode ? irq_lock() : 0;
    1fa8:	781b      	ldrb	r3, [r3, #0]
    1faa:	2b00      	cmp	r3, #0
    1fac:	d14f      	bne.n	204e <z_nrf_clock_control_lf_on+0x116>
	__asm__ volatile(
    1fae:	f04f 0320 	mov.w	r3, #32
    1fb2:	f3ef 8711 	mrs	r7, BASEPRI
    1fb6:	f383 8812 	msr	BASEPRI_MAX, r3
    1fba:	f3bf 8f6f 	isb	sy
    1fbe:	2401      	movs	r4, #1
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1fc0:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 2078 <z_nrf_clock_control_lf_on+0x140>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    1fc4:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    1fc8:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    1fcc:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    1fd0:	03d2      	lsls	r2, r2, #15
    1fd2:	d50c      	bpl.n	1fee <z_nrf_clock_control_lf_on+0xb6>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    1fd4:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    1fd8:	2b01      	cmp	r3, #1
    1fda:	d001      	beq.n	1fe0 <z_nrf_clock_control_lf_on+0xa8>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    1fdc:	2e01      	cmp	r6, #1
    1fde:	d106      	bne.n	1fee <z_nrf_clock_control_lf_on+0xb6>
	if (isr_mode) {
    1fe0:	b30c      	cbz	r4, 2026 <z_nrf_clock_control_lf_on+0xee>
	__asm__ volatile(
    1fe2:	f387 8811 	msr	BASEPRI, r7
    1fe6:	f3bf 8f6f 	isb	sy
}
    1fea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    1fee:	b1ac      	cbz	r4, 201c <z_nrf_clock_control_lf_on+0xe4>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    1ff0:	4638      	mov	r0, r7
    1ff2:	f7ff fa35 	bl	1460 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    1ff6:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    1ffa:	2b00      	cmp	r3, #0
    1ffc:	d1e4      	bne.n	1fc8 <z_nrf_clock_control_lf_on+0x90>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    1ffe:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    2002:	2a00      	cmp	r2, #0
    2004:	d0e0      	beq.n	1fc8 <z_nrf_clock_control_lf_on+0x90>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2006:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    200a:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    200e:	2301      	movs	r3, #1
    2010:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
    2014:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2018:	60ab      	str	r3, [r5, #8]
}
    201a:	e7d5      	b.n	1fc8 <z_nrf_clock_control_lf_on+0x90>
	return z_impl_k_sleep(timeout);
    201c:	2100      	movs	r1, #0
    201e:	2021      	movs	r0, #33	; 0x21
    2020:	f002 ffa6 	bl	4f70 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    2024:	e7e7      	b.n	1ff6 <z_nrf_clock_control_lf_on+0xbe>
    p_reg->INTENSET = mask;
    2026:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    202a:	2202      	movs	r2, #2
    202c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    2030:	e7db      	b.n	1fea <z_nrf_clock_control_lf_on+0xb2>
		__ASSERT_NO_MSG(false);
    2032:	4912      	ldr	r1, [pc, #72]	; (207c <z_nrf_clock_control_lf_on+0x144>)
    2034:	480d      	ldr	r0, [pc, #52]	; (206c <z_nrf_clock_control_lf_on+0x134>)
    2036:	4a0e      	ldr	r2, [pc, #56]	; (2070 <z_nrf_clock_control_lf_on+0x138>)
    2038:	f44f 730e 	mov.w	r3, #568	; 0x238
    203c:	f003 fbc8 	bl	57d0 <printk>
}
    2040:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		__ASSERT_NO_MSG(false);
    2044:	480a      	ldr	r0, [pc, #40]	; (2070 <z_nrf_clock_control_lf_on+0x138>)
    2046:	f44f 710e 	mov.w	r1, #568	; 0x238
    204a:	f003 bc88 	b.w	595e <assert_post_action>
    p_reg->INTENCLR = mask;
    204e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2052:	2202      	movs	r2, #2
    2054:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    2058:	4607      	mov	r7, r0
}
    205a:	e7b1      	b.n	1fc0 <z_nrf_clock_control_lf_on+0x88>
    205c:	20000210 	.word	0x20000210
    2060:	200001a4 	.word	0x200001a4
    2064:	200001d4 	.word	0x200001d4
    2068:	00006a10 	.word	0x00006a10
    206c:	00006321 	.word	0x00006321
    2070:	000069af 	.word	0x000069af
    2074:	20000322 	.word	0x20000322
    2078:	e000e100 	.word	0xe000e100
    207c:	0000648f 	.word	0x0000648f

00002080 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    2080:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    2082:	4b08      	ldr	r3, [pc, #32]	; (20a4 <uart_console_init+0x24>)
    2084:	4808      	ldr	r0, [pc, #32]	; (20a8 <uart_console_init+0x28>)
    2086:	6018      	str	r0, [r3, #0]
    2088:	f003 ff3e 	bl	5f08 <z_device_ready>
    208c:	b138      	cbz	r0, 209e <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    208e:	4807      	ldr	r0, [pc, #28]	; (20ac <uart_console_init+0x2c>)
    2090:	f7ff fdd8 	bl	1c44 <__stdout_hook_install>
	__printk_hook_install(console_out);
    2094:	4805      	ldr	r0, [pc, #20]	; (20ac <uart_console_init+0x2c>)
    2096:	f7fe fa19 	bl	4cc <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    209a:	2000      	movs	r0, #0
}
    209c:	bd08      	pop	{r3, pc}
		return -ENODEV;
    209e:	f06f 0012 	mvn.w	r0, #18
    20a2:	e7fb      	b.n	209c <uart_console_init+0x1c>
    20a4:	20000214 	.word	0x20000214
    20a8:	00005ffc 	.word	0x00005ffc
    20ac:	000020b1 	.word	0x000020b1

000020b0 <console_out>:
	if ('\n' == c) {
    20b0:	280a      	cmp	r0, #10
{
    20b2:	b538      	push	{r3, r4, r5, lr}
    20b4:	4d07      	ldr	r5, [pc, #28]	; (20d4 <console_out+0x24>)
    20b6:	4604      	mov	r4, r0
	if ('\n' == c) {
    20b8:	d104      	bne.n	20c4 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    20ba:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    20bc:	6883      	ldr	r3, [r0, #8]
    20be:	210d      	movs	r1, #13
    20c0:	685b      	ldr	r3, [r3, #4]
    20c2:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    20c4:	6828      	ldr	r0, [r5, #0]
    20c6:	6883      	ldr	r3, [r0, #8]
    20c8:	b2e1      	uxtb	r1, r4
    20ca:	685b      	ldr	r3, [r3, #4]
    20cc:	4798      	blx	r3
}
    20ce:	4620      	mov	r0, r4
    20d0:	bd38      	pop	{r3, r4, r5, pc}
    20d2:	bf00      	nop
    20d4:	20000214 	.word	0x20000214

000020d8 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
    20d8:	b570      	push	{r4, r5, r6, lr}
	return port->data;
    20da:	6905      	ldr	r5, [r0, #16]
{
    20dc:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    20de:	460c      	mov	r4, r1
    20e0:	b961      	cbnz	r1, 20fc <gpio_nrfx_manage_callback+0x24>
    20e2:	4922      	ldr	r1, [pc, #136]	; (216c <gpio_nrfx_manage_callback+0x94>)
    20e4:	4a22      	ldr	r2, [pc, #136]	; (2170 <gpio_nrfx_manage_callback+0x98>)
    20e6:	4823      	ldr	r0, [pc, #140]	; (2174 <gpio_nrfx_manage_callback+0x9c>)
    20e8:	2324      	movs	r3, #36	; 0x24
    20ea:	f003 fb71 	bl	57d0 <printk>
    20ee:	4822      	ldr	r0, [pc, #136]	; (2178 <gpio_nrfx_manage_callback+0xa0>)
    20f0:	f003 fb6e 	bl	57d0 <printk>
    20f4:	481e      	ldr	r0, [pc, #120]	; (2170 <gpio_nrfx_manage_callback+0x98>)
    20f6:	2124      	movs	r1, #36	; 0x24
    20f8:	f003 fc31 	bl	595e <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
    20fc:	6863      	ldr	r3, [r4, #4]
    20fe:	b963      	cbnz	r3, 211a <gpio_nrfx_manage_callback+0x42>
    2100:	491e      	ldr	r1, [pc, #120]	; (217c <gpio_nrfx_manage_callback+0xa4>)
    2102:	4a1b      	ldr	r2, [pc, #108]	; (2170 <gpio_nrfx_manage_callback+0x98>)
    2104:	481b      	ldr	r0, [pc, #108]	; (2174 <gpio_nrfx_manage_callback+0x9c>)
    2106:	2325      	movs	r3, #37	; 0x25
    2108:	f003 fb62 	bl	57d0 <printk>
    210c:	481c      	ldr	r0, [pc, #112]	; (2180 <gpio_nrfx_manage_callback+0xa8>)
    210e:	f003 fb5f 	bl	57d0 <printk>
    2112:	4817      	ldr	r0, [pc, #92]	; (2170 <gpio_nrfx_manage_callback+0x98>)
    2114:	2125      	movs	r1, #37	; 0x25
    2116:	f003 fc22 	bl	595e <assert_post_action>
	return list->head;
    211a:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
    211c:	b15b      	cbz	r3, 2136 <gpio_nrfx_manage_callback+0x5e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    211e:	2200      	movs	r2, #0
    2120:	429c      	cmp	r4, r3
    2122:	d112      	bne.n	214a <gpio_nrfx_manage_callback+0x72>
	return node->next;
    2124:	6823      	ldr	r3, [r4, #0]
	return list->tail;
    2126:	68a9      	ldr	r1, [r5, #8]
Z_GENLIST_REMOVE(slist, snode)
    2128:	b952      	cbnz	r2, 2140 <gpio_nrfx_manage_callback+0x68>
    212a:	42a1      	cmp	r1, r4
	list->head = node;
    212c:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    212e:	d100      	bne.n	2132 <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
    2130:	60ab      	str	r3, [r5, #8]
	parent->next = child;
    2132:	2300      	movs	r3, #0
    2134:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
    2136:	b96e      	cbnz	r6, 2154 <gpio_nrfx_manage_callback+0x7c>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    2138:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
				     callback, set);
}
    213a:	bd70      	pop	{r4, r5, r6, pc}
    213c:	460b      	mov	r3, r1
    213e:	e7ef      	b.n	2120 <gpio_nrfx_manage_callback+0x48>
Z_GENLIST_REMOVE(slist, snode)
    2140:	42a1      	cmp	r1, r4
	parent->next = child;
    2142:	6013      	str	r3, [r2, #0]
	list->tail = node;
    2144:	bf08      	it	eq
    2146:	60aa      	streq	r2, [r5, #8]
}
    2148:	e7f3      	b.n	2132 <gpio_nrfx_manage_callback+0x5a>
	return node->next;
    214a:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    214c:	461a      	mov	r2, r3
    214e:	2900      	cmp	r1, #0
    2150:	d1f4      	bne.n	213c <gpio_nrfx_manage_callback+0x64>
			if (!set) {
    2152:	b13e      	cbz	r6, 2164 <gpio_nrfx_manage_callback+0x8c>
Z_GENLIST_PREPEND(slist, snode)
    2154:	68a8      	ldr	r0, [r5, #8]
	parent->next = child;
    2156:	686b      	ldr	r3, [r5, #4]
    2158:	6023      	str	r3, [r4, #0]
	list->head = node;
    215a:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
    215c:	2800      	cmp	r0, #0
    215e:	d1eb      	bne.n	2138 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
    2160:	60ac      	str	r4, [r5, #8]
}
    2162:	e7ea      	b.n	213a <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
    2164:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    2168:	e7e7      	b.n	213a <gpio_nrfx_manage_callback+0x62>
    216a:	bf00      	nop
    216c:	00006a4c 	.word	0x00006a4c
    2170:	00006a1f 	.word	0x00006a1f
    2174:	00006321 	.word	0x00006321
    2178:	00006a55 	.word	0x00006a55
    217c:	00006a64 	.word	0x00006a64
    2180:	00006a76 	.word	0x00006a76

00002184 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    2184:	6803      	ldr	r3, [r0, #0]
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
    2186:	095a      	lsrs	r2, r3, #5
    2188:	bf0c      	ite	eq
    218a:	f04f 32ff 	moveq.w	r2, #4294967295
    218e:	2200      	movne	r2, #0
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
    2190:	f003 031f 	and.w	r3, r3, #31

    return (mask & (1UL << pin_number)) ? true : false;
    2194:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    2198:	07db      	lsls	r3, r3, #31
{
    219a:	b510      	push	{r4, lr}
    219c:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    219e:	d40b      	bmi.n	21b8 <nrf_gpio_pin_port_decode+0x34>
    21a0:	4910      	ldr	r1, [pc, #64]	; (21e4 <nrf_gpio_pin_port_decode+0x60>)
    21a2:	4811      	ldr	r0, [pc, #68]	; (21e8 <nrf_gpio_pin_port_decode+0x64>)
    21a4:	4a11      	ldr	r2, [pc, #68]	; (21ec <nrf_gpio_pin_port_decode+0x68>)
    21a6:	f44f 7305 	mov.w	r3, #532	; 0x214
    21aa:	f003 fb11 	bl	57d0 <printk>
    21ae:	480f      	ldr	r0, [pc, #60]	; (21ec <nrf_gpio_pin_port_decode+0x68>)
    21b0:	f44f 7105 	mov.w	r1, #532	; 0x214
    21b4:	f003 fbd3 	bl	595e <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    21b8:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    21ba:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    21be:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    21c0:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    21c2:	d00b      	beq.n	21dc <nrf_gpio_pin_port_decode+0x58>
            NRFX_ASSERT(0);
    21c4:	490a      	ldr	r1, [pc, #40]	; (21f0 <nrf_gpio_pin_port_decode+0x6c>)
    21c6:	4808      	ldr	r0, [pc, #32]	; (21e8 <nrf_gpio_pin_port_decode+0x64>)
    21c8:	4a08      	ldr	r2, [pc, #32]	; (21ec <nrf_gpio_pin_port_decode+0x68>)
    21ca:	f240 2319 	movw	r3, #537	; 0x219
    21ce:	f003 faff 	bl	57d0 <printk>
    21d2:	4806      	ldr	r0, [pc, #24]	; (21ec <nrf_gpio_pin_port_decode+0x68>)
    21d4:	f240 2119 	movw	r1, #537	; 0x219
    21d8:	f003 fbc1 	bl	595e <assert_post_action>
}
    21dc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    21e0:	bd10      	pop	{r4, pc}
    21e2:	bf00      	nop
    21e4:	00006ac0 	.word	0x00006ac0
    21e8:	00006321 	.word	0x00006321
    21ec:	00006a8d 	.word	0x00006a8d
    21f0:	0000648f 	.word	0x0000648f

000021f4 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    21f4:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    21f6:	4b09      	ldr	r3, [pc, #36]	; (221c <gpio_nrfx_init+0x28>)
    21f8:	781a      	ldrb	r2, [r3, #0]
    21fa:	b96a      	cbnz	r2, 2218 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    21fc:	2101      	movs	r1, #1
    21fe:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    2200:	2006      	movs	r0, #6
    2202:	2105      	movs	r1, #5
    2204:	f7ff f954 	bl	14b0 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
    2208:	2006      	movs	r0, #6
    220a:	f7ff f933 	bl	1474 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    220e:	4b04      	ldr	r3, [pc, #16]	; (2220 <gpio_nrfx_init+0x2c>)
    2210:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    2214:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    2218:	2000      	movs	r0, #0
    221a:	bd08      	pop	{r3, pc}
    221c:	20000321 	.word	0x20000321
    2220:	40006000 	.word	0x40006000

00002224 <gpio_nrfx_pin_interrupt_configure>:
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
    2224:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
{
    2228:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	return port->data;
    222c:	6904      	ldr	r4, [r0, #16]
{
    222e:	4680      	mov	r8, r0
    2230:	460e      	mov	r6, r1
    2232:	4617      	mov	r7, r2
    2234:	4699      	mov	r9, r3
    2236:	f001 051f 	and.w	r5, r1, #31
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
    223a:	f040 80af 	bne.w	239c <gpio_nrfx_pin_interrupt_configure+0x178>
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    223e:	6843      	ldr	r3, [r0, #4]
    2240:	7a1b      	ldrb	r3, [r3, #8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2242:	a801      	add	r0, sp, #4
    2244:	ea45 1343 	orr.w	r3, r5, r3, lsl #5
    2248:	9301      	str	r3, [sp, #4]
    224a:	f7ff ff9b 	bl	2184 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    224e:	9b01      	ldr	r3, [sp, #4]
    2250:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    2254:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    2258:	07d8      	lsls	r0, r3, #31
    225a:	f100 80be 	bmi.w	23da <gpio_nrfx_pin_interrupt_configure+0x1b6>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    225e:	68e3      	ldr	r3, [r4, #12]
    2260:	2101      	movs	r1, #1
    2262:	40b1      	lsls	r1, r6
    2264:	4319      	orrs	r1, r3
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    2266:	6963      	ldr	r3, [r4, #20]
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    2268:	60e1      	str	r1, [r4, #12]
    226a:	2101      	movs	r1, #1
    226c:	40b1      	lsls	r1, r6
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    226e:	f5b7 3fa0 	cmp.w	r7, #81920	; 0x14000
    2272:	bf0c      	ite	eq
    2274:	430b      	orreq	r3, r1
    2276:	438b      	bicne	r3, r1
    2278:	6163      	str	r3, [r4, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    227a:	69a3      	ldr	r3, [r4, #24]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    227c:	4a58      	ldr	r2, [pc, #352]	; (23e0 <gpio_nrfx_pin_interrupt_configure+0x1bc>)
	return port->data;
    227e:	f8d8 7010 	ldr.w	r7, [r8, #16]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    2282:	f5b9 2fc0 	cmp.w	r9, #393216	; 0x60000
    2286:	bf0c      	ite	eq
    2288:	430b      	orreq	r3, r1
    228a:	438b      	bicne	r3, r1
    228c:	61a3      	str	r3, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    228e:	6923      	ldr	r3, [r4, #16]
    2290:	f5b9 2f80 	cmp.w	r9, #262144	; 0x40000
    2294:	bf0c      	ite	eq
    2296:	4319      	orreq	r1, r3
    2298:	ea23 0101 	bicne.w	r1, r3, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    229c:	f8d8 3004 	ldr.w	r3, [r8, #4]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    22a0:	6121      	str	r1, [r4, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    22a2:	7a1b      	ldrb	r3, [r3, #8]
    22a4:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
    22a8:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    22ac:	2000      	movs	r0, #0
    22ae:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    22b0:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    22b4:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    22b8:	f3c1 2104 	ubfx	r1, r1, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    22bc:	428d      	cmp	r5, r1
    22be:	d178      	bne.n	23b2 <gpio_nrfx_pin_interrupt_configure+0x18e>
		    && (intenset & BIT(i))) {
    22c0:	fa23 f100 	lsr.w	r1, r3, r0
    22c4:	07c9      	lsls	r1, r1, #31
    22c6:	d574      	bpl.n	23b2 <gpio_nrfx_pin_interrupt_configure+0x18e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    22c8:	0083      	lsls	r3, r0, #2
    22ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    22ce:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    22d2:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    22d6:	f021 0101 	bic.w	r1, r1, #1
    22da:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    22de:	2301      	movs	r3, #1
    22e0:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
    22e2:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
    22e6:	b2c0      	uxtb	r0, r0
    22e8:	f000 ffa2 	bl	3230 <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    22ec:	4628      	mov	r0, r5
    22ee:	2100      	movs	r1, #0
    22f0:	f003 fc9c 	bl	5c2c <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
    22f4:	68f8      	ldr	r0, [r7, #12]
    22f6:	40f0      	lsrs	r0, r6
    22f8:	f010 0001 	ands.w	r0, r0, #1
    22fc:	d04b      	beq.n	2396 <gpio_nrfx_pin_interrupt_configure+0x172>
		if (data->trig_edge & BIT(pin)) {
    22fe:	6978      	ldr	r0, [r7, #20]
    2300:	40f0      	lsrs	r0, r6
    2302:	f010 0401 	ands.w	r4, r0, #1
    2306:	d05c      	beq.n	23c2 <gpio_nrfx_pin_interrupt_configure+0x19e>
				if (data->double_edge & BIT(pin)) {
    2308:	69bb      	ldr	r3, [r7, #24]
    230a:	40f3      	lsrs	r3, r6
    230c:	07db      	lsls	r3, r3, #31
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
    230e:	bf5f      	itttt	pl
    2310:	6939      	ldrpl	r1, [r7, #16]
    2312:	fa21 f606 	lsrpl.w	r6, r1, r6
    2316:	f006 0601 	andpl.w	r6, r6, #1
    231a:	f1c6 0602 	rsbpl	r6, r6, #2
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    231e:	a801      	add	r0, sp, #4
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
    2320:	bf54      	ite	pl
    2322:	b2f6      	uxtbpl	r6, r6
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
    2324:	2603      	movmi	r6, #3
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    2326:	f000 ffa3 	bl	3270 <nrfx_gpiote_channel_alloc>
    232a:	4b2e      	ldr	r3, [pc, #184]	; (23e4 <gpio_nrfx_pin_interrupt_configure+0x1c0>)
    232c:	4298      	cmp	r0, r3
    232e:	d145      	bne.n	23bc <gpio_nrfx_pin_interrupt_configure+0x198>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
    2330:	f89d 2004 	ldrb.w	r2, [sp, #4]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    2334:	0093      	lsls	r3, r2, #2
    2336:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    233a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    233e:	022d      	lsls	r5, r5, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    2340:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    2344:	f421 3147 	bic.w	r1, r1, #203776	; 0x31c00
    2348:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    234c:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    2350:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    2354:	f405 55f8 	and.w	r5, r5, #7936	; 0x1f00
    2358:	430d      	orrs	r5, r1
    235a:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
    235e:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
    2362:	0093      	lsls	r3, r2, #2
    2364:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2368:	f503 43c2 	add.w	r3, r3, #24832	; 0x6100
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    236c:	2000      	movs	r0, #0
    236e:	6018      	str	r0, [r3, #0]
	nrf_gpiote_event_enable(NRF_GPIOTE, channel);
    2370:	f89d 1004 	ldrb.w	r1, [sp, #4]
    2374:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    2376:	008b      	lsls	r3, r1, #2
    2378:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    237c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    2380:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    2384:	f042 0201 	orr.w	r2, r2, #1
    2388:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_reg->INTENSET = mask;
    238c:	4a14      	ldr	r2, [pc, #80]	; (23e0 <gpio_nrfx_pin_interrupt_configure+0x1bc>)
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    238e:	2301      	movs	r3, #1
    2390:	408b      	lsls	r3, r1
    2392:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    2396:	b003      	add	sp, #12
    2398:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    239c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    23a0:	f47f af5d 	bne.w	225e <gpio_nrfx_pin_interrupt_configure+0x3a>
    23a4:	2101      	movs	r1, #1
    23a6:	fa01 f306 	lsl.w	r3, r1, r6
    23aa:	68e1      	ldr	r1, [r4, #12]
    23ac:	ea21 0103 	bic.w	r1, r1, r3
    23b0:	e759      	b.n	2266 <gpio_nrfx_pin_interrupt_configure+0x42>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    23b2:	3001      	adds	r0, #1
    23b4:	2808      	cmp	r0, #8
    23b6:	f47f af7b 	bne.w	22b0 <gpio_nrfx_pin_interrupt_configure+0x8c>
    23ba:	e797      	b.n	22ec <gpio_nrfx_pin_interrupt_configure+0xc8>
		return -ENODEV;
    23bc:	f06f 0012 	mvn.w	r0, #18
    23c0:	e7e9      	b.n	2396 <gpio_nrfx_pin_interrupt_configure+0x172>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    23c2:	6939      	ldr	r1, [r7, #16]
    23c4:	40f1      	lsrs	r1, r6
    23c6:	f001 0101 	and.w	r1, r1, #1
    23ca:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    23ce:	4628      	mov	r0, r5
    23d0:	b2c9      	uxtb	r1, r1
    23d2:	f003 fc2b 	bl	5c2c <nrf_gpio_cfg_sense_set>
	int res = 0;
    23d6:	4620      	mov	r0, r4
    23d8:	e7dd      	b.n	2396 <gpio_nrfx_pin_interrupt_configure+0x172>
		return -ENOTSUP;
    23da:	f06f 0085 	mvn.w	r0, #133	; 0x85
    23de:	e7da      	b.n	2396 <gpio_nrfx_pin_interrupt_configure+0x172>
    23e0:	40006000 	.word	0x40006000
    23e4:	0bad0000 	.word	0x0bad0000

000023e8 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    23e8:	4b2e      	ldr	r3, [pc, #184]	; (24a4 <gpio_nrfx_config+0xbc>)
{
    23ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    23ec:	4c2e      	ldr	r4, [pc, #184]	; (24a8 <gpio_nrfx_config+0xc0>)
	return port->config;
    23ee:	6840      	ldr	r0, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    23f0:	4013      	ands	r3, r2
    23f2:	42a3      	cmp	r3, r4
    23f4:	d045      	beq.n	2482 <gpio_nrfx_config+0x9a>
    23f6:	d80e      	bhi.n	2416 <gpio_nrfx_config+0x2e>
    23f8:	2b06      	cmp	r3, #6
    23fa:	d044      	beq.n	2486 <gpio_nrfx_config+0x9e>
    23fc:	d806      	bhi.n	240c <gpio_nrfx_config+0x24>
    23fe:	2b00      	cmp	r3, #0
    2400:	d041      	beq.n	2486 <gpio_nrfx_config+0x9e>
    2402:	2b02      	cmp	r3, #2
    2404:	d041      	beq.n	248a <gpio_nrfx_config+0xa2>
    2406:	f06f 0015 	mvn.w	r0, #21
    240a:	e038      	b.n	247e <gpio_nrfx_config+0x96>
    240c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    2410:	d1f9      	bne.n	2406 <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_H0S1;
    2412:	2401      	movs	r4, #1
    2414:	e009      	b.n	242a <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2416:	4c25      	ldr	r4, [pc, #148]	; (24ac <gpio_nrfx_config+0xc4>)
    2418:	42a3      	cmp	r3, r4
    241a:	d038      	beq.n	248e <gpio_nrfx_config+0xa6>
    241c:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    2420:	d037      	beq.n	2492 <gpio_nrfx_config+0xaa>
    2422:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    2426:	d1ee      	bne.n	2406 <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_S0H1;
    2428:	2402      	movs	r4, #2
	if ((flags & GPIO_PULL_UP) != 0) {
    242a:	06d5      	lsls	r5, r2, #27
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    242c:	f482 7380 	eor.w	r3, r2, #256	; 0x100
		pull = NRF_GPIO_PIN_NOPULL;
    2430:	bf54      	ite	pl
    2432:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
    2436:	2603      	movmi	r6, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    2438:	f3c3 2700 	ubfx	r7, r3, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
    243c:	0593      	lsls	r3, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
    243e:	f3c2 2540 	ubfx	r5, r2, #9, #1
	if ((flags & GPIO_OUTPUT) != 0) {
    2442:	d507      	bpl.n	2454 <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    2444:	0513      	lsls	r3, r2, #20
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    2446:	f8d0 c004 	ldr.w	ip, [r0, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    244a:	d524      	bpl.n	2496 <gpio_nrfx_config+0xae>
			nrf_gpio_port_out_set(reg, BIT(pin));
    244c:	2301      	movs	r3, #1
    244e:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
    2450:	f8cc 3508 	str.w	r3, [ip, #1288]	; 0x508
	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
    2454:	7a03      	ldrb	r3, [r0, #8]
    2456:	f001 011f 	and.w	r1, r1, #31
    245a:	ea41 1143 	orr.w	r1, r1, r3, lsl #5
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    245e:	a801      	add	r0, sp, #4
    2460:	9101      	str	r1, [sp, #4]
    2462:	f7ff fe8f 	bl	2184 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    2466:	9a01      	ldr	r2, [sp, #4]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    2468:	ea45 0347 	orr.w	r3, r5, r7, lsl #1
    246c:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    2470:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    2474:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    2478:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	return 0;
    247c:	2000      	movs	r0, #0
}
    247e:	b003      	add	sp, #12
    2480:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
    2482:	2407      	movs	r4, #7
    2484:	e7d1      	b.n	242a <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2486:	461c      	mov	r4, r3
    2488:	e7cf      	b.n	242a <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0S1;
    248a:	2404      	movs	r4, #4
    248c:	e7cd      	b.n	242a <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0H1;
    248e:	2405      	movs	r4, #5
    2490:	e7cb      	b.n	242a <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_H0H1;
    2492:	2403      	movs	r4, #3
    2494:	e7c9      	b.n	242a <gpio_nrfx_config+0x42>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    2496:	0553      	lsls	r3, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
    2498:	bf42      	ittt	mi
    249a:	2301      	movmi	r3, #1
    249c:	408b      	lslmi	r3, r1
    p_reg->OUTCLR = clr_mask;
    249e:	f8cc 350c 	strmi.w	r3, [ip, #1292]	; 0x50c
}
    24a2:	e7d7      	b.n	2454 <gpio_nrfx_config+0x6c>
    24a4:	00f00006 	.word	0x00f00006
    24a8:	00100006 	.word	0x00100006
    24ac:	00400002 	.word	0x00400002

000024b0 <gpiote_event_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    24b0:	4b52      	ldr	r3, [pc, #328]	; (25fc <gpiote_event_handler+0x14c>)
{
    24b2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    24b6:	f8d3 617c 	ldr.w	r6, [r3, #380]	; 0x17c
	if (port_event) {
    24ba:	2e00      	cmp	r6, #0
    24bc:	d061      	beq.n	2582 <gpiote_event_handler+0xd2>
	uint32_t out = data->pin_int_en;
    24be:	4b50      	ldr	r3, [pc, #320]	; (2600 <gpiote_event_handler+0x150>)
	out &= ~data->trig_edge & ~data->double_edge;
    24c0:	e9d3 2005 	ldrd	r2, r0, [r3, #20]
	uint32_t out = data->pin_int_en;
    24c4:	68d9      	ldr	r1, [r3, #12]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    24c6:	691b      	ldr	r3, [r3, #16]
	out &= ~data->trig_edge & ~data->double_edge;
    24c8:	4302      	orrs	r2, r0
    24ca:	ea21 0802 	bic.w	r8, r1, r2
    return p_reg->IN;
    24ce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
	uint32_t check_pins = level_pins;
    24d2:	4645      	mov	r5, r8
    24d4:	f8d2 4510 	ldr.w	r4, [r2, #1296]	; 0x510
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    24d8:	405c      	eors	r4, r3
	uint32_t out = pin_states & level_pins;
    24da:	ea28 0404 	bic.w	r4, r8, r4
	uint32_t bit = 1U << pin;
    24de:	2701      	movs	r7, #1
	uint32_t pin = 0U;
    24e0:	f04f 0900 	mov.w	r9, #0
	while (check_pins) {
    24e4:	bb95      	cbnz	r5, 254c <gpiote_event_handler+0x9c>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    24e6:	4b45      	ldr	r3, [pc, #276]	; (25fc <gpiote_event_handler+0x14c>)
    24e8:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    24ec:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    24f0:	4a44      	ldr	r2, [pc, #272]	; (2604 <gpiote_event_handler+0x154>)
    return p_reg->INTENSET & mask;
    24f2:	4842      	ldr	r0, [pc, #264]	; (25fc <gpiote_event_handler+0x14c>)
    24f4:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    24f6:	2501      	movs	r5, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    24f8:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
    24fa:	f8d0 1304 	ldr.w	r1, [r0, #772]	; 0x304
    24fe:	fa05 fc03 	lsl.w	ip, r5, r3
    2502:	ea1c 0f01 	tst.w	ip, r1
    2506:	d00c      	beq.n	2522 <gpiote_event_handler+0x72>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2508:	6811      	ldr	r1, [r2, #0]
    250a:	b151      	cbz	r1, 2522 <gpiote_event_handler+0x72>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    250c:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    2510:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2514:	6017      	str	r7, [r2, #0]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    2516:	f3c1 2104 	ubfx	r1, r1, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    251a:	fa05 f101 	lsl.w	r1, r5, r1
    251e:	430c      	orrs	r4, r1
    2520:	6811      	ldr	r1, [r2, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    2522:	3301      	adds	r3, #1
    2524:	2b08      	cmp	r3, #8
    2526:	f102 0204 	add.w	r2, r2, #4
    252a:	d1e6      	bne.n	24fa <gpiote_event_handler+0x4a>
	if (fired_triggers[0]) {
    252c:	bb5c      	cbnz	r4, 2586 <gpiote_event_handler+0xd6>
	if (port_event) {
    252e:	b156      	cbz	r6, 2546 <gpiote_event_handler+0x96>
	uint32_t out = data->pin_int_en;
    2530:	4f33      	ldr	r7, [pc, #204]	; (2600 <gpiote_event_handler+0x150>)
	out &= ~data->trig_edge & ~data->double_edge;
    2532:	e9d7 3205 	ldrd	r3, r2, [r7, #20]
	uint32_t out = data->pin_int_en;
    2536:	68fc      	ldr	r4, [r7, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    2538:	4313      	orrs	r3, r2
    253a:	ea24 0403 	bic.w	r4, r4, r3
	uint32_t bit = 1U << pin;
    253e:	2501      	movs	r5, #1
	uint32_t pin = 0U;
    2540:	2600      	movs	r6, #0
	while (level_pins) {
    2542:	2c00      	cmp	r4, #0
    2544:	d147      	bne.n	25d6 <gpiote_event_handler+0x126>
}
    2546:	b002      	add	sp, #8
    2548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (check_pins & bit) {
    254c:	422f      	tst	r7, r5
    254e:	d014      	beq.n	257a <gpiote_event_handler+0xca>
			if (!(level_pins & bit)) {
    2550:	ea17 0f08 	tst.w	r7, r8
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2554:	f009 0a1f 	and.w	sl, r9, #31
			if (!(level_pins & bit)) {
    2558:	d109      	bne.n	256e <gpiote_event_handler+0xbe>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    255a:	a801      	add	r0, sp, #4
    255c:	f8cd a004 	str.w	sl, [sp, #4]
    2560:	f7ff fe10 	bl	2184 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    2564:	9b01      	ldr	r3, [sp, #4]
    2566:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    256a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    256e:	2100      	movs	r1, #0
    2570:	4650      	mov	r0, sl
    2572:	f003 fb5b 	bl	5c2c <nrf_gpio_cfg_sense_set>
			check_pins &= ~bit;
    2576:	ea25 0507 	bic.w	r5, r5, r7
		++pin;
    257a:	f109 0901 	add.w	r9, r9, #1
		bit <<= 1;
    257e:	007f      	lsls	r7, r7, #1
    2580:	e7b0      	b.n	24e4 <gpiote_event_handler+0x34>
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    2582:	4634      	mov	r4, r6
    2584:	e7b4      	b.n	24f0 <gpiote_event_handler+0x40>
	gpio_fire_callbacks(list, port, pins);
    2586:	4b1e      	ldr	r3, [pc, #120]	; (2600 <gpiote_event_handler+0x150>)
    2588:	685d      	ldr	r5, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    258a:	2d00      	cmp	r5, #0
    258c:	d0cf      	beq.n	252e <gpiote_event_handler+0x7e>
	return node->next;
    258e:	682f      	ldr	r7, [r5, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    2590:	f8df 9074 	ldr.w	r9, [pc, #116]	; 2608 <gpiote_event_handler+0x158>
			__ASSERT(cb->handler, "No callback handler!");
    2594:	f8df 8074 	ldr.w	r8, [pc, #116]	; 260c <gpiote_event_handler+0x15c>
    2598:	f8df a074 	ldr.w	sl, [pc, #116]	; 2610 <gpiote_event_handler+0x160>
		if (cb->pin_mask & pins) {
    259c:	68ab      	ldr	r3, [r5, #8]
    259e:	421c      	tst	r4, r3
    25a0:	d014      	beq.n	25cc <gpiote_event_handler+0x11c>
			__ASSERT(cb->handler, "No callback handler!");
    25a2:	686b      	ldr	r3, [r5, #4]
    25a4:	b963      	cbnz	r3, 25c0 <gpiote_event_handler+0x110>
    25a6:	4651      	mov	r1, sl
    25a8:	481a      	ldr	r0, [pc, #104]	; (2614 <gpiote_event_handler+0x164>)
    25aa:	2345      	movs	r3, #69	; 0x45
    25ac:	4642      	mov	r2, r8
    25ae:	f003 f90f 	bl	57d0 <printk>
    25b2:	4819      	ldr	r0, [pc, #100]	; (2618 <gpiote_event_handler+0x168>)
    25b4:	f003 f90c 	bl	57d0 <printk>
    25b8:	2145      	movs	r1, #69	; 0x45
    25ba:	4640      	mov	r0, r8
    25bc:	f003 f9cf 	bl	595e <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
    25c0:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
    25c4:	4629      	mov	r1, r5
    25c6:	4022      	ands	r2, r4
    25c8:	4648      	mov	r0, r9
    25ca:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    25cc:	2f00      	cmp	r7, #0
    25ce:	d0ae      	beq.n	252e <gpiote_event_handler+0x7e>
    25d0:	463d      	mov	r5, r7
    25d2:	683f      	ldr	r7, [r7, #0]
    25d4:	e7e2      	b.n	259c <gpiote_event_handler+0xec>
		if (level_pins & bit) {
    25d6:	4225      	tst	r5, r4
    25d8:	d00c      	beq.n	25f4 <gpiote_event_handler+0x144>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    25da:	6939      	ldr	r1, [r7, #16]
    25dc:	40f1      	lsrs	r1, r6
    25de:	f001 0101 	and.w	r1, r1, #1
    25e2:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    25e6:	b2c9      	uxtb	r1, r1
    25e8:	f006 001f 	and.w	r0, r6, #31
    25ec:	f003 fb1e 	bl	5c2c <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    25f0:	ea24 0405 	bic.w	r4, r4, r5
		++pin;
    25f4:	3601      	adds	r6, #1
		bit <<= 1;
    25f6:	006d      	lsls	r5, r5, #1
    25f8:	e7a3      	b.n	2542 <gpiote_event_handler+0x92>
    25fa:	bf00      	nop
    25fc:	40006000 	.word	0x40006000
    2600:	20000218 	.word	0x20000218
    2604:	40006100 	.word	0x40006100
    2608:	0000602c 	.word	0x0000602c
    260c:	00006a1f 	.word	0x00006a1f
    2610:	00006cfb 	.word	0x00006cfb
    2614:	00006321 	.word	0x00006321
    2618:	00006a76 	.word	0x00006a76

0000261c <twi_0_init>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twi_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWI
I2C_NRFX_TWI_DEVICE(0);
    261c:	b510      	push	{r4, lr}
    261e:	4604      	mov	r4, r0
    2620:	2200      	movs	r2, #0
    2622:	2101      	movs	r1, #1
    2624:	2003      	movs	r0, #3
    2626:	f7fe ff43 	bl	14b0 <z_arm_irq_priority_set>
	return dev->config;
    262a:	6860      	ldr	r0, [r4, #4]
	nrfx_err_t result = nrfx_twi_init(&get_dev_config(dev)->twi,
    262c:	6923      	ldr	r3, [r4, #16]
    262e:	4a06      	ldr	r2, [pc, #24]	; (2648 <twi_0_init+0x2c>)
    2630:	f100 0108 	add.w	r1, r0, #8
    2634:	f000 ffa0 	bl	3578 <nrfx_twi_init>
	if (result != NRFX_SUCCESS) {
    2638:	4b04      	ldr	r3, [pc, #16]	; (264c <twi_0_init+0x30>)
		return -EBUSY;
    263a:	4298      	cmp	r0, r3
I2C_NRFX_TWI_DEVICE(0);
    263c:	bf14      	ite	ne
    263e:	f06f 000f 	mvnne.w	r0, #15
    2642:	2000      	moveq	r0, #0
    2644:	bd10      	pop	{r4, pc}
    2646:	bf00      	nop
    2648:	00002651 	.word	0x00002651
    264c:	0bad0000 	.word	0x0bad0000

00002650 <event_handler>:
	switch (p_event->type) {
    2650:	7803      	ldrb	r3, [r0, #0]
    2652:	2b01      	cmp	r3, #1
    2654:	d008      	beq.n	2668 <event_handler+0x18>
    2656:	2b02      	cmp	r3, #2
    2658:	d008      	beq.n	266c <event_handler+0x1c>
    265a:	b94b      	cbnz	r3, 2670 <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
    265c:	4b05      	ldr	r3, [pc, #20]	; (2674 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
    265e:	620b      	str	r3, [r1, #32]
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    2660:	f101 0010 	add.w	r0, r1, #16
    2664:	f001 bc8a 	b.w	3f7c <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    2668:	4b03      	ldr	r3, [pc, #12]	; (2678 <event_handler+0x28>)
    266a:	e7f8      	b.n	265e <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    266c:	4b03      	ldr	r3, [pc, #12]	; (267c <event_handler+0x2c>)
    266e:	e7f6      	b.n	265e <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
    2670:	4b03      	ldr	r3, [pc, #12]	; (2680 <event_handler+0x30>)
    2672:	e7f4      	b.n	265e <event_handler+0xe>
    2674:	0bad0000 	.word	0x0bad0000
    2678:	0bae0001 	.word	0x0bae0001
    267c:	0bae0002 	.word	0x0bae0002
    2680:	0bad0001 	.word	0x0bad0001

00002684 <i2c_nrfx_twi_transfer>:
{
    2684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2688:	4604      	mov	r4, r0
    268a:	b087      	sub	sp, #28
    268c:	460d      	mov	r5, r1
    268e:	4617      	mov	r7, r2
    2690:	4699      	mov	r9, r3
	k_sem_take(&(get_dev_data(dev)->transfer_sync), K_FOREVER);
    2692:	6900      	ldr	r0, [r0, #16]
	return z_impl_k_sem_take(sem, timeout);
    2694:	f04f 32ff 	mov.w	r2, #4294967295
    2698:	f04f 33ff 	mov.w	r3, #4294967295
    269c:	f001 fcac 	bl	3ff8 <z_impl_k_sem_take>
	k_sem_take(&(get_dev_data(dev)->completion_sync), K_NO_WAIT);
    26a0:	6920      	ldr	r0, [r4, #16]
    26a2:	3010      	adds	r0, #16
    26a4:	2200      	movs	r2, #0
    26a6:	2300      	movs	r3, #0
    26a8:	f001 fca6 	bl	3ff8 <z_impl_k_sem_take>
	nrfx_twi_enable(&get_dev_config(dev)->twi);
    26ac:	6860      	ldr	r0, [r4, #4]
		if (res != NRFX_SUCCESS) {
    26ae:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 2774 <i2c_nrfx_twi_transfer+0xf0>
	nrfx_twi_enable(&get_dev_config(dev)->twi);
    26b2:	f000 ffd9 	bl	3668 <nrfx_twi_enable>
	for (size_t i = 0; i < num_msgs; i++) {
    26b6:	f04f 0800 	mov.w	r8, #0
    26ba:	45b8      	cmp	r8, r7
    26bc:	d301      	bcc.n	26c2 <i2c_nrfx_twi_transfer+0x3e>
    26be:	2500      	movs	r5, #0
    26c0:	e029      	b.n	2716 <i2c_nrfx_twi_transfer+0x92>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
    26c2:	f895 b008 	ldrb.w	fp, [r5, #8]
    26c6:	f01b 0608 	ands.w	r6, fp, #8
    26ca:	d14c      	bne.n	2766 <i2c_nrfx_twi_transfer+0xe2>
		nrfx_twi_xfer_desc_t cur_xfer = {
    26cc:	2214      	movs	r2, #20
    26ce:	4631      	mov	r1, r6
    26d0:	a801      	add	r0, sp, #4
    26d2:	f003 f9ea 	bl	5aaa <memset>
    26d6:	686a      	ldr	r2, [r5, #4]
    26d8:	9202      	str	r2, [sp, #8]
					  NRFX_TWI_XFER_RX : NRFX_TWI_XFER_TX
    26da:	f00b 0301 	and.w	r3, fp, #1
		nrfx_twi_xfer_desc_t cur_xfer = {
    26de:	682a      	ldr	r2, [r5, #0]
    26e0:	f88d 3004 	strb.w	r3, [sp, #4]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
    26e4:	f01b 0f02 	tst.w	fp, #2
		nrfx_twi_xfer_desc_t cur_xfer = {
    26e8:	f88d 9005 	strb.w	r9, [sp, #5]
    26ec:	9204      	str	r2, [sp, #16]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
    26ee:	d11c      	bne.n	272a <i2c_nrfx_twi_transfer+0xa6>
			if ((i < (num_msgs - 1)) &&
    26f0:	1e7a      	subs	r2, r7, #1
    26f2:	4542      	cmp	r2, r8
    26f4:	d902      	bls.n	26fc <i2c_nrfx_twi_transfer+0x78>
    26f6:	7d2a      	ldrb	r2, [r5, #20]
    26f8:	0752      	lsls	r2, r2, #29
    26fa:	d518      	bpl.n	272e <i2c_nrfx_twi_transfer+0xaa>
			} else if (msgs[i].flags & I2C_MSG_READ) {
    26fc:	bb9b      	cbnz	r3, 2766 <i2c_nrfx_twi_transfer+0xe2>
				xfer_flags |= NRFX_TWI_FLAG_TX_NO_STOP;
    26fe:	2220      	movs	r2, #32
		res = nrfx_twi_xfer(&get_dev_config(dev)->twi,
    2700:	6860      	ldr	r0, [r4, #4]
    2702:	a901      	add	r1, sp, #4
    2704:	f001 f810 	bl	3728 <nrfx_twi_xfer>
		if (res != NRFX_SUCCESS) {
    2708:	4550      	cmp	r0, sl
    270a:	d012      	beq.n	2732 <i2c_nrfx_twi_transfer+0xae>
			if (res == NRFX_ERROR_BUSY) {
    270c:	4b1a      	ldr	r3, [pc, #104]	; (2778 <i2c_nrfx_twi_transfer+0xf4>)
    270e:	4298      	cmp	r0, r3
    2710:	d02c      	beq.n	276c <i2c_nrfx_twi_transfer+0xe8>
			ret = -EIO;
    2712:	f06f 0504 	mvn.w	r5, #4
	nrfx_twi_disable(&get_dev_config(dev)->twi);
    2716:	6860      	ldr	r0, [r4, #4]
    2718:	f000 ffd0 	bl	36bc <nrfx_twi_disable>
	k_sem_give(&(get_dev_data(dev)->transfer_sync));
    271c:	6920      	ldr	r0, [r4, #16]
	z_impl_k_sem_give(sem);
    271e:	f001 fc2d 	bl	3f7c <z_impl_k_sem_give>
}
    2722:	4628      	mov	r0, r5
    2724:	b007      	add	sp, #28
    2726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint32_t xfer_flags = 0;
    272a:	4632      	mov	r2, r6
    272c:	e7e8      	b.n	2700 <i2c_nrfx_twi_transfer+0x7c>
				xfer_flags |= NRFX_TWI_FLAG_SUSPEND;
    272e:	2240      	movs	r2, #64	; 0x40
    2730:	e7e6      	b.n	2700 <i2c_nrfx_twi_transfer+0x7c>
		ret = k_sem_take(&(get_dev_data(dev)->completion_sync),
    2732:	6920      	ldr	r0, [r4, #16]
    2734:	3010      	adds	r0, #16
	return z_impl_k_sem_take(sem, timeout);
    2736:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    273a:	2300      	movs	r3, #0
    273c:	f001 fc5c 	bl	3ff8 <z_impl_k_sem_take>
		if (ret != 0) {
    2740:	b140      	cbz	r0, 2754 <i2c_nrfx_twi_transfer+0xd0>
			nrfx_twi_disable(&get_dev_config(dev)->twi);
    2742:	6860      	ldr	r0, [r4, #4]
    2744:	f000 ffba 	bl	36bc <nrfx_twi_disable>
	return dev->config;
    2748:	6863      	ldr	r3, [r4, #4]
NRFX_STATIC_INLINE nrfx_err_t nrfx_twi_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twi_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
    274a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
    274e:	f001 f937 	bl	39c0 <nrfx_twi_twim_bus_recover>
    2752:	e7de      	b.n	2712 <i2c_nrfx_twi_transfer+0x8e>
	return dev->data;
    2754:	6923      	ldr	r3, [r4, #16]
		res = get_dev_data(dev)->res;
    2756:	6a1b      	ldr	r3, [r3, #32]
		if (res != NRFX_SUCCESS) {
    2758:	4553      	cmp	r3, sl
    275a:	f105 050c 	add.w	r5, r5, #12
    275e:	d1d8      	bne.n	2712 <i2c_nrfx_twi_transfer+0x8e>
	for (size_t i = 0; i < num_msgs; i++) {
    2760:	f108 0801 	add.w	r8, r8, #1
    2764:	e7a9      	b.n	26ba <i2c_nrfx_twi_transfer+0x36>
			ret = -ENOTSUP;
    2766:	f06f 0585 	mvn.w	r5, #133	; 0x85
    276a:	e7d4      	b.n	2716 <i2c_nrfx_twi_transfer+0x92>
				ret = -EBUSY;
    276c:	f06f 050f 	mvn.w	r5, #15
    2770:	e7d1      	b.n	2716 <i2c_nrfx_twi_transfer+0x92>
    2772:	bf00      	nop
    2774:	0bad0000 	.word	0x0bad0000
    2778:	0bad000b 	.word	0x0bad000b

0000277c <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    277c:	6803      	ldr	r3, [r0, #0]
    switch (port)
    277e:	095a      	lsrs	r2, r3, #5
    2780:	bf0c      	ite	eq
    2782:	f04f 32ff 	moveq.w	r2, #4294967295
    2786:	2200      	movne	r2, #0
    pin_number &= 0x1F;
    2788:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
    278c:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    2790:	07db      	lsls	r3, r3, #31
{
    2792:	b510      	push	{r4, lr}
    2794:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    2796:	d40b      	bmi.n	27b0 <nrf_gpio_pin_port_decode+0x34>
    2798:	4910      	ldr	r1, [pc, #64]	; (27dc <nrf_gpio_pin_port_decode+0x60>)
    279a:	4811      	ldr	r0, [pc, #68]	; (27e0 <nrf_gpio_pin_port_decode+0x64>)
    279c:	4a11      	ldr	r2, [pc, #68]	; (27e4 <nrf_gpio_pin_port_decode+0x68>)
    279e:	f44f 7305 	mov.w	r3, #532	; 0x214
    27a2:	f003 f815 	bl	57d0 <printk>
    27a6:	480f      	ldr	r0, [pc, #60]	; (27e4 <nrf_gpio_pin_port_decode+0x68>)
    27a8:	f44f 7105 	mov.w	r1, #532	; 0x214
    27ac:	f003 f8d7 	bl	595e <assert_post_action>
    uint32_t pin_number = *p_pin;
    27b0:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    27b2:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    27b6:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    27b8:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    27ba:	d00b      	beq.n	27d4 <nrf_gpio_pin_port_decode+0x58>
            NRFX_ASSERT(0);
    27bc:	490a      	ldr	r1, [pc, #40]	; (27e8 <nrf_gpio_pin_port_decode+0x6c>)
    27be:	4808      	ldr	r0, [pc, #32]	; (27e0 <nrf_gpio_pin_port_decode+0x64>)
    27c0:	4a08      	ldr	r2, [pc, #32]	; (27e4 <nrf_gpio_pin_port_decode+0x68>)
    27c2:	f240 2319 	movw	r3, #537	; 0x219
    27c6:	f003 f803 	bl	57d0 <printk>
    27ca:	4806      	ldr	r0, [pc, #24]	; (27e4 <nrf_gpio_pin_port_decode+0x68>)
    27cc:	f240 2119 	movw	r1, #537	; 0x219
    27d0:	f003 f8c5 	bl	595e <assert_post_action>
}
    27d4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    27d8:	bd10      	pop	{r4, pc}
    27da:	bf00      	nop
    27dc:	00006ac0 	.word	0x00006ac0
    27e0:	00006321 	.word	0x00006321
    27e4:	00006a8d 	.word	0x00006a8d
    27e8:	0000648f 	.word	0x0000648f

000027ec <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    27ec:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    27ee:	794b      	ldrb	r3, [r1, #5]
    27f0:	2b01      	cmp	r3, #1
    27f2:	d02a      	beq.n	284a <uarte_nrfx_configure+0x5e>
    27f4:	2b03      	cmp	r3, #3
    27f6:	d125      	bne.n	2844 <uarte_nrfx_configure+0x58>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    27f8:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    27fa:	798b      	ldrb	r3, [r1, #6]
    27fc:	2b03      	cmp	r3, #3
    27fe:	d121      	bne.n	2844 <uarte_nrfx_configure+0x58>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    2800:	79cc      	ldrb	r4, [r1, #7]
    2802:	b12c      	cbz	r4, 2810 <uarte_nrfx_configure+0x24>
    2804:	2c01      	cmp	r4, #1
    2806:	d11d      	bne.n	2844 <uarte_nrfx_configure+0x58>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (IS_HWFC_PINS_USED(get_dev_config(dev)->flags)) {
    2808:	6843      	ldr	r3, [r0, #4]
    280a:	685b      	ldr	r3, [r3, #4]
    280c:	079b      	lsls	r3, r3, #30
    280e:	d019      	beq.n	2844 <uarte_nrfx_configure+0x58>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    2810:	790a      	ldrb	r2, [r1, #4]
    2812:	b112      	cbz	r2, 281a <uarte_nrfx_configure+0x2e>
    2814:	2a02      	cmp	r2, #2
    2816:	d115      	bne.n	2844 <uarte_nrfx_configure+0x58>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    2818:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    281a:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    281c:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    281e:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    2822:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    2824:	d065      	beq.n	28f2 <uarte_nrfx_configure+0x106>
    2826:	d82d      	bhi.n	2884 <uarte_nrfx_configure+0x98>
    2828:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    282c:	d064      	beq.n	28f8 <uarte_nrfx_configure+0x10c>
    282e:	d816      	bhi.n	285e <uarte_nrfx_configure+0x72>
    2830:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    2834:	d062      	beq.n	28fc <uarte_nrfx_configure+0x110>
    2836:	d80a      	bhi.n	284e <uarte_nrfx_configure+0x62>
    2838:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    283c:	d061      	beq.n	2902 <uarte_nrfx_configure+0x116>
    283e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    2842:	d061      	beq.n	2908 <uarte_nrfx_configure+0x11c>
    2844:	f06f 0085 	mvn.w	r0, #133	; 0x85
    2848:	e052      	b.n	28f0 <uarte_nrfx_configure+0x104>
	switch (cfg->stop_bits) {
    284a:	2600      	movs	r6, #0
    284c:	e7d5      	b.n	27fa <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    284e:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    2852:	d05c      	beq.n	290e <uarte_nrfx_configure+0x122>
    2854:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    2858:	d1f4      	bne.n	2844 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    285a:	4b37      	ldr	r3, [pc, #220]	; (2938 <uarte_nrfx_configure+0x14c>)
    285c:	e03c      	b.n	28d8 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    285e:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    2862:	d057      	beq.n	2914 <uarte_nrfx_configure+0x128>
    2864:	d807      	bhi.n	2876 <uarte_nrfx_configure+0x8a>
    2866:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    286a:	d055      	beq.n	2918 <uarte_nrfx_configure+0x12c>
    286c:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    2870:	d1e8      	bne.n	2844 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    2872:	4b32      	ldr	r3, [pc, #200]	; (293c <uarte_nrfx_configure+0x150>)
    2874:	e030      	b.n	28d8 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    2876:	f647 2712 	movw	r7, #31250	; 0x7a12
    287a:	42bb      	cmp	r3, r7
    287c:	d1e2      	bne.n	2844 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    287e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    2882:	e029      	b.n	28d8 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    2884:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    2888:	d048      	beq.n	291c <uarte_nrfx_configure+0x130>
    288a:	d813      	bhi.n	28b4 <uarte_nrfx_configure+0xc8>
    288c:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    2890:	d047      	beq.n	2922 <uarte_nrfx_configure+0x136>
    2892:	d809      	bhi.n	28a8 <uarte_nrfx_configure+0xbc>
    2894:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    2898:	42bb      	cmp	r3, r7
    289a:	d044      	beq.n	2926 <uarte_nrfx_configure+0x13a>
    289c:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    28a0:	d1d0      	bne.n	2844 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    28a2:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    28a6:	e017      	b.n	28d8 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    28a8:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    28ac:	d1ca      	bne.n	2844 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    28ae:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    28b2:	e011      	b.n	28d8 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    28b4:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    28b8:	d038      	beq.n	292c <uarte_nrfx_configure+0x140>
    28ba:	d808      	bhi.n	28ce <uarte_nrfx_configure+0xe2>
    28bc:	4f20      	ldr	r7, [pc, #128]	; (2940 <uarte_nrfx_configure+0x154>)
    28be:	42bb      	cmp	r3, r7
    28c0:	d037      	beq.n	2932 <uarte_nrfx_configure+0x146>
    28c2:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    28c6:	d1bd      	bne.n	2844 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    28c8:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    28cc:	e004      	b.n	28d8 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    28ce:	4f1d      	ldr	r7, [pc, #116]	; (2944 <uarte_nrfx_configure+0x158>)
    28d0:	42bb      	cmp	r3, r7
    28d2:	d1b7      	bne.n	2844 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    28d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    28d8:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    28dc:	6903      	ldr	r3, [r0, #16]
    28de:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    28e0:	4334      	orrs	r4, r6
    28e2:	4322      	orrs	r2, r4
    28e4:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    28e6:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    28ea:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    28ee:	2000      	movs	r0, #0
}
    28f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    28f2:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    28f6:	e7ef      	b.n	28d8 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    28f8:	4b13      	ldr	r3, [pc, #76]	; (2948 <uarte_nrfx_configure+0x15c>)
    28fa:	e7ed      	b.n	28d8 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    28fc:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    2900:	e7ea      	b.n	28d8 <uarte_nrfx_configure+0xec>
		nrf_baudrate = 0x00014000;
    2902:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    2906:	e7e7      	b.n	28d8 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    2908:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    290c:	e7e4      	b.n	28d8 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    290e:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    2912:	e7e1      	b.n	28d8 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    2914:	4b0d      	ldr	r3, [pc, #52]	; (294c <uarte_nrfx_configure+0x160>)
    2916:	e7df      	b.n	28d8 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    2918:	4b0d      	ldr	r3, [pc, #52]	; (2950 <uarte_nrfx_configure+0x164>)
    291a:	e7dd      	b.n	28d8 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    291c:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    2920:	e7da      	b.n	28d8 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    2922:	4b0c      	ldr	r3, [pc, #48]	; (2954 <uarte_nrfx_configure+0x168>)
    2924:	e7d8      	b.n	28d8 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    2926:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    292a:	e7d5      	b.n	28d8 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    292c:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    2930:	e7d2      	b.n	28d8 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    2932:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    2936:	e7cf      	b.n	28d8 <uarte_nrfx_configure+0xec>
    2938:	0013b000 	.word	0x0013b000
    293c:	004ea000 	.word	0x004ea000
    2940:	0003d090 	.word	0x0003d090
    2944:	000f4240 	.word	0x000f4240
    2948:	00275000 	.word	0x00275000
    294c:	0075c000 	.word	0x0075c000
    2950:	003af000 	.word	0x003af000
    2954:	013a9000 	.word	0x013a9000

00002958 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    2958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return dev->data;
    295a:	6906      	ldr	r6, [r0, #16]
{
    295c:	4605      	mov	r5, r0
    295e:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2960:	f003 fae8 	bl	5f34 <k_is_in_isr>
    2964:	b910      	cbnz	r0, 296c <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    2966:	4b2c      	ldr	r3, [pc, #176]	; (2a18 <uarte_nrfx_poll_out+0xc0>)
	int key;

	if (isr_mode) {
    2968:	781b      	ldrb	r3, [r3, #0]
    296a:	b983      	cbnz	r3, 298e <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    296c:	f04f 0320 	mov.w	r3, #32
    2970:	f3ef 8411 	mrs	r4, BASEPRI
    2974:	f383 8812 	msr	BASEPRI_MAX, r3
    2978:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    297c:	6868      	ldr	r0, [r5, #4]
    297e:	f003 f9b1 	bl	5ce4 <is_tx_ready.isra.0>
    2982:	bb28      	cbnz	r0, 29d0 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    2984:	f384 8811 	msr	BASEPRI, r4
    2988:	f3bf 8f6f 	isb	sy
}
    298c:	e7ee      	b.n	296c <uarte_nrfx_poll_out+0x14>
{
    298e:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    2990:	6868      	ldr	r0, [r5, #4]
    2992:	f003 f9a7 	bl	5ce4 <is_tx_ready.isra.0>
    2996:	b970      	cbnz	r0, 29b6 <uarte_nrfx_poll_out+0x5e>
    2998:	2001      	movs	r0, #1
    299a:	f003 f9fc 	bl	5d96 <nrfx_busy_wait>
    299e:	3c01      	subs	r4, #1
    29a0:	d1f6      	bne.n	2990 <uarte_nrfx_poll_out+0x38>
	return z_impl_k_sleep(timeout);
    29a2:	2100      	movs	r1, #0
    29a4:	2021      	movs	r0, #33	; 0x21
    29a6:	f002 fae3 	bl	4f70 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    29aa:	e7f0      	b.n	298e <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    29ac:	f384 8811 	msr	BASEPRI, r4
    29b0:	f3bf 8f6f 	isb	sy
}
    29b4:	e7f5      	b.n	29a2 <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    29b6:	f04f 0320 	mov.w	r3, #32
    29ba:	f3ef 8411 	mrs	r4, BASEPRI
    29be:	f383 8812 	msr	BASEPRI_MAX, r3
    29c2:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    29c6:	6868      	ldr	r0, [r5, #4]
    29c8:	f003 f98c 	bl	5ce4 <is_tx_ready.isra.0>
    29cc:	2800      	cmp	r0, #0
    29ce:	d0ed      	beq.n	29ac <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
    29d0:	f806 7f10 	strb.w	r7, [r6, #16]!
	tx_start(dev, &data->char_out, 1);
    29d4:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
    29d6:	680b      	ldr	r3, [r1, #0]
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
    29d8:	2201      	movs	r2, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    29da:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    29de:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    29e2:	2200      	movs	r2, #0
    29e4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    29e8:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    29ec:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    29f0:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    29f4:	684a      	ldr	r2, [r1, #4]
    29f6:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    29f8:	bf41      	itttt	mi
    29fa:	2208      	movmi	r2, #8
    29fc:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    2a00:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    2a04:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2a08:	2201      	movs	r2, #1
    2a0a:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    2a0c:	f384 8811 	msr	BASEPRI, r4
    2a10:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    2a14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2a16:	bf00      	nop
    2a18:	20000322 	.word	0x20000322

00002a1c <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    2a1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2a1e:	4607      	mov	r7, r0
    2a20:	2200      	movs	r2, #0
    2a22:	2101      	movs	r1, #1
    2a24:	2002      	movs	r0, #2
    2a26:	f7fe fd43 	bl	14b0 <z_arm_irq_priority_set>
    2a2a:	2002      	movs	r0, #2
    2a2c:	f7fe fd22 	bl	1474 <arch_irq_enable>
	return dev->config;
    2a30:	687d      	ldr	r5, [r7, #4]
	return dev->data;
    2a32:	693e      	ldr	r6, [r7, #16]
	return config->uarte_regs;
    2a34:	682c      	ldr	r4, [r5, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    2a36:	2300      	movs	r3, #0
    2a38:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2a3c:	a801      	add	r0, sp, #4
    2a3e:	68ab      	ldr	r3, [r5, #8]
	data->dev = dev;
    2a40:	6037      	str	r7, [r6, #0]
        nrf_gpio_pin_set(pin_number);
    2a42:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2a44:	f7ff fe9a 	bl	277c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2a48:	9a01      	ldr	r2, [sp, #4]
    2a4a:	2301      	movs	r3, #1
    2a4c:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    2a4e:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
    2a52:	68ab      	ldr	r3, [r5, #8]
    2a54:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2a56:	a801      	add	r0, sp, #4
    2a58:	f7ff fe90 	bl	277c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    2a5c:	9b01      	ldr	r3, [sp, #4]
    2a5e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    2a62:	2203      	movs	r2, #3
    2a64:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	if (cfg->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
    2a68:	68e8      	ldr	r0, [r5, #12]
    2a6a:	1c42      	adds	r2, r0, #1
    2a6c:	d002      	beq.n	2a74 <uarte_0_init+0x58>
		nrf_gpio_cfg_input(cfg->pselrxd, cfg->rxd_pull);
    2a6e:	7e29      	ldrb	r1, [r5, #24]
    2a70:	f003 f92a 	bl	5cc8 <nrf_gpio_cfg_input>
	nrf_uarte_txrx_pins_set(uarte, cfg->pseltxd, cfg->pselrxd);
    2a74:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
	if (cfg->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
    2a78:	6928      	ldr	r0, [r5, #16]
    p_reg->PSEL.TXD = pseltxd;
    2a7a:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    2a7e:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
    2a82:	1c43      	adds	r3, r0, #1
    2a84:	d002      	beq.n	2a8c <uarte_0_init+0x70>
		nrf_gpio_cfg_input(cfg->pselcts, cfg->cts_pull);
    2a86:	7e69      	ldrb	r1, [r5, #25]
    2a88:	f003 f91e 	bl	5cc8 <nrf_gpio_cfg_input>
	if (cfg->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
    2a8c:	696b      	ldr	r3, [r5, #20]
    2a8e:	1c58      	adds	r0, r3, #1
    2a90:	d013      	beq.n	2aba <uarte_0_init+0x9e>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2a92:	a801      	add	r0, sp, #4
    2a94:	9301      	str	r3, [sp, #4]
    2a96:	f7ff fe71 	bl	277c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2a9a:	9a01      	ldr	r2, [sp, #4]
    2a9c:	2301      	movs	r3, #1
    2a9e:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    2aa0:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
    2aa4:	696b      	ldr	r3, [r5, #20]
    2aa6:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2aa8:	a801      	add	r0, sp, #4
    2aaa:	f7ff fe67 	bl	277c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    2aae:	9b01      	ldr	r3, [sp, #4]
    2ab0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    2ab4:	2203      	movs	r2, #3
    2ab6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	nrf_uarte_hwfc_pins_set(uarte, cfg->pselrts, cfg->pselcts);
    2aba:	e9d5 3204 	ldrd	r3, r2, [r5, #16]
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    2abe:	6939      	ldr	r1, [r7, #16]
    p_reg->PSEL.RTS = pselrts;
    2ac0:	f8c4 2508 	str.w	r2, [r4, #1288]	; 0x508
    2ac4:	4638      	mov	r0, r7
    p_reg->PSEL.CTS = pselcts;
    2ac6:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    2aca:	3104      	adds	r1, #4
    2acc:	f7ff fe8e 	bl	27ec <uarte_nrfx_configure>
	if (err) {
    2ad0:	4607      	mov	r7, r0
    2ad2:	2800      	cmp	r0, #0
    2ad4:	d145      	bne.n	2b62 <uarte_0_init+0x146>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    2ad6:	686b      	ldr	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    2ad8:	0719      	lsls	r1, r3, #28
    2ada:	d519      	bpl.n	2b10 <uarte_0_init+0xf4>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    2adc:	f106 0012 	add.w	r0, r6, #18
    2ae0:	f000 fbfe 	bl	32e0 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    2ae4:	4b22      	ldr	r3, [pc, #136]	; (2b70 <uarte_0_init+0x154>)
    2ae6:	4298      	cmp	r0, r3
    2ae8:	d13e      	bne.n	2b68 <uarte_0_init+0x14c>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    2aea:	7cb0      	ldrb	r0, [r6, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    2aec:	00c3      	lsls	r3, r0, #3
    2aee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2af2:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    2af6:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    2afa:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    2afe:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    2b02:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    2b06:	4a1b      	ldr	r2, [pc, #108]	; (2b74 <uarte_0_init+0x158>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    2b08:	2301      	movs	r3, #1
    2b0a:	4083      	lsls	r3, r0
    2b0c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    2b10:	2308      	movs	r3, #8
    2b12:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (cfg->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
    2b16:	68eb      	ldr	r3, [r5, #12]
    2b18:	3301      	adds	r3, #1
    2b1a:	d00c      	beq.n	2b36 <uarte_0_init+0x11a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2b1c:	2300      	movs	r3, #0
    2b1e:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    2b22:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    2b26:	f106 0311 	add.w	r3, r6, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    2b2a:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    2b2e:	2301      	movs	r3, #1
    2b30:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2b34:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    2b36:	686b      	ldr	r3, [r5, #4]
    2b38:	071a      	lsls	r2, r3, #28
    p_reg->INTENSET = mask;
    2b3a:	bf5c      	itt	pl
    2b3c:	f44f 7280 	movpl.w	r2, #256	; 0x100
    2b40:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    2b44:	06db      	lsls	r3, r3, #27
    2b46:	bf44      	itt	mi
    2b48:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    2b4c:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    2b50:	3610      	adds	r6, #16
    p_reg->TXD.MAXCNT = length;
    2b52:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    2b54:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    2b58:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2b5c:	2301      	movs	r3, #1
    2b5e:	60a3      	str	r3, [r4, #8]
    2b60:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
    2b62:	4638      	mov	r0, r7
    2b64:	b003      	add	sp, #12
    2b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EIO;
    2b68:	f06f 0704 	mvn.w	r7, #4
UART_NRF_UARTE_DEVICE(0);
    2b6c:	e7f9      	b.n	2b62 <uarte_0_init+0x146>
    2b6e:	bf00      	nop
    2b70:	0bad0000 	.word	0x0bad0000
    2b74:	4001f000 	.word	0x4001f000

00002b78 <sys_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
    2b78:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
    2b7a:	4c06      	ldr	r4, [pc, #24]	; (2b94 <sys_clock_isr+0x1c>)
    2b7c:	4906      	ldr	r1, [pc, #24]	; (2b98 <sys_clock_isr+0x20>)
    2b7e:	4807      	ldr	r0, [pc, #28]	; (2b9c <sys_clock_isr+0x24>)
    2b80:	4622      	mov	r2, r4
    2b82:	2317      	movs	r3, #23
    2b84:	f002 fe24 	bl	57d0 <printk>
    2b88:	4620      	mov	r0, r4
    2b8a:	2117      	movs	r1, #23
}
    2b8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
    2b90:	f002 bee5 	b.w	595e <assert_post_action>
    2b94:	00006af1 	.word	0x00006af1
    2b98:	0000648f 	.word	0x0000648f
    2b9c:	00006321 	.word	0x00006321

00002ba0 <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(int32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    2ba0:	4a04      	ldr	r2, [pc, #16]	; (2bb4 <sys_clock_timeout_handler+0x14>)
    2ba2:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    2ba4:	1ac8      	subs	r0, r1, r3
    2ba6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    2baa:	4403      	add	r3, r0
    2bac:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    2bae:	f002 bce5 	b.w	557c <sys_clock_announce>
    2bb2:	bf00      	nop
    2bb4:	20000240 	.word	0x20000240

00002bb8 <set_absolute_alarm>:
{
    2bb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2bbc:	0086      	lsls	r6, r0, #2
    2bbe:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    2bc2:	f100 0450 	add.w	r4, r0, #80	; 0x50
    2bc6:	f506 3688 	add.w	r6, r6, #69632	; 0x11000
    2bca:	00a4      	lsls	r4, r4, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_rtc_event_clear(NRF_RTC_Type * p_reg, nrf_rtc_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2bcc:	b2a4      	uxth	r4, r4
    2bce:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2bd2:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    return p_reg->CC[ch];
    2bd6:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    2bda:	f8df 806c 	ldr.w	r8, [pc, #108]	; 2c48 <set_absolute_alarm+0x90>
	uint32_t cc_val = abs_val & COUNTER_MAX;
    2bde:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2be2:	f504 3488 	add.w	r4, r4, #69632	; 0x11000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2be6:	4087      	lsls	r7, r0
     return p_reg->COUNTER;
    2be8:	f8d8 9504 	ldr.w	r9, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    2bec:	eba3 0309 	sub.w	r3, r3, r9
    2bf0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    2bf4:	f029 427f 	bic.w	r2, r9, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    2bf8:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
    2bfa:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
    2bfe:	d102      	bne.n	2c06 <set_absolute_alarm+0x4e>
	z_impl_k_busy_wait(usec_to_wait);
    2c00:	2013      	movs	r0, #19
    2c02:	f003 f9c4 	bl	5f8e <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    2c06:	f109 0202 	add.w	r2, r9, #2
	return (a - b) & COUNTER_MAX;
    2c0a:	1aab      	subs	r3, r5, r2
    2c0c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
    2c10:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    2c14:	bf88      	it	hi
    2c16:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2c18:	2300      	movs	r3, #0
    2c1a:	6023      	str	r3, [r4, #0]
    2c1c:	6823      	ldr	r3, [r4, #0]
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    2c1e:	f8c8 7344 	str.w	r7, [r8, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    2c22:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    2c26:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
    2c2a:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    2c2e:	4599      	cmp	r9, r3
    2c30:	d006      	beq.n	2c40 <set_absolute_alarm+0x88>
	return (a - b) & COUNTER_MAX;
    2c32:	1aeb      	subs	r3, r5, r3
    2c34:	3b02      	subs	r3, #2
    2c36:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    2c3a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    2c3e:	d801      	bhi.n	2c44 <set_absolute_alarm+0x8c>
}
    2c40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		prev_cc = cc_val;
    2c44:	462b      	mov	r3, r5
    2c46:	e7cf      	b.n	2be8 <set_absolute_alarm+0x30>
    2c48:	40011000 	.word	0x40011000

00002c4c <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    2c4c:	b570      	push	{r4, r5, r6, lr}
    2c4e:	4d15      	ldr	r5, [pc, #84]	; (2ca4 <rtc_nrf_isr+0x58>)
    return p_reg->INTENSET & mask;
    2c50:	4c15      	ldr	r4, [pc, #84]	; (2ca8 <rtc_nrf_isr+0x5c>)
	ARG_UNUSED(arg);

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    2c52:	2600      	movs	r6, #0
    2c54:	682b      	ldr	r3, [r5, #0]
    2c56:	2000      	movs	r0, #0
    2c58:	b106      	cbz	r6, 2c5c <rtc_nrf_isr+0x10>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
    2c5a:	bd70      	pop	{r4, r5, r6, pc}
    2c5c:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    2c60:	03d2      	lsls	r2, r2, #15
    2c62:	d5fa      	bpl.n	2c5a <rtc_nrf_isr+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2c64:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
    2c68:	2a00      	cmp	r2, #0
    2c6a:	d0f6      	beq.n	2c5a <rtc_nrf_isr+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2c6c:	f8c4 6140 	str.w	r6, [r4, #320]	; 0x140
    2c70:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    2c74:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    2c78:	f8c4 2348 	str.w	r2, [r4, #840]	; 0x348
    return p_reg->CC[ch];
    2c7c:	f8d4 1540 	ldr.w	r1, [r4, #1344]	; 0x540
     return p_reg->COUNTER;
    2c80:	f8d4 6504 	ldr.w	r6, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    2c84:	1a72      	subs	r2, r6, r1
    2c86:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
				cc_val = now;
    2c8a:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    2c8e:	bf88      	it	hi
    2c90:	4631      	movhi	r1, r6
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    2c92:	2601      	movs	r6, #1
			if (handler) {
    2c94:	b11b      	cbz	r3, 2c9e <rtc_nrf_isr+0x52>
				handler(chan, cc_val,
    2c96:	686a      	ldr	r2, [r5, #4]
    2c98:	6028      	str	r0, [r5, #0]
    2c9a:	4798      	blx	r3
    2c9c:	e7da      	b.n	2c54 <rtc_nrf_isr+0x8>
    2c9e:	602b      	str	r3, [r5, #0]
}
    2ca0:	e7db      	b.n	2c5a <rtc_nrf_isr+0xe>
    2ca2:	bf00      	nop
    2ca4:	20000234 	.word	0x20000234
    2ca8:	40011000 	.word	0x40011000

00002cac <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
    2cac:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    2cae:	4c0f      	ldr	r4, [pc, #60]	; (2cec <sys_clock_driver_init+0x40>)
    2cb0:	2500      	movs	r5, #0
    p_reg->INTENSET = mask;
    2cb2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
    2cb6:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    p_reg->INTENSET = mask;
    2cba:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    2cbe:	4b0c      	ldr	r3, [pc, #48]	; (2cf0 <sys_clock_driver_init+0x44>)
    2cc0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    2cc4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    2cc8:	2101      	movs	r1, #1
    2cca:	462a      	mov	r2, r5
    2ccc:	2011      	movs	r0, #17
    2cce:	f7fe fbef 	bl	14b0 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    2cd2:	2011      	movs	r0, #17
    2cd4:	f7fe fbce 	bl	1474 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    2cd8:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    2cda:	4a06      	ldr	r2, [pc, #24]	; (2cf4 <sys_clock_driver_init+0x48>)
    2cdc:	60a3      	str	r3, [r4, #8]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    2cde:	2002      	movs	r0, #2
    2ce0:	6023      	str	r3, [r4, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
    2ce2:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
    2ce4:	f7ff f928 	bl	1f38 <z_nrf_clock_control_lf_on>

	return 0;
}
    2ce8:	4628      	mov	r0, r5
    2cea:	bd38      	pop	{r3, r4, r5, pc}
    2cec:	40011000 	.word	0x40011000
    2cf0:	e000e100 	.word	0xe000e100
    2cf4:	2000023c 	.word	0x2000023c

00002cf8 <sys_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    2cf8:	4a13      	ldr	r2, [pc, #76]	; (2d48 <sys_clock_set_timeout+0x50>)
    2cfa:	f1b0 3fff 	cmp.w	r0, #4294967295
    2cfe:	bf14      	ite	ne
    2d00:	4603      	movne	r3, r0
    2d02:	4613      	moveq	r3, r2
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    2d04:	3b01      	subs	r3, #1
    2d06:	2b00      	cmp	r3, #0
    2d08:	dd1c      	ble.n	2d44 <sys_clock_set_timeout+0x4c>
    2d0a:	4293      	cmp	r3, r2
    2d0c:	bfa8      	it	ge
    2d0e:	4613      	movge	r3, r2
     return p_reg->COUNTER;
    2d10:	4a0e      	ldr	r2, [pc, #56]	; (2d4c <sys_clock_set_timeout+0x54>)
    2d12:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
    2d16:	4a0e      	ldr	r2, [pc, #56]	; (2d50 <sys_clock_set_timeout+0x58>)
    2d18:	6811      	ldr	r1, [r2, #0]
	return (a - b) & COUNTER_MAX;
    2d1a:	1a40      	subs	r0, r0, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
    2d1c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
	return (a - b) & COUNTER_MAX;
    2d20:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
		ticks = 0;
    2d24:	bf18      	it	ne
    2d26:	2300      	movne	r3, #0
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    2d28:	3201      	adds	r2, #1
    2d2a:	4413      	add	r3, r2
	cc_data[chan].callback = handler;
    2d2c:	4a09      	ldr	r2, [pc, #36]	; (2d54 <sys_clock_set_timeout+0x5c>)
    2d2e:	480a      	ldr	r0, [pc, #40]	; (2d58 <sys_clock_set_timeout+0x60>)
    2d30:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
    2d32:	2000      	movs	r0, #0
    2d34:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
    2d36:	4a04      	ldr	r2, [pc, #16]	; (2d48 <sys_clock_set_timeout+0x50>)
    2d38:	4293      	cmp	r3, r2
    2d3a:	bf94      	ite	ls
    2d3c:	18c9      	addls	r1, r1, r3
    2d3e:	1889      	addhi	r1, r1, r2
    2d40:	f7ff bf3a 	b.w	2bb8 <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    2d44:	2300      	movs	r3, #0
    2d46:	e7e3      	b.n	2d10 <sys_clock_set_timeout+0x18>
    2d48:	007fffff 	.word	0x007fffff
    2d4c:	40011000 	.word	0x40011000
    2d50:	20000240 	.word	0x20000240
    2d54:	20000234 	.word	0x20000234
    2d58:	00002ba1 	.word	0x00002ba1

00002d5c <sys_clock_elapsed>:
    2d5c:	4b04      	ldr	r3, [pc, #16]	; (2d70 <sys_clock_elapsed+0x14>)
    2d5e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
{
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return counter_sub(counter(), last_count) / CYC_PER_TICK;
    2d62:	4b04      	ldr	r3, [pc, #16]	; (2d74 <sys_clock_elapsed+0x18>)
	return (a - b) & COUNTER_MAX;
    2d64:	681b      	ldr	r3, [r3, #0]
    2d66:	1ac0      	subs	r0, r0, r3
}
    2d68:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2d6c:	4770      	bx	lr
    2d6e:	bf00      	nop
    2d70:	40011000 	.word	0x40011000
    2d74:	20000240 	.word	0x20000240

00002d78 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
    2d78:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2d7c:	4905      	ldr	r1, [pc, #20]	; (2d94 <__NVIC_SystemReset+0x1c>)
    2d7e:	4b06      	ldr	r3, [pc, #24]	; (2d98 <__NVIC_SystemReset+0x20>)
    2d80:	68ca      	ldr	r2, [r1, #12]
    2d82:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2d86:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2d88:	60cb      	str	r3, [r1, #12]
    2d8a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    2d8e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2d90:	e7fd      	b.n	2d8e <__NVIC_SystemReset+0x16>
    2d92:	bf00      	nop
    2d94:	e000ed00 	.word	0xe000ed00
    2d98:	05fa0004 	.word	0x05fa0004

00002d9c <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    2d9c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    2da0:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    2da4:	2a08      	cmp	r2, #8
    2da6:	d106      	bne.n	2db6 <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    2da8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
    2dac:	2b05      	cmp	r3, #5
    2dae:	d802      	bhi.n	2db6 <nrf52_errata_103+0x1a>
    2db0:	4a02      	ldr	r2, [pc, #8]	; (2dbc <nrf52_errata_103+0x20>)
    2db2:	5cd0      	ldrb	r0, [r2, r3]
    2db4:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
    2db6:	2000      	movs	r0, #0
    #endif
}
    2db8:	4770      	bx	lr
    2dba:	bf00      	nop
    2dbc:	00006b33 	.word	0x00006b33

00002dc0 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    2dc0:	4a02      	ldr	r2, [pc, #8]	; (2dcc <nvmc_wait+0xc>)
    2dc2:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    2dc6:	2b00      	cmp	r3, #0
    2dc8:	d0fb      	beq.n	2dc2 <nvmc_wait+0x2>
}
    2dca:	4770      	bx	lr
    2dcc:	4001e000 	.word	0x4001e000

00002dd0 <SystemInit>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    2dd0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    2dd4:	b510      	push	{r4, lr}
            if (var1 == 0x0E)
    2dd6:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    2dda:	2a0e      	cmp	r2, #14

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    2ddc:	bf01      	itttt	eq
    2dde:	f8d3 3244 	ldreq.w	r3, [r3, #580]	; 0x244
    2de2:	f04f 4280 	moveq.w	r2, #1073741824	; 0x40000000
    2de6:	f3c3 3342 	ubfxeq	r3, r3, #13, #3
    2dea:	f8c2 353c 	streq.w	r3, [r2, #1340]	; 0x53c
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    2dee:	f002 ffc4 	bl	5d7a <nrf52_errata_136>
    2df2:	b140      	cbz	r0, 2e06 <SystemInit+0x36>
            NRF_CLOCK->EVENTS_DONE = 0;
    2df4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2df8:	2200      	movs	r2, #0
    2dfa:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    2dfe:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    2e02:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    2e06:	f002 ffb8 	bl	5d7a <nrf52_errata_136>
    2e0a:	2800      	cmp	r0, #0
    2e0c:	d046      	beq.n	2e9c <SystemInit+0xcc>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    2e0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    2e12:	4b6a      	ldr	r3, [pc, #424]	; (2fbc <SystemInit+0x1ec>)
    2e14:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    2e18:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    2e1c:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    2e20:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    2e24:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    2e28:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    2e2c:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    2e30:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    2e34:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    2e38:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    2e3c:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    2e40:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    2e44:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    2e48:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    2e4c:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    2e50:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    2e54:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    2e58:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    2e5c:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    2e60:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    2e64:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    2e68:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    2e6c:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    2e70:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    2e74:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    2e78:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    2e7c:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    2e80:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    2e84:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    2e88:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    2e8c:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    2e90:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    2e94:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    2e98:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    2e9c:	f7ff ff7e 	bl	2d9c <nrf52_errata_103>
    2ea0:	b118      	cbz	r0, 2eaa <SystemInit+0xda>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    2ea2:	4b47      	ldr	r3, [pc, #284]	; (2fc0 <SystemInit+0x1f0>)
    2ea4:	4a47      	ldr	r2, [pc, #284]	; (2fc4 <SystemInit+0x1f4>)
    2ea6:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    2eaa:	f7ff ff77 	bl	2d9c <nrf52_errata_103>
    2eae:	b118      	cbz	r0, 2eb8 <SystemInit+0xe8>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    2eb0:	4b45      	ldr	r3, [pc, #276]	; (2fc8 <SystemInit+0x1f8>)
    2eb2:	22fb      	movs	r2, #251	; 0xfb
    2eb4:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    2eb8:	f7ff ff70 	bl	2d9c <nrf52_errata_103>
    2ebc:	b170      	cbz	r0, 2edc <SystemInit+0x10c>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    2ebe:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    2ec2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    2ec6:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
    2eca:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    2ece:	f022 020f 	bic.w	r2, r2, #15
    2ed2:	f003 030f 	and.w	r3, r3, #15
    2ed6:	4313      	orrs	r3, r2
    2ed8:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    2edc:	f7ff ff5e 	bl	2d9c <nrf52_errata_103>
    2ee0:	b120      	cbz	r0, 2eec <SystemInit+0x11c>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    2ee2:	4b3a      	ldr	r3, [pc, #232]	; (2fcc <SystemInit+0x1fc>)
    2ee4:	f44f 7200 	mov.w	r2, #512	; 0x200
    2ee8:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    2eec:	f002 ff45 	bl	5d7a <nrf52_errata_136>
    2ef0:	b148      	cbz	r0, 2f06 <SystemInit+0x136>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    2ef2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2ef6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    2efa:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    2efc:	bf44      	itt	mi
    2efe:	f06f 0201 	mvnmi.w	r2, #1
    2f02:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    2f06:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x0E)
    2f0a:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    2f0e:	2b0e      	cmp	r3, #14

    #if NRF52_ERRATA_217_ENABLE_WORKAROUND
        /* Workaround for Errata 217 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_217()){
            *(volatile uint32_t *)0x40000EE4ul |= 0x0000000Ful;
    2f10:	bf01      	itttt	eq
    2f12:	f04f 4280 	moveq.w	r2, #1073741824	; 0x40000000
    2f16:	f8d2 3ee4 	ldreq.w	r3, [r2, #3812]	; 0xee4
    2f1a:	f043 030f 	orreq.w	r3, r3, #15
    2f1e:	f8c2 3ee4 	streq.w	r3, [r2, #3812]	; 0xee4
        #if defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    2f22:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    2f26:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    2f2a:	2a08      	cmp	r2, #8
    2f2c:	d10e      	bne.n	2f4c <SystemInit+0x17c>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    2f2e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
    2f32:	2b05      	cmp	r3, #5
    2f34:	d802      	bhi.n	2f3c <SystemInit+0x16c>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_errata_249())
    2f36:	4a26      	ldr	r2, [pc, #152]	; (2fd0 <SystemInit+0x200>)
    2f38:	5cd3      	ldrb	r3, [r2, r3]
    2f3a:	b13b      	cbz	r3, 2f4c <SystemInit+0x17c>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    2f3c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    2f40:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    2f44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2f48:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    2f4c:	f04f 2110 	mov.w	r1, #268439552	; 0x10001000
    2f50:	f8d1 3200 	ldr.w	r3, [r1, #512]	; 0x200
    2f54:	2b00      	cmp	r3, #0
    2f56:	db03      	blt.n	2f60 <SystemInit+0x190>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    2f58:	f8d1 3204 	ldr.w	r3, [r1, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    2f5c:	2b00      	cmp	r3, #0
    2f5e:	da17      	bge.n	2f90 <SystemInit+0x1c0>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    2f60:	491c      	ldr	r1, [pc, #112]	; (2fd4 <SystemInit+0x204>)
    2f62:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    2f64:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    2f68:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    2f6c:	2412      	movs	r4, #18
    nvmc_wait();
    2f6e:	f7ff ff27 	bl	2dc0 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    2f72:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    2f76:	f7ff ff23 	bl	2dc0 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    2f7a:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    2f7e:	f7ff ff1f 	bl	2dc0 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    2f82:	2300      	movs	r3, #0
    2f84:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    2f88:	f7ff ff1a 	bl	2dc0 <nvmc_wait>
        if ((*((uint32_t *)0x1000120C) & (1 << 0)) != 0){
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            *((uint32_t *)0x1000120C) = 0;
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
    2f8c:	f7ff fef4 	bl	2d78 <__NVIC_SystemReset>
        if ((*((uint32_t *)0x1000120C) & (1 << 0)) != 0){
    2f90:	f8d1 320c 	ldr.w	r3, [r1, #524]	; 0x20c
    2f94:	07db      	lsls	r3, r3, #31
    2f96:	d50d      	bpl.n	2fb4 <SystemInit+0x1e4>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    2f98:	480e      	ldr	r0, [pc, #56]	; (2fd4 <SystemInit+0x204>)
    2f9a:	2301      	movs	r3, #1
    2f9c:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
            *((uint32_t *)0x1000120C) = 0;
    2fa0:	2400      	movs	r4, #0
    nvmc_wait();
    2fa2:	f7ff ff0d 	bl	2dc0 <nvmc_wait>
            *((uint32_t *)0x1000120C) = 0;
    2fa6:	f8c1 420c 	str.w	r4, [r1, #524]	; 0x20c
            nvmc_wait();
    2faa:	f7ff ff09 	bl	2dc0 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    2fae:	f8c0 4504 	str.w	r4, [r0, #1284]	; 0x504
    2fb2:	e7e9      	b.n	2f88 <SystemInit+0x1b8>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    2fb4:	4b08      	ldr	r3, [pc, #32]	; (2fd8 <SystemInit+0x208>)
    2fb6:	4a09      	ldr	r2, [pc, #36]	; (2fdc <SystemInit+0x20c>)
    2fb8:	601a      	str	r2, [r3, #0]
        }
    #endif

    SystemCoreClockUpdate();
}
    2fba:	bd10      	pop	{r4, pc}
    2fbc:	4000c000 	.word	0x4000c000
    2fc0:	40005000 	.word	0x40005000
    2fc4:	00038148 	.word	0x00038148
    2fc8:	4000f000 	.word	0x4000f000
    2fcc:	40029000 	.word	0x40029000
    2fd0:	00006b2d 	.word	0x00006b2d
    2fd4:	4001e000 	.word	0x4001e000
    2fd8:	20000048 	.word	0x20000048
    2fdc:	03d09000 	.word	0x03d09000

00002fe0 <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    2fe0:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
    2fe2:	4604      	mov	r4, r0
    2fe4:	b948      	cbnz	r0, 2ffa <nrfx_clock_init+0x1a>
    2fe6:	490a      	ldr	r1, [pc, #40]	; (3010 <nrfx_clock_init+0x30>)
    2fe8:	480a      	ldr	r0, [pc, #40]	; (3014 <nrfx_clock_init+0x34>)
    2fea:	4a0b      	ldr	r2, [pc, #44]	; (3018 <nrfx_clock_init+0x38>)
    2fec:	23b5      	movs	r3, #181	; 0xb5
    2fee:	f002 fbef 	bl	57d0 <printk>
    2ff2:	4809      	ldr	r0, [pc, #36]	; (3018 <nrfx_clock_init+0x38>)
    2ff4:	21b5      	movs	r1, #181	; 0xb5
    2ff6:	f002 fcb2 	bl	595e <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    2ffa:	4b08      	ldr	r3, [pc, #32]	; (301c <nrfx_clock_init+0x3c>)
    2ffc:	791a      	ldrb	r2, [r3, #4]
    2ffe:	b922      	cbnz	r2, 300a <nrfx_clock_init+0x2a>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    3000:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
    3002:	4807      	ldr	r0, [pc, #28]	; (3020 <nrfx_clock_init+0x40>)
        m_clock_cb.event_handler = event_handler;
    3004:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
    3006:	711a      	strb	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    3008:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    300a:	4806      	ldr	r0, [pc, #24]	; (3024 <nrfx_clock_init+0x44>)
    return err_code;
    300c:	e7fc      	b.n	3008 <nrfx_clock_init+0x28>
    300e:	bf00      	nop
    3010:	00006b76 	.word	0x00006b76
    3014:	00006321 	.word	0x00006321
    3018:	00006b39 	.word	0x00006b39
    301c:	20000244 	.word	0x20000244
    3020:	0bad0000 	.word	0x0bad0000
    3024:	0bad000c 	.word	0x0bad000c

00003028 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    3028:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    302a:	4b0b      	ldr	r3, [pc, #44]	; (3058 <nrfx_clock_enable+0x30>)
    302c:	791b      	ldrb	r3, [r3, #4]
    302e:	b94b      	cbnz	r3, 3044 <nrfx_clock_enable+0x1c>
    3030:	490a      	ldr	r1, [pc, #40]	; (305c <nrfx_clock_enable+0x34>)
    3032:	480b      	ldr	r0, [pc, #44]	; (3060 <nrfx_clock_enable+0x38>)
    3034:	4a0b      	ldr	r2, [pc, #44]	; (3064 <nrfx_clock_enable+0x3c>)
    3036:	23ce      	movs	r3, #206	; 0xce
    3038:	f002 fbca 	bl	57d0 <printk>
    303c:	4809      	ldr	r0, [pc, #36]	; (3064 <nrfx_clock_enable+0x3c>)
    303e:	21ce      	movs	r1, #206	; 0xce
    3040:	f002 fc8d 	bl	595e <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    3044:	2000      	movs	r0, #0
    3046:	f7fe fa25 	bl	1494 <arch_irq_is_enabled>
    304a:	b918      	cbnz	r0, 3054 <nrfx_clock_enable+0x2c>
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    304c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    3050:	f7fe ba10 	b.w	1474 <arch_irq_enable>
    3054:	bd08      	pop	{r3, pc}
    3056:	bf00      	nop
    3058:	20000244 	.word	0x20000244
    305c:	00006b84 	.word	0x00006b84
    3060:	00006321 	.word	0x00006321
    3064:	00006b39 	.word	0x00006b39

00003068 <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    3068:	4b24      	ldr	r3, [pc, #144]	; (30fc <nrfx_clock_start+0x94>)
    306a:	791b      	ldrb	r3, [r3, #4]
{
    306c:	b510      	push	{r4, lr}
    306e:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    3070:	b95b      	cbnz	r3, 308a <nrfx_clock_start+0x22>
    3072:	4923      	ldr	r1, [pc, #140]	; (3100 <nrfx_clock_start+0x98>)
    3074:	4823      	ldr	r0, [pc, #140]	; (3104 <nrfx_clock_start+0x9c>)
    3076:	4a24      	ldr	r2, [pc, #144]	; (3108 <nrfx_clock_start+0xa0>)
    3078:	f44f 7385 	mov.w	r3, #266	; 0x10a
    307c:	f002 fba8 	bl	57d0 <printk>
    3080:	4821      	ldr	r0, [pc, #132]	; (3108 <nrfx_clock_start+0xa0>)
    3082:	f44f 7185 	mov.w	r1, #266	; 0x10a
    3086:	f002 fc6a 	bl	595e <assert_post_action>
    switch (domain)
    308a:	b17c      	cbz	r4, 30ac <nrfx_clock_start+0x44>
    308c:	2c01      	cmp	r4, #1
    308e:	d02a      	beq.n	30e6 <nrfx_clock_start+0x7e>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    3090:	491e      	ldr	r1, [pc, #120]	; (310c <nrfx_clock_start+0xa4>)
    3092:	481c      	ldr	r0, [pc, #112]	; (3104 <nrfx_clock_start+0x9c>)
    3094:	4a1c      	ldr	r2, [pc, #112]	; (3108 <nrfx_clock_start+0xa0>)
    3096:	f44f 739e 	mov.w	r3, #316	; 0x13c
    309a:	f002 fb99 	bl	57d0 <printk>
            break;
    }
}
    309e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            NRFX_ASSERT(0);
    30a2:	4819      	ldr	r0, [pc, #100]	; (3108 <nrfx_clock_start+0xa0>)
    30a4:	f44f 719e 	mov.w	r1, #316	; 0x13c
    30a8:	f002 bc59 	b.w	595e <assert_post_action>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    30ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    30b0:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    30b4:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    30b8:	03c9      	lsls	r1, r1, #15
    30ba:	d512      	bpl.n	30e2 <nrfx_clock_start+0x7a>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    30bc:	f002 0203 	and.w	r2, r2, #3
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    30c0:	2a01      	cmp	r2, #1
    30c2:	d10e      	bne.n	30e2 <nrfx_clock_start+0x7a>
    p_reg->LFCLKSRC = (uint32_t)(source);
    30c4:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    30c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    30cc:	2200      	movs	r2, #0
    30ce:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    30d2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    30d6:	2202      	movs	r2, #2
    30d8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    30dc:	2201      	movs	r2, #1
    30de:	609a      	str	r2, [r3, #8]
}
    30e0:	bd10      	pop	{r4, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
    30e2:	2200      	movs	r2, #0
    30e4:	e7ee      	b.n	30c4 <nrfx_clock_start+0x5c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    30e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    30ea:	2200      	movs	r2, #0
    30ec:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    30f0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    30f4:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    30f8:	601c      	str	r4, [r3, #0]
}
    30fa:	e7f1      	b.n	30e0 <nrfx_clock_start+0x78>
    30fc:	20000244 	.word	0x20000244
    3100:	00006b84 	.word	0x00006b84
    3104:	00006321 	.word	0x00006321
    3108:	00006b39 	.word	0x00006b39
    310c:	0000648f 	.word	0x0000648f

00003110 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    3110:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    3112:	4b29      	ldr	r3, [pc, #164]	; (31b8 <nrfx_clock_stop+0xa8>)
    3114:	791b      	ldrb	r3, [r3, #4]
{
    3116:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    3118:	b95b      	cbnz	r3, 3132 <nrfx_clock_stop+0x22>
    311a:	4928      	ldr	r1, [pc, #160]	; (31bc <nrfx_clock_stop+0xac>)
    311c:	4828      	ldr	r0, [pc, #160]	; (31c0 <nrfx_clock_stop+0xb0>)
    311e:	4a29      	ldr	r2, [pc, #164]	; (31c4 <nrfx_clock_stop+0xb4>)
    3120:	f240 1343 	movw	r3, #323	; 0x143
    3124:	f002 fb54 	bl	57d0 <printk>
    3128:	4826      	ldr	r0, [pc, #152]	; (31c4 <nrfx_clock_stop+0xb4>)
    312a:	f240 1143 	movw	r1, #323	; 0x143
    312e:	f002 fc16 	bl	595e <assert_post_action>
    switch (domain)
    3132:	b17c      	cbz	r4, 3154 <nrfx_clock_stop+0x44>
    3134:	2c01      	cmp	r4, #1
    3136:	d024      	beq.n	3182 <nrfx_clock_stop+0x72>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    3138:	4923      	ldr	r1, [pc, #140]	; (31c8 <nrfx_clock_stop+0xb8>)
    313a:	4821      	ldr	r0, [pc, #132]	; (31c0 <nrfx_clock_stop+0xb0>)
    313c:	4a21      	ldr	r2, [pc, #132]	; (31c4 <nrfx_clock_stop+0xb4>)
    313e:	f240 135f 	movw	r3, #351	; 0x15f
    3142:	f002 fb45 	bl	57d0 <printk>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    3146:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            NRFX_ASSERT(0);
    314a:	481e      	ldr	r0, [pc, #120]	; (31c4 <nrfx_clock_stop+0xb4>)
    314c:	f240 115f 	movw	r1, #351	; 0x15f
    3150:	f002 bc05 	b.w	595e <assert_post_action>
    p_reg->INTENCLR = mask;
    3154:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    3158:	2302      	movs	r3, #2
    315a:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    315e:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
    3162:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3166:	2301      	movs	r3, #1
    3168:	60eb      	str	r3, [r5, #12]
    316a:	f242 7410 	movw	r4, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    316e:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
    3172:	03db      	lsls	r3, r3, #15
    3174:	d51f      	bpl.n	31b6 <nrfx_clock_stop+0xa6>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    3176:	2001      	movs	r0, #1
    3178:	f002 fe0d 	bl	5d96 <nrfx_busy_wait>
    317c:	3c01      	subs	r4, #1
    317e:	d1f6      	bne.n	316e <nrfx_clock_stop+0x5e>
    3180:	e019      	b.n	31b6 <nrfx_clock_stop+0xa6>
    p_reg->INTENCLR = mask;
    3182:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3186:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
    3188:	f8c5 4308 	str.w	r4, [r5, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    318c:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
    3190:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3194:	606c      	str	r4, [r5, #4]
    3196:	f242 7410 	movw	r4, #10000	; 0x2710
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    319a:	f8d5 340c 	ldr.w	r3, [r5, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    319e:	f8d5 240c 	ldr.w	r2, [r5, #1036]	; 0x40c
    31a2:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    31a4:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    31a8:	d505      	bpl.n	31b6 <nrfx_clock_stop+0xa6>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    31aa:	b123      	cbz	r3, 31b6 <nrfx_clock_stop+0xa6>
    31ac:	2001      	movs	r0, #1
    31ae:	f002 fdf2 	bl	5d96 <nrfx_busy_wait>
    31b2:	3c01      	subs	r4, #1
    31b4:	d1f1      	bne.n	319a <nrfx_clock_stop+0x8a>
}
    31b6:	bd38      	pop	{r3, r4, r5, pc}
    31b8:	20000244 	.word	0x20000244
    31bc:	00006b84 	.word	0x00006b84
    31c0:	00006321 	.word	0x00006321
    31c4:	00006b39 	.word	0x00006b39
    31c8:	0000648f 	.word	0x0000648f

000031cc <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    31cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    31d0:	b510      	push	{r4, lr}
    31d2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    31d6:	b152      	cbz	r2, 31ee <nrfx_power_clock_irq_handler+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    31d8:	2000      	movs	r0, #0
    31da:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    31de:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    31e2:	2201      	movs	r2, #1
    31e4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    31e8:	4b10      	ldr	r3, [pc, #64]	; (322c <nrfx_power_clock_irq_handler+0x60>)
    31ea:	681b      	ldr	r3, [r3, #0]
    31ec:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    31ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    31f2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    31f6:	b172      	cbz	r2, 3216 <nrfx_power_clock_irq_handler+0x4a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    31f8:	2200      	movs	r2, #0
    31fa:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    31fe:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3202:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3206:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    320a:	0792      	lsls	r2, r2, #30
    320c:	d104      	bne.n	3218 <nrfx_power_clock_irq_handler+0x4c>
    p_reg->LFCLKSRC = (uint32_t)(source);
    320e:	2201      	movs	r2, #1
    3210:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3214:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    3216:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    3218:	2202      	movs	r2, #2
    321a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    321e:	4b03      	ldr	r3, [pc, #12]	; (322c <nrfx_power_clock_irq_handler+0x60>)
}
    3220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    3224:	681b      	ldr	r3, [r3, #0]
    3226:	2001      	movs	r0, #1
    3228:	4718      	bx	r3
    322a:	bf00      	nop
    322c:	20000244 	.word	0x20000244

00003230 <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
    3230:	2301      	movs	r3, #1
    3232:	fa03 f000 	lsl.w	r0, r3, r0
    3236:	b2c3      	uxtb	r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
    3238:	b193      	cbz	r3, 3260 <nrfx_gpiote_channel_free+0x30>
	__asm__ volatile(
    323a:	f04f 0320 	mov.w	r3, #32
    323e:	f3ef 8111 	mrs	r1, BASEPRI
    3242:	f383 8812 	msr	BASEPRI_MAX, r3
    3246:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
    324a:	4a06      	ldr	r2, [pc, #24]	; (3264 <nrfx_gpiote_channel_free+0x34>)
    324c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
    324e:	ea23 0000 	bic.w	r0, r3, r0
    3252:	64d0      	str	r0, [r2, #76]	; 0x4c
	__asm__ volatile(
    3254:	f381 8811 	msr	BASEPRI, r1
    3258:	f3bf 8f6f 	isb	sy
    325c:	4802      	ldr	r0, [pc, #8]	; (3268 <nrfx_gpiote_channel_free+0x38>)
    325e:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
    3260:	4802      	ldr	r0, [pc, #8]	; (326c <nrfx_gpiote_channel_free+0x3c>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    3262:	4770      	bx	lr
    3264:	2000024c 	.word	0x2000024c
    3268:	0bad0000 	.word	0x0bad0000
    326c:	0bad0004 	.word	0x0bad0004

00003270 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
    3270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3274:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
    3276:	f8df e05c 	ldr.w	lr, [pc, #92]	; 32d4 <nrfx_gpiote_channel_alloc+0x64>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    327a:	4817      	ldr	r0, [pc, #92]	; (32d8 <nrfx_gpiote_channel_alloc+0x68>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
    327c:	f8df 805c 	ldr.w	r8, [pc, #92]	; 32dc <nrfx_gpiote_channel_alloc+0x6c>
{
    3280:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
    3282:	22ff      	movs	r2, #255	; 0xff
    return m_cb.allocated_channels_mask & (1UL << index);
    3284:	2601      	movs	r6, #1
    3286:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
    3288:	f04f 0120 	mov.w	r1, #32
    328c:	f3ef 8c11 	mrs	ip, BASEPRI
    3290:	f381 8812 	msr	BASEPRI_MAX, r1
    3294:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    3298:	fa22 f103 	lsr.w	r1, r2, r3
    329c:	07c9      	lsls	r1, r1, #31
    329e:	d50a      	bpl.n	32b6 <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
    32a0:	f8de 104c 	ldr.w	r1, [lr, #76]	; 0x4c
    32a4:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    32a8:	4239      	tst	r1, r7
    m_cb.allocated_channels_mask |= (1UL << index);
    32aa:	bf01      	itttt	eq
    32ac:	4339      	orreq	r1, r7
    32ae:	f8ce 104c 	streq.w	r1, [lr, #76]	; 0x4c
            err_code = NRFX_SUCCESS;
    32b2:	4640      	moveq	r0, r8
            *p_channel = ch_idx;
    32b4:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
    32b6:	f38c 8811 	msr	BASEPRI, ip
    32ba:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
    32be:	4540      	cmp	r0, r8
    32c0:	d005      	beq.n	32ce <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
    32c2:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    32c6:	439a      	bics	r2, r3
    32c8:	f104 0401 	add.w	r4, r4, #1
    32cc:	d1db      	bne.n	3286 <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    32ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    32d2:	bf00      	nop
    32d4:	2000024c 	.word	0x2000024c
    32d8:	0bad0002 	.word	0x0bad0002
    32dc:	0bad0000 	.word	0x0bad0000

000032e0 <nrfx_ppi_channel_alloc>:
    group_allocated_clr_all();
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    32e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
    32e4:	4a14      	ldr	r2, [pc, #80]	; (3338 <nrfx_ppi_channel_alloc+0x58>)
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
    32e6:	4e15      	ldr	r6, [pc, #84]	; (333c <nrfx_ppi_channel_alloc+0x5c>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
        {
            channel_allocated_set(channel);
            *p_channel = channel;
            err_code   = NRFX_SUCCESS;
    32e8:	4f15      	ldr	r7, [pc, #84]	; (3340 <nrfx_ppi_channel_alloc+0x60>)
{
    32ea:	4605      	mov	r5, r0
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    32ec:	4815      	ldr	r0, [pc, #84]	; (3344 <nrfx_ppi_channel_alloc+0x64>)
{
    32ee:	2400      	movs	r4, #0
NRFX_STATIC_INLINE uint32_t nrfx_ppi_task_addr_group_disable_get(nrf_ppi_channel_group_t group);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE uint32_t nrfx_ppi_channel_to_mask(nrf_ppi_channel_t channel)
{
    return (1uL << (uint32_t) channel);
    32f0:	f04f 0e01 	mov.w	lr, #1
    32f4:	fa5f fc84 	uxtb.w	ip, r4
	__asm__ volatile(
    32f8:	f04f 0320 	mov.w	r3, #32
    32fc:	f3ef 8811 	mrs	r8, BASEPRI
    3300:	f383 8812 	msr	BASEPRI_MAX, r3
    3304:	f3bf 8f6f 	isb	sy
    3308:	fa0e f30c 	lsl.w	r3, lr, ip
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
    330c:	4213      	tst	r3, r2
    330e:	d007      	beq.n	3320 <nrfx_ppi_channel_alloc+0x40>
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
    3310:	6831      	ldr	r1, [r6, #0]
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
    3312:	420b      	tst	r3, r1
    m_channels_allocated |= nrfx_ppi_channel_to_mask(channel);
    3314:	bf01      	itttt	eq
    3316:	4319      	orreq	r1, r3
    3318:	6031      	streq	r1, [r6, #0]
            *p_channel = channel;
    331a:	f885 c000 	strbeq.w	ip, [r5]
            err_code   = NRFX_SUCCESS;
    331e:	4638      	moveq	r0, r7
	__asm__ volatile(
    3320:	f388 8811 	msr	BASEPRI, r8
    3324:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();
        if (err_code == NRFX_SUCCESS)
    3328:	42b8      	cmp	r0, r7
    332a:	d003      	beq.n	3334 <nrfx_ppi_channel_alloc+0x54>
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
    332c:	439a      	bics	r2, r3
    332e:	f104 0401 	add.w	r4, r4, #1
    3332:	d1df      	bne.n	32f4 <nrfx_ppi_channel_alloc+0x14>
        mask &= ~nrfx_ppi_channel_to_mask(channel);
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    3334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3338:	000fffff 	.word	0x000fffff
    333c:	2000029c 	.word	0x2000029c
    3340:	0bad0000 	.word	0x0bad0000
    3344:	0bad0002 	.word	0x0bad0002

00003348 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3348:	6803      	ldr	r3, [r0, #0]
    switch (port)
    334a:	095a      	lsrs	r2, r3, #5
    334c:	bf0c      	ite	eq
    334e:	f04f 32ff 	moveq.w	r2, #4294967295
    3352:	2200      	movne	r2, #0
    pin_number &= 0x1F;
    3354:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
    3358:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    335c:	07db      	lsls	r3, r3, #31
{
    335e:	b510      	push	{r4, lr}
    3360:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3362:	d40b      	bmi.n	337c <nrf_gpio_pin_port_decode+0x34>
    3364:	4910      	ldr	r1, [pc, #64]	; (33a8 <nrf_gpio_pin_port_decode+0x60>)
    3366:	4811      	ldr	r0, [pc, #68]	; (33ac <nrf_gpio_pin_port_decode+0x64>)
    3368:	4a11      	ldr	r2, [pc, #68]	; (33b0 <nrf_gpio_pin_port_decode+0x68>)
    336a:	f44f 7305 	mov.w	r3, #532	; 0x214
    336e:	f002 fa2f 	bl	57d0 <printk>
    3372:	480f      	ldr	r0, [pc, #60]	; (33b0 <nrf_gpio_pin_port_decode+0x68>)
    3374:	f44f 7105 	mov.w	r1, #532	; 0x214
    3378:	f002 faf1 	bl	595e <assert_post_action>
    uint32_t pin_number = *p_pin;
    337c:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    337e:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3382:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    3384:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3386:	d00b      	beq.n	33a0 <nrf_gpio_pin_port_decode+0x58>
            NRFX_ASSERT(0);
    3388:	490a      	ldr	r1, [pc, #40]	; (33b4 <nrf_gpio_pin_port_decode+0x6c>)
    338a:	4808      	ldr	r0, [pc, #32]	; (33ac <nrf_gpio_pin_port_decode+0x64>)
    338c:	4a08      	ldr	r2, [pc, #32]	; (33b0 <nrf_gpio_pin_port_decode+0x68>)
    338e:	f240 2319 	movw	r3, #537	; 0x219
    3392:	f002 fa1d 	bl	57d0 <printk>
    3396:	4806      	ldr	r0, [pc, #24]	; (33b0 <nrf_gpio_pin_port_decode+0x68>)
    3398:	f240 2119 	movw	r1, #537	; 0x219
    339c:	f002 fadf 	bl	595e <assert_post_action>
}
    33a0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    33a4:	bd10      	pop	{r4, pc}
    33a6:	bf00      	nop
    33a8:	00006ac0 	.word	0x00006ac0
    33ac:	00006321 	.word	0x00006321
    33b0:	00006a8d 	.word	0x00006a8d
    33b4:	0000648f 	.word	0x0000648f

000033b8 <twi_tx_start_transfer>:
    return true;
}

static nrfx_err_t twi_tx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
    33b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
    33ba:	4b30      	ldr	r3, [pc, #192]	; (347c <twi_tx_start_transfer+0xc4>)
    33bc:	9301      	str	r3, [sp, #4]
}

NRF_STATIC_INLINE void nrf_twi_event_clear(NRF_TWI_Type  * p_reg,
                                           nrf_twi_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    33be:	2300      	movs	r3, #0
    33c0:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    33c4:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
    33c8:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
    33cc:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
    33d0:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    33d4:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
    33d8:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    33dc:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
}

NRF_STATIC_INLINE void nrf_twi_shorts_set(NRF_TWI_Type * p_reg,
                                          uint32_t       mask)
{
    p_reg->SHORTS = mask;
    33e0:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);
    nrf_twi_shorts_set(p_twi, 0);

    p_cb->bytes_transferred = 0;
    33e4:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
    33e6:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    33ea:	2301      	movs	r3, #1
    33ec:	6203      	str	r3, [r0, #32]

    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
    33ee:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
{
    33f2:	460d      	mov	r5, r1
    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
    33f4:	429a      	cmp	r2, r3
    33f6:	bf18      	it	ne
    33f8:	6083      	strne	r3, [r0, #8]
{
    33fa:	4604      	mov	r4, r0
    {
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTTX);
    }

    (void)twi_send_byte(p_twi, p_cb);
    33fc:	f002 fccd 	bl	5d9a <twi_send_byte>

    if (p_cb->handler)
    3400:	682b      	ldr	r3, [r5, #0]
    3402:	b183      	cbz	r3, 3426 <twi_tx_start_transfer+0x6e>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
    3404:	f240 2386 	movw	r3, #646	; 0x286
    3408:	60ab      	str	r3, [r5, #8]
                         NRF_TWI_INT_ERROR_MASK     |
                         NRF_TWI_INT_TXDSENT_MASK   |
                         NRF_TWI_INT_RXDREADY_MASK;

        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    340a:	68ab      	ldr	r3, [r5, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
    340c:	481c      	ldr	r0, [pc, #112]	; (3480 <twi_tx_start_transfer+0xc8>)
    p_reg->INTENSET = mask;
    340e:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
            ret_code = NRFX_ERROR_INTERNAL;
        }

    }
    return ret_code;
}
    3412:	b003      	add	sp, #12
    3414:	bd30      	pop	{r4, r5, pc}
               twi_transfer(p_twi, p_cb))
    3416:	4629      	mov	r1, r5
    3418:	4620      	mov	r0, r4
    341a:	f002 fcdb 	bl	5dd4 <twi_transfer>
        while ((hw_timeout > 0) &&
    341e:	b128      	cbz	r0, 342c <twi_tx_start_transfer+0x74>
            hw_timeout--;
    3420:	9b01      	ldr	r3, [sp, #4]
    3422:	3b01      	subs	r3, #1
    3424:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
    3426:	9b01      	ldr	r3, [sp, #4]
    3428:	2b00      	cmp	r3, #0
    342a:	dcf4      	bgt.n	3416 <twi_tx_start_transfer+0x5e>
        if (p_cb->error)
    342c:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
    3430:	b95b      	cbnz	r3, 344a <twi_tx_start_transfer+0x92>
    nrfx_err_t ret_code = NRFX_SUCCESS;
    3432:	4813      	ldr	r0, [pc, #76]	; (3480 <twi_tx_start_transfer+0xc8>)
        if (hw_timeout <= 0)
    3434:	9b01      	ldr	r3, [sp, #4]
    3436:	2b00      	cmp	r3, #0
    3438:	dceb      	bgt.n	3412 <twi_tx_start_transfer+0x5a>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    343a:	2300      	movs	r3, #0
    343c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    3440:	2305      	movs	r3, #5
            ret_code = NRFX_ERROR_INTERNAL;
    3442:	4810      	ldr	r0, [pc, #64]	; (3484 <twi_tx_start_transfer+0xcc>)
    3444:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return ret_code;
    3448:	e7e3      	b.n	3412 <twi_tx_start_transfer+0x5a>
    uint32_t error_source = p_reg->ERRORSRC;
    344a:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    344e:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
    3452:	b18b      	cbz	r3, 3478 <twi_tx_start_transfer+0xc0>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    3454:	4a0c      	ldr	r2, [pc, #48]	; (3488 <twi_tx_start_transfer+0xd0>)
    3456:	480b      	ldr	r0, [pc, #44]	; (3484 <twi_tx_start_transfer+0xcc>)
    3458:	f013 0f01 	tst.w	r3, #1
    345c:	bf18      	it	ne
    345e:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    3460:	f013 0f02 	tst.w	r3, #2
    3464:	f102 0201 	add.w	r2, r2, #1
    3468:	bf18      	it	ne
    346a:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    346c:	f013 0f04 	tst.w	r3, #4
    3470:	4b06      	ldr	r3, [pc, #24]	; (348c <twi_tx_start_transfer+0xd4>)
    3472:	bf18      	it	ne
    3474:	4618      	movne	r0, r3
    3476:	e7dd      	b.n	3434 <twi_tx_start_transfer+0x7c>
                ret_code = NRFX_ERROR_INTERNAL;
    3478:	4802      	ldr	r0, [pc, #8]	; (3484 <twi_tx_start_transfer+0xcc>)
    347a:	e7db      	b.n	3434 <twi_tx_start_transfer+0x7c>
    347c:	000186a0 	.word	0x000186a0
    3480:	0bad0000 	.word	0x0bad0000
    3484:	0bad0001 	.word	0x0bad0001
    3488:	0bae0000 	.word	0x0bae0000
    348c:	0bae0002 	.word	0x0bae0002

00003490 <twi_rx_start_transfer>:

static nrfx_err_t twi_rx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
    3490:	b537      	push	{r0, r1, r2, r4, r5, lr}
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
    3492:	4b34      	ldr	r3, [pc, #208]	; (3564 <twi_rx_start_transfer+0xd4>)
    3494:	9301      	str	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3496:	2300      	movs	r3, #0
    3498:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    349c:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
    34a0:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
    34a4:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
    34a8:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    34ac:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
    34b0:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    34b4:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);

    p_cb->bytes_transferred = 0;
    34b8:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
    34ba:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f

    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    34be:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    34c0:	2b01      	cmp	r3, #1
{
    34c2:	4604      	mov	r4, r0
    34c4:	460d      	mov	r5, r1
    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    34c6:	d117      	bne.n	34f8 <twi_rx_start_transfer+0x68>
    34c8:	6a0b      	ldr	r3, [r1, #32]
    34ca:	065b      	lsls	r3, r3, #25
    34cc:	d414      	bmi.n	34f8 <twi_rx_start_transfer+0x68>
    p_reg->SHORTS = mask;
    34ce:	2302      	movs	r3, #2
    34d0:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    34d4:	2301      	movs	r3, #1
    34d6:	6223      	str	r3, [r4, #32]
        nrf_twi_shorts_set(p_twi, NRF_TWI_SHORT_BB_SUSPEND_MASK);
    }
    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_RX)
    34d8:	f895 202d 	ldrb.w	r2, [r5, #45]	; 0x2d
    34dc:	2a02      	cmp	r2, #2
    34de:	bf18      	it	ne
    34e0:	6023      	strne	r3, [r4, #0]
    {
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTRX);
    }

    if (p_cb->handler)
    34e2:	682b      	ldr	r3, [r5, #0]
    34e4:	b193      	cbz	r3, 350c <twi_rx_start_transfer+0x7c>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
    34e6:	f240 2386 	movw	r3, #646	; 0x286
    34ea:	60ab      	str	r3, [r5, #8]
                        NRF_TWI_INT_ERROR_MASK     |
                        NRF_TWI_INT_TXDSENT_MASK   |
                        NRF_TWI_INT_RXDREADY_MASK;
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    34ec:	68ab      	ldr	r3, [r5, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
    34ee:	481e      	ldr	r0, [pc, #120]	; (3568 <twi_rx_start_transfer+0xd8>)
    p_reg->INTENSET = mask;
    34f0:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
            nrf_twi_enable(p_twi);
            ret_code = NRFX_ERROR_INTERNAL;
        }
    }
    return ret_code;
}
    34f4:	b003      	add	sp, #12
    34f6:	bd30      	pop	{r4, r5, pc}
    p_reg->SHORTS = mask;
    34f8:	2301      	movs	r3, #1
    34fa:	e7e9      	b.n	34d0 <twi_rx_start_transfer+0x40>
               twi_transfer(p_twi, p_cb))
    34fc:	4629      	mov	r1, r5
    34fe:	4620      	mov	r0, r4
    3500:	f002 fc68 	bl	5dd4 <twi_transfer>
        while ((hw_timeout > 0) &&
    3504:	b128      	cbz	r0, 3512 <twi_rx_start_transfer+0x82>
               hw_timeout--;
    3506:	9b01      	ldr	r3, [sp, #4]
    3508:	3b01      	subs	r3, #1
    350a:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
    350c:	9b01      	ldr	r3, [sp, #4]
    350e:	2b00      	cmp	r3, #0
    3510:	dcf4      	bgt.n	34fc <twi_rx_start_transfer+0x6c>
        if (p_cb->error)
    3512:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
    3516:	b95b      	cbnz	r3, 3530 <twi_rx_start_transfer+0xa0>
    nrfx_err_t ret_code = NRFX_SUCCESS;
    3518:	4813      	ldr	r0, [pc, #76]	; (3568 <twi_rx_start_transfer+0xd8>)
        if (hw_timeout <= 0)
    351a:	9b01      	ldr	r3, [sp, #4]
    351c:	2b00      	cmp	r3, #0
    351e:	dce9      	bgt.n	34f4 <twi_rx_start_transfer+0x64>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    3520:	2300      	movs	r3, #0
    3522:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    3526:	2305      	movs	r3, #5
            ret_code = NRFX_ERROR_INTERNAL;
    3528:	4810      	ldr	r0, [pc, #64]	; (356c <twi_rx_start_transfer+0xdc>)
    352a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return ret_code;
    352e:	e7e1      	b.n	34f4 <twi_rx_start_transfer+0x64>
    uint32_t error_source = p_reg->ERRORSRC;
    3530:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    3534:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
    3538:	b18b      	cbz	r3, 355e <twi_rx_start_transfer+0xce>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    353a:	4a0d      	ldr	r2, [pc, #52]	; (3570 <twi_rx_start_transfer+0xe0>)
    353c:	480b      	ldr	r0, [pc, #44]	; (356c <twi_rx_start_transfer+0xdc>)
    353e:	f013 0f01 	tst.w	r3, #1
    3542:	bf18      	it	ne
    3544:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    3546:	f013 0f02 	tst.w	r3, #2
    354a:	f102 0201 	add.w	r2, r2, #1
    354e:	bf18      	it	ne
    3550:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    3552:	f013 0f04 	tst.w	r3, #4
    3556:	4b07      	ldr	r3, [pc, #28]	; (3574 <twi_rx_start_transfer+0xe4>)
    3558:	bf18      	it	ne
    355a:	4618      	movne	r0, r3
    355c:	e7dd      	b.n	351a <twi_rx_start_transfer+0x8a>
                ret_code = NRFX_ERROR_INTERNAL;
    355e:	4803      	ldr	r0, [pc, #12]	; (356c <twi_rx_start_transfer+0xdc>)
    3560:	e7db      	b.n	351a <twi_rx_start_transfer+0x8a>
    3562:	bf00      	nop
    3564:	000186a0 	.word	0x000186a0
    3568:	0bad0000 	.word	0x0bad0000
    356c:	0bad0001 	.word	0x0bad0001
    3570:	0bae0000 	.word	0x0bae0000
    3574:	0bae0002 	.word	0x0bae0002

00003578 <nrfx_twi_init>:
{
    3578:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    357c:	4607      	mov	r7, r0
    357e:	4691      	mov	r9, r2
    3580:	4698      	mov	r8, r3
    NRFX_ASSERT(p_config);
    3582:	460c      	mov	r4, r1
    3584:	b949      	cbnz	r1, 359a <nrfx_twi_init+0x22>
    3586:	4931      	ldr	r1, [pc, #196]	; (364c <nrfx_twi_init+0xd4>)
    3588:	4831      	ldr	r0, [pc, #196]	; (3650 <nrfx_twi_init+0xd8>)
    358a:	4a32      	ldr	r2, [pc, #200]	; (3654 <nrfx_twi_init+0xdc>)
    358c:	23a3      	movs	r3, #163	; 0xa3
    358e:	f002 f91f 	bl	57d0 <printk>
    3592:	4830      	ldr	r0, [pc, #192]	; (3654 <nrfx_twi_init+0xdc>)
    3594:	21a3      	movs	r1, #163	; 0xa3
    3596:	f002 f9e2 	bl	595e <assert_post_action>
    NRFX_ASSERT(p_config->scl != p_config->sda);
    359a:	e9d4 2300 	ldrd	r2, r3, [r4]
    359e:	429a      	cmp	r2, r3
    35a0:	d109      	bne.n	35b6 <nrfx_twi_init+0x3e>
    35a2:	492d      	ldr	r1, [pc, #180]	; (3658 <nrfx_twi_init+0xe0>)
    35a4:	482a      	ldr	r0, [pc, #168]	; (3650 <nrfx_twi_init+0xd8>)
    35a6:	4a2b      	ldr	r2, [pc, #172]	; (3654 <nrfx_twi_init+0xdc>)
    35a8:	23a4      	movs	r3, #164	; 0xa4
    35aa:	f002 f911 	bl	57d0 <printk>
    35ae:	4829      	ldr	r0, [pc, #164]	; (3654 <nrfx_twi_init+0xdc>)
    35b0:	21a4      	movs	r1, #164	; 0xa4
    35b2:	f002 f9d4 	bl	595e <assert_post_action>
    twi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    35b6:	f897 a004 	ldrb.w	sl, [r7, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    35ba:	4d28      	ldr	r5, [pc, #160]	; (365c <nrfx_twi_init+0xe4>)
    35bc:	263c      	movs	r6, #60	; 0x3c
    35be:	fb06 f60a 	mul.w	r6, r6, sl
    35c2:	19a9      	adds	r1, r5, r6
    35c4:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    35c8:	2b00      	cmp	r3, #0
    35ca:	d13d      	bne.n	3648 <nrfx_twi_init+0xd0>
    p_cb->int_mask        = 0;
    35cc:	608b      	str	r3, [r1, #8]
    p_cb->prev_suspend    = TWI_NO_SUSPEND;
    35ce:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    p_cb->repeated        = false;
    35d2:	f881 3031 	strb.w	r3, [r1, #49]	; 0x31
    p_cb->busy            = false;
    35d6:	f881 3030 	strb.w	r3, [r1, #48]	; 0x30
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    35da:	7b63      	ldrb	r3, [r4, #13]
    p_cb->p_context       = p_context;
    35dc:	f8c1 8004 	str.w	r8, [r1, #4]
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    35e0:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
    p_cb->handler         = event_handler;
    35e4:	f845 9006 	str.w	r9, [r5, r6]
    TWI_PIN_INIT(p_config->scl);
    35e8:	6823      	ldr	r3, [r4, #0]
    35ea:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    35ec:	a801      	add	r0, sp, #4
    35ee:	f7ff feab 	bl	3348 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    35f2:	9b01      	ldr	r3, [sp, #4]
    35f4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    35f8:	f240 680c 	movw	r8, #1548	; 0x60c
    35fc:	f840 8023 	str.w	r8, [r0, r3, lsl #2]
    TWI_PIN_INIT(p_config->sda);
    3600:	6863      	ldr	r3, [r4, #4]
    3602:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3604:	a801      	add	r0, sp, #4
    3606:	f7ff fe9f 	bl	3348 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    360a:	9b01      	ldr	r3, [sp, #4]
    360c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    3610:	f840 8023 	str.w	r8, [r0, r3, lsl #2]
    nrf_twi_pins_set(p_twi, p_config->scl, p_config->sda);
    3614:	e9d4 2300 	ldrd	r2, r3, [r4]
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    3618:	6838      	ldr	r0, [r7, #0]
    p_reg->PSEL.SCL = scl_pin;
    361a:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
    361e:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        (nrf_twi_frequency_t)p_config->frequency);
    3622:	68a3      	ldr	r3, [r4, #8]
    p_reg->FREQUENCY = frequency;
    3624:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
    if (p_cb->handler)
    3628:	59ab      	ldr	r3, [r5, r6]
    362a:	b11b      	cbz	r3, 3634 <nrfx_twi_init+0xbc>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twi));
    362c:	f340 3007 	sbfx	r0, r0, #12, #8
    3630:	f7fd ff20 	bl	1474 <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    3634:	233c      	movs	r3, #60	; 0x3c
    3636:	fb03 550a 	mla	r5, r3, sl, r5
    return err_code;
    363a:	4809      	ldr	r0, [pc, #36]	; (3660 <nrfx_twi_init+0xe8>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    363c:	2301      	movs	r3, #1
    363e:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
}
    3642:	b002      	add	sp, #8
    3644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return err_code;
    3648:	4806      	ldr	r0, [pc, #24]	; (3664 <nrfx_twi_init+0xec>)
    364a:	e7fa      	b.n	3642 <nrfx_twi_init+0xca>
    364c:	00006bdd 	.word	0x00006bdd
    3650:	00006321 	.word	0x00006321
    3654:	00006ba2 	.word	0x00006ba2
    3658:	00006be6 	.word	0x00006be6
    365c:	200002a0 	.word	0x200002a0
    3660:	0bad0000 	.word	0x0bad0000
    3664:	0bad0005 	.word	0x0bad0005

00003668 <nrfx_twi_enable>:
{
    3668:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
    366a:	4c10      	ldr	r4, [pc, #64]	; (36ac <nrfx_twi_enable+0x44>)
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    366c:	7906      	ldrb	r6, [r0, #4]
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
    366e:	233c      	movs	r3, #60	; 0x3c
    3670:	fb03 4306 	mla	r3, r3, r6, r4
{
    3674:	4605      	mov	r5, r0
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
    3676:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
    367a:	2b01      	cmp	r3, #1
    367c:	d00b      	beq.n	3696 <nrfx_twi_enable+0x2e>
    367e:	490c      	ldr	r1, [pc, #48]	; (36b0 <nrfx_twi_enable+0x48>)
    3680:	480c      	ldr	r0, [pc, #48]	; (36b4 <nrfx_twi_enable+0x4c>)
    3682:	4a0d      	ldr	r2, [pc, #52]	; (36b8 <nrfx_twi_enable+0x50>)
    3684:	f240 1303 	movw	r3, #259	; 0x103
    3688:	f002 f8a2 	bl	57d0 <printk>
    368c:	480a      	ldr	r0, [pc, #40]	; (36b8 <nrfx_twi_enable+0x50>)
    368e:	f240 1103 	movw	r1, #259	; 0x103
    3692:	f002 f964 	bl	595e <assert_post_action>
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    3696:	682b      	ldr	r3, [r5, #0]
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    3698:	2205      	movs	r2, #5
    369a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    369e:	233c      	movs	r3, #60	; 0x3c
    36a0:	fb03 4406 	mla	r4, r3, r6, r4
    36a4:	2302      	movs	r3, #2
    36a6:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
}
    36aa:	bd70      	pop	{r4, r5, r6, pc}
    36ac:	200002a0 	.word	0x200002a0
    36b0:	00006c05 	.word	0x00006c05
    36b4:	00006321 	.word	0x00006321
    36b8:	00006ba2 	.word	0x00006ba2

000036bc <nrfx_twi_disable>:
{
    36bc:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    36be:	4c15      	ldr	r4, [pc, #84]	; (3714 <nrfx_twi_disable+0x58>)
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    36c0:	7906      	ldrb	r6, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    36c2:	233c      	movs	r3, #60	; 0x3c
    36c4:	fb03 4306 	mla	r3, r3, r6, r4
{
    36c8:	4605      	mov	r5, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    36ca:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
    36ce:	b95b      	cbnz	r3, 36e8 <nrfx_twi_disable+0x2c>
    36d0:	4911      	ldr	r1, [pc, #68]	; (3718 <nrfx_twi_disable+0x5c>)
    36d2:	4812      	ldr	r0, [pc, #72]	; (371c <nrfx_twi_disable+0x60>)
    36d4:	4a12      	ldr	r2, [pc, #72]	; (3720 <nrfx_twi_disable+0x64>)
    36d6:	f240 130f 	movw	r3, #271	; 0x10f
    36da:	f002 f879 	bl	57d0 <printk>
    36de:	4810      	ldr	r0, [pc, #64]	; (3720 <nrfx_twi_disable+0x64>)
    36e0:	f240 110f 	movw	r1, #271	; 0x10f
    36e4:	f002 f93b 	bl	595e <assert_post_action>
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    36e8:	682b      	ldr	r3, [r5, #0]
    p_reg->INTENCLR = mask;
    36ea:	4a0e      	ldr	r2, [pc, #56]	; (3724 <nrfx_twi_disable+0x68>)
    36ec:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
    36f0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    36f4:	f022 0203 	bic.w	r2, r2, #3
    36f8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    36fc:	2200      	movs	r2, #0
    36fe:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    3702:	233c      	movs	r3, #60	; 0x3c
    3704:	fb03 4406 	mla	r4, r3, r6, r4
    3708:	2301      	movs	r3, #1
    370a:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
    p_cb->busy = false;
    370e:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
}
    3712:	bd70      	pop	{r4, r5, r6, pc}
    3714:	200002a0 	.word	0x200002a0
    3718:	00006c2f 	.word	0x00006c2f
    371c:	00006321 	.word	0x00006321
    3720:	00006ba2 	.word	0x00006ba2
    3724:	00044286 	.word	0x00044286

00003728 <nrfx_twi_xfer>:
}

nrfx_err_t nrfx_twi_xfer(nrfx_twi_t const *           p_instance,
                         nrfx_twi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
    3728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    nrfx_err_t err_code = NRFX_SUCCESS;
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    372c:	7905      	ldrb	r5, [r0, #4]

    // TXRX and TXTX transfers are supported only in non-blocking mode.
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWI_XFER_TXRX)));
    372e:	4f47      	ldr	r7, [pc, #284]	; (384c <nrfx_twi_xfer+0x124>)
    3730:	f04f 093c 	mov.w	r9, #60	; 0x3c
    3734:	fb09 f905 	mul.w	r9, r9, r5
{
    3738:	4606      	mov	r6, r0
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWI_XFER_TXRX)));
    373a:	f857 3009 	ldr.w	r3, [r7, r9]
{
    373e:	460c      	mov	r4, r1
    3740:	4690      	mov	r8, r2
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWI_XFER_TXRX)));
    3742:	bb13      	cbnz	r3, 378a <nrfx_twi_xfer+0x62>
    3744:	780b      	ldrb	r3, [r1, #0]
    3746:	2b02      	cmp	r3, #2
    3748:	d00f      	beq.n	376a <nrfx_twi_xfer+0x42>
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWI_XFER_TXTX)));
    374a:	7823      	ldrb	r3, [r4, #0]
    374c:	2b03      	cmp	r3, #3
    374e:	d11c      	bne.n	378a <nrfx_twi_xfer+0x62>
    3750:	4a3f      	ldr	r2, [pc, #252]	; (3850 <nrfx_twi_xfer+0x128>)
    3752:	4940      	ldr	r1, [pc, #256]	; (3854 <nrfx_twi_xfer+0x12c>)
    3754:	4840      	ldr	r0, [pc, #256]	; (3858 <nrfx_twi_xfer+0x130>)
    3756:	f240 2381 	movw	r3, #641	; 0x281
    375a:	f002 f839 	bl	57d0 <printk>
    375e:	483c      	ldr	r0, [pc, #240]	; (3850 <nrfx_twi_xfer+0x128>)
    3760:	f240 2181 	movw	r1, #641	; 0x281
    3764:	f002 f8fb 	bl	595e <assert_post_action>
    3768:	e00f      	b.n	378a <nrfx_twi_xfer+0x62>
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWI_XFER_TXRX)));
    376a:	f44f 7320 	mov.w	r3, #640	; 0x280
    376e:	4a38      	ldr	r2, [pc, #224]	; (3850 <nrfx_twi_xfer+0x128>)
    3770:	493a      	ldr	r1, [pc, #232]	; (385c <nrfx_twi_xfer+0x134>)
    3772:	4839      	ldr	r0, [pc, #228]	; (3858 <nrfx_twi_xfer+0x130>)
    3774:	f002 f82c 	bl	57d0 <printk>
    3778:	4835      	ldr	r0, [pc, #212]	; (3850 <nrfx_twi_xfer+0x128>)
    377a:	f44f 7120 	mov.w	r1, #640	; 0x280
    377e:	f002 f8ee 	bl	595e <assert_post_action>
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWI_XFER_TXTX)));
    3782:	f857 3009 	ldr.w	r3, [r7, r9]
    3786:	2b00      	cmp	r3, #0
    3788:	d0df      	beq.n	374a <nrfx_twi_xfer+0x22>
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    378a:	233c      	movs	r3, #60	; 0x3c
    378c:	fb03 7305 	mla	r3, r3, r5, r7
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twi_xfer((NRF_TWI_Type  *)p_instance->p_twi, p_cb, p_xfer_desc, flags);
    3790:	f8d6 9000 	ldr.w	r9, [r6]
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    3794:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    3798:	2b01      	cmp	r3, #1
    379a:	d104      	bne.n	37a6 <nrfx_twi_xfer+0x7e>
    379c:	7823      	ldrb	r3, [r4, #0]
    379e:	2b01      	cmp	r3, #1
    37a0:	d106      	bne.n	37b0 <nrfx_twi_xfer+0x88>
        return NRFX_ERROR_INVALID_STATE;
    37a2:	482f      	ldr	r0, [pc, #188]	; (3860 <nrfx_twi_xfer+0x138>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    37a4:	e011      	b.n	37ca <nrfx_twi_xfer+0xa2>
    else if ((p_cb->prev_suspend == TWI_SUSPEND_RX) && (p_xfer_desc->type != NRFX_TWI_XFER_RX))
    37a6:	2b02      	cmp	r3, #2
    37a8:	d102      	bne.n	37b0 <nrfx_twi_xfer+0x88>
    37aa:	7823      	ldrb	r3, [r4, #0]
    37ac:	2b01      	cmp	r3, #1
    37ae:	d1f8      	bne.n	37a2 <nrfx_twi_xfer+0x7a>
    if (p_cb->busy)
    37b0:	263c      	movs	r6, #60	; 0x3c
    p_reg->INTENCLR = mask;
    37b2:	4b2c      	ldr	r3, [pc, #176]	; (3864 <nrfx_twi_xfer+0x13c>)
    37b4:	f8c9 3308 	str.w	r3, [r9, #776]	; 0x308
    37b8:	fb06 7605 	mla	r6, r6, r5, r7
    37bc:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
    37c0:	b12b      	cbz	r3, 37ce <nrfx_twi_xfer+0xa6>
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    37c2:	68b3      	ldr	r3, [r6, #8]
        return err_code;
    37c4:	4828      	ldr	r0, [pc, #160]	; (3868 <nrfx_twi_xfer+0x140>)
    p_reg->INTENSET = mask;
    37c6:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
}
    37ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        p_cb->busy = (TWI_FLAG_NO_HANDLER_IN_USE(flags)) ? false : true;
    37ce:	f088 0304 	eor.w	r3, r8, #4
    37d2:	f3c3 0380 	ubfx	r3, r3, #2, #1
    37d6:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
    p_cb->flags       = flags;
    37da:	f8c6 8020 	str.w	r8, [r6, #32]
    p_cb->xfer_desc   = *p_xfer_desc;
    37de:	46a6      	mov	lr, r4
    37e0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    37e4:	f106 0c0c 	add.w	ip, r6, #12
    37e8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    37ec:	f8de 3000 	ldr.w	r3, [lr]
    37f0:	f8cc 3000 	str.w	r3, [ip]
    p_cb->curr_length = p_xfer_desc->primary_length;
    37f4:	6863      	ldr	r3, [r4, #4]
    37f6:	62b3      	str	r3, [r6, #40]	; 0x28
    p_cb->p_curr_buf  = p_xfer_desc->p_primary_buf;
    37f8:	68e3      	ldr	r3, [r4, #12]
    37fa:	6273      	str	r3, [r6, #36]	; 0x24
    p_reg->ADDRESS = address;
    37fc:	7863      	ldrb	r3, [r4, #1]
    37fe:	f8c9 3588 	str.w	r3, [r9, #1416]	; 0x588
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
    3802:	7823      	ldrb	r3, [r4, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    3804:	ebc5 1a05 	rsb	sl, r5, r5, lsl #4
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
    3808:	2b01      	cmp	r3, #1
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    380a:	eb07 0a8a 	add.w	sl, r7, sl, lsl #2
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
    380e:	d017      	beq.n	3840 <nrfx_twi_xfer+0x118>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    3810:	b99b      	cbnz	r3, 383a <nrfx_twi_xfer+0x112>
    3812:	f3c8 1840 	ubfx	r8, r8, #5, #1
        p_cb->curr_tx_no_stop = ((p_xfer_desc->type == NRFX_TWI_XFER_TX) &&
    3816:	233c      	movs	r3, #60	; 0x3c
    3818:	fb03 7305 	mla	r3, r3, r5, r7
        err_code = twi_tx_start_transfer(p_twi, p_cb);
    381c:	4651      	mov	r1, sl
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    381e:	f883 802c 	strb.w	r8, [r3, #44]	; 0x2c
        err_code = twi_tx_start_transfer(p_twi, p_cb);
    3822:	4648      	mov	r0, r9
    3824:	f7ff fdc8 	bl	33b8 <twi_tx_start_transfer>
    if (p_cb->handler == NULL)
    3828:	233c      	movs	r3, #60	; 0x3c
    382a:	435d      	muls	r5, r3
    382c:	197a      	adds	r2, r7, r5
    382e:	597b      	ldr	r3, [r7, r5]
    3830:	2b00      	cmp	r3, #0
    3832:	d1ca      	bne.n	37ca <nrfx_twi_xfer+0xa2>
        p_cb->busy = false;
    3834:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    3838:	e7c7      	b.n	37ca <nrfx_twi_xfer+0xa2>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    383a:	f04f 0801 	mov.w	r8, #1
    383e:	e7ea      	b.n	3816 <nrfx_twi_xfer+0xee>
        err_code = twi_rx_start_transfer(p_twi, p_cb);
    3840:	4651      	mov	r1, sl
    3842:	4648      	mov	r0, r9
    3844:	f7ff fe24 	bl	3490 <twi_rx_start_transfer>
    3848:	e7ee      	b.n	3828 <nrfx_twi_xfer+0x100>
    384a:	bf00      	nop
    384c:	200002a0 	.word	0x200002a0
    3850:	00006ba2 	.word	0x00006ba2
    3854:	00006caa 	.word	0x00006caa
    3858:	00006321 	.word	0x00006321
    385c:	00006c5b 	.word	0x00006c5b
    3860:	0bad0005 	.word	0x0bad0005
    3864:	00044286 	.word	0x00044286
    3868:	0bad000b 	.word	0x0bad000b

0000386c <nrfx_twi_0_irq_handler>:

}

#if NRFX_CHECK(NRFX_TWI0_ENABLED)
void nrfx_twi_0_irq_handler(void)
{
    386c:	b5f0      	push	{r4, r5, r6, r7, lr}
    NRFX_ASSERT(p_cb->handler);
    386e:	4c32      	ldr	r4, [pc, #200]	; (3938 <nrfx_twi_0_irq_handler+0xcc>)
    3870:	6823      	ldr	r3, [r4, #0]
{
    3872:	b087      	sub	sp, #28
    NRFX_ASSERT(p_cb->handler);
    3874:	b95b      	cbnz	r3, 388e <nrfx_twi_0_irq_handler+0x22>
    3876:	4931      	ldr	r1, [pc, #196]	; (393c <nrfx_twi_0_irq_handler+0xd0>)
    3878:	4831      	ldr	r0, [pc, #196]	; (3940 <nrfx_twi_0_irq_handler+0xd4>)
    387a:	4a32      	ldr	r2, [pc, #200]	; (3944 <nrfx_twi_0_irq_handler+0xd8>)
    387c:	f240 23a1 	movw	r3, #673	; 0x2a1
    3880:	f001 ffa6 	bl	57d0 <printk>
    3884:	482f      	ldr	r0, [pc, #188]	; (3944 <nrfx_twi_0_irq_handler+0xd8>)
    3886:	f240 21a1 	movw	r1, #673	; 0x2a1
    388a:	f002 f868 	bl	595e <assert_post_action>
    if (twi_transfer(p_twi, p_cb))
    388e:	492a      	ldr	r1, [pc, #168]	; (3938 <nrfx_twi_0_irq_handler+0xcc>)
    3890:	482d      	ldr	r0, [pc, #180]	; (3948 <nrfx_twi_0_irq_handler+0xdc>)
    3892:	f002 fa9f 	bl	5dd4 <twi_transfer>
    3896:	2800      	cmp	r0, #0
    3898:	d140      	bne.n	391c <nrfx_twi_0_irq_handler+0xb0>
    if (!p_cb->error &&
    389a:	f894 702f 	ldrb.w	r7, [r4, #47]	; 0x2f
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
    389e:	f8d4 c020 	ldr.w	ip, [r4, #32]
    if (!p_cb->error &&
    38a2:	b9ff      	cbnz	r7, 38e4 <nrfx_twi_0_irq_handler+0x78>
        ((p_cb->xfer_desc.type == NRFX_TWI_XFER_TXRX) ||
    38a4:	7b23      	ldrb	r3, [r4, #12]
    if (!p_cb->error &&
    38a6:	1e9a      	subs	r2, r3, #2
    38a8:	2a01      	cmp	r2, #1
    38aa:	d81b      	bhi.n	38e4 <nrfx_twi_0_irq_handler+0x78>
         (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)) &&
    38ac:	6a61      	ldr	r1, [r4, #36]	; 0x24
    38ae:	69a2      	ldr	r2, [r4, #24]
    38b0:	4291      	cmp	r1, r2
    38b2:	d117      	bne.n	38e4 <nrfx_twi_0_irq_handler+0x78>
        p_cb->p_curr_buf      = p_cb->xfer_desc.p_secondary_buf;
    38b4:	69e2      	ldr	r2, [r4, #28]
    38b6:	6262      	str	r2, [r4, #36]	; 0x24
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
    38b8:	f3cc 1c40 	ubfx	ip, ip, #5, #1
        p_cb->curr_length     = p_cb->xfer_desc.secondary_length;
    38bc:	6962      	ldr	r2, [r4, #20]
            (void)twi_tx_start_transfer(p_twi, p_cb);
    38be:	491e      	ldr	r1, [pc, #120]	; (3938 <nrfx_twi_0_irq_handler+0xcc>)
    38c0:	4821      	ldr	r0, [pc, #132]	; (3948 <nrfx_twi_0_irq_handler+0xdc>)
        p_cb->curr_length     = p_cb->xfer_desc.secondary_length;
    38c2:	62a2      	str	r2, [r4, #40]	; 0x28
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
    38c4:	2b03      	cmp	r3, #3
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
    38c6:	f884 c02c 	strb.w	ip, [r4, #44]	; 0x2c
        p_cb->prev_suspend    = TWI_NO_SUSPEND;
    38ca:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
    38ce:	d104      	bne.n	38da <nrfx_twi_0_irq_handler+0x6e>
    twi_irq_handler(NRF_TWI0, &m_cb[NRFX_TWI0_INST_IDX]);
}
    38d0:	b007      	add	sp, #28
    38d2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            (void)twi_tx_start_transfer(p_twi, p_cb);
    38d6:	f7ff bd6f 	b.w	33b8 <twi_tx_start_transfer>
}
    38da:	b007      	add	sp, #28
    38dc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            (void)twi_rx_start_transfer(p_twi, p_cb);
    38e0:	f7ff bdd6 	b.w	3490 <twi_rx_start_transfer>
        event.xfer_desc = p_cb->xfer_desc;
    38e4:	4e19      	ldr	r6, [pc, #100]	; (394c <nrfx_twi_0_irq_handler+0xe0>)
    38e6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    38e8:	ad01      	add	r5, sp, #4
    38ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    38ec:	6833      	ldr	r3, [r6, #0]
    38ee:	602b      	str	r3, [r5, #0]
        if (p_cb->error)
    38f0:	b1ff      	cbz	r7, 3932 <nrfx_twi_0_irq_handler+0xc6>
    uint32_t error_source = p_reg->ERRORSRC;
    38f2:	4a15      	ldr	r2, [pc, #84]	; (3948 <nrfx_twi_0_irq_handler+0xdc>)
    38f4:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    38f8:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
            if (errorsrc & NRF_TWI_ERROR_ADDRESS_NACK)
    38fc:	0799      	lsls	r1, r3, #30
    38fe:	d50f      	bpl.n	3920 <nrfx_twi_0_irq_handler+0xb4>
                event.type = NRFX_TWI_EVT_ADDRESS_NACK;
    3900:	2301      	movs	r3, #1
                event.type = NRFX_TWI_EVT_DATA_NACK;
    3902:	f88d 3000 	strb.w	r3, [sp]
        p_cb->busy = false;
    3906:	2300      	movs	r3, #0
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
    3908:	f01c 0f04 	tst.w	ip, #4
        p_cb->busy = false;
    390c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
    3910:	d000      	beq.n	3914 <nrfx_twi_0_irq_handler+0xa8>
    3912:	b11f      	cbz	r7, 391c <nrfx_twi_0_irq_handler+0xb0>
            p_cb->handler(&event, p_cb->p_context);
    3914:	e9d4 3100 	ldrd	r3, r1, [r4]
    3918:	4668      	mov	r0, sp
    391a:	4798      	blx	r3
}
    391c:	b007      	add	sp, #28
    391e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            else if (errorsrc & NRF_TWI_ERROR_DATA_NACK)
    3920:	075a      	lsls	r2, r3, #29
    3922:	d501      	bpl.n	3928 <nrfx_twi_0_irq_handler+0xbc>
                event.type = NRFX_TWI_EVT_DATA_NACK;
    3924:	2302      	movs	r3, #2
    3926:	e7ec      	b.n	3902 <nrfx_twi_0_irq_handler+0x96>
            else if (errorsrc & NRF_TWI_ERROR_OVERRUN)
    3928:	07db      	lsls	r3, r3, #31
                event.type = NRFX_TWI_EVT_OVERRUN;
    392a:	bf4c      	ite	mi
    392c:	2303      	movmi	r3, #3
                event.type = NRFX_TWI_EVT_BUS_ERROR;
    392e:	2304      	movpl	r3, #4
    3930:	e7e7      	b.n	3902 <nrfx_twi_0_irq_handler+0x96>
            event.type = NRFX_TWI_EVT_DONE;
    3932:	f88d 7000 	strb.w	r7, [sp]
            NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWI_EVT_DONE));
    3936:	e7e6      	b.n	3906 <nrfx_twi_0_irq_handler+0x9a>
    3938:	200002a0 	.word	0x200002a0
    393c:	00006cf9 	.word	0x00006cf9
    3940:	00006321 	.word	0x00006321
    3944:	00006ba2 	.word	0x00006ba2
    3948:	40003000 	.word	0x40003000
    394c:	200002ac 	.word	0x200002ac

00003950 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3950:	6803      	ldr	r3, [r0, #0]
    switch (port)
    3952:	095a      	lsrs	r2, r3, #5
    3954:	bf0c      	ite	eq
    3956:	f04f 32ff 	moveq.w	r2, #4294967295
    395a:	2200      	movne	r2, #0
    pin_number &= 0x1F;
    395c:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
    3960:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3964:	07db      	lsls	r3, r3, #31
{
    3966:	b510      	push	{r4, lr}
    3968:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    396a:	d40b      	bmi.n	3984 <nrf_gpio_pin_port_decode+0x34>
    396c:	4910      	ldr	r1, [pc, #64]	; (39b0 <nrf_gpio_pin_port_decode+0x60>)
    396e:	4811      	ldr	r0, [pc, #68]	; (39b4 <nrf_gpio_pin_port_decode+0x64>)
    3970:	4a11      	ldr	r2, [pc, #68]	; (39b8 <nrf_gpio_pin_port_decode+0x68>)
    3972:	f44f 7305 	mov.w	r3, #532	; 0x214
    3976:	f001 ff2b 	bl	57d0 <printk>
    397a:	480f      	ldr	r0, [pc, #60]	; (39b8 <nrf_gpio_pin_port_decode+0x68>)
    397c:	f44f 7105 	mov.w	r1, #532	; 0x214
    3980:	f001 ffed 	bl	595e <assert_post_action>
    uint32_t pin_number = *p_pin;
    3984:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    3986:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    398a:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    398c:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    398e:	d00b      	beq.n	39a8 <nrf_gpio_pin_port_decode+0x58>
            NRFX_ASSERT(0);
    3990:	490a      	ldr	r1, [pc, #40]	; (39bc <nrf_gpio_pin_port_decode+0x6c>)
    3992:	4808      	ldr	r0, [pc, #32]	; (39b4 <nrf_gpio_pin_port_decode+0x64>)
    3994:	4a08      	ldr	r2, [pc, #32]	; (39b8 <nrf_gpio_pin_port_decode+0x68>)
    3996:	f240 2319 	movw	r3, #537	; 0x219
    399a:	f001 ff19 	bl	57d0 <printk>
    399e:	4806      	ldr	r0, [pc, #24]	; (39b8 <nrf_gpio_pin_port_decode+0x68>)
    39a0:	f240 2119 	movw	r1, #537	; 0x219
    39a4:	f001 ffdb 	bl	595e <assert_post_action>
}
    39a8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    39ac:	bd10      	pop	{r4, pc}
    39ae:	bf00      	nop
    39b0:	00006ac0 	.word	0x00006ac0
    39b4:	00006321 	.word	0x00006321
    39b8:	00006a8d 	.word	0x00006a8d
    39bc:	0000648f 	.word	0x0000648f

000039c0 <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    39c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    39c2:	460c      	mov	r4, r1
    39c4:	4606      	mov	r6, r0
    nrf_gpio_pin_set(scl_pin);
    39c6:	f002 fa91 	bl	5eec <nrf_gpio_pin_set>
    nrf_gpio_pin_set(sda_pin);
    39ca:	4620      	mov	r0, r4
    39cc:	f002 fa8e 	bl	5eec <nrf_gpio_pin_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    39d0:	a801      	add	r0, sp, #4
    39d2:	9601      	str	r6, [sp, #4]
    39d4:	f7ff ffbc 	bl	3950 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    39d8:	9b01      	ldr	r3, [sp, #4]
    39da:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    39de:	f240 650d 	movw	r5, #1549	; 0x60d
    39e2:	f840 5023 	str.w	r5, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    39e6:	a801      	add	r0, sp, #4
    39e8:	9401      	str	r4, [sp, #4]
    39ea:	f7ff ffb1 	bl	3950 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    39ee:	9b01      	ldr	r3, [sp, #4]
    39f0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    39f4:	2701      	movs	r7, #1
    reg->PIN_CNF[pin_number] = cnf;
    39f6:	f840 5023 	str.w	r5, [r0, r3, lsl #2]

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
    39fa:	2004      	movs	r0, #4
    39fc:	f002 f9cb 	bl	5d96 <nrfx_busy_wait>
    3a00:	2509      	movs	r5, #9
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3a02:	a801      	add	r0, sp, #4
    3a04:	9401      	str	r4, [sp, #4]
    3a06:	f7ff ffa3 	bl	3950 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    3a0a:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
    3a0c:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    3a10:	40d3      	lsrs	r3, r2

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
    3a12:	07db      	lsls	r3, r3, #31
    3a14:	d415      	bmi.n	3a42 <nrfx_twi_twim_bus_recover+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3a16:	a801      	add	r0, sp, #4
    3a18:	9601      	str	r6, [sp, #4]
    3a1a:	f7ff ff99 	bl	3950 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    3a1e:	9b01      	ldr	r3, [sp, #4]
    3a20:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTCLR = clr_mask;
    3a24:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
    3a28:	2004      	movs	r0, #4
    3a2a:	f002 f9b4 	bl	5d96 <nrfx_busy_wait>
            nrf_gpio_pin_set(scl_pin);
    3a2e:	4630      	mov	r0, r6
    3a30:	f002 fa5c 	bl	5eec <nrf_gpio_pin_set>
    for (uint8_t i = 0; i < 9; i++)
    3a34:	3d01      	subs	r5, #1
            NRFX_DELAY_US(4);
    3a36:	2004      	movs	r0, #4
    3a38:	f002 f9ad 	bl	5d96 <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
    3a3c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    3a40:	d1df      	bne.n	3a02 <nrfx_twi_twim_bus_recover+0x42>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3a42:	a801      	add	r0, sp, #4
    3a44:	9401      	str	r4, [sp, #4]
    3a46:	f7ff ff83 	bl	3950 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    3a4a:	9a01      	ldr	r2, [sp, #4]
    3a4c:	2301      	movs	r3, #1
    3a4e:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    3a50:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
    3a54:	2004      	movs	r0, #4
    3a56:	f002 f99e 	bl	5d96 <nrfx_busy_wait>
    nrf_gpio_pin_set(sda_pin);
    3a5a:	4620      	mov	r0, r4
    3a5c:	f002 fa46 	bl	5eec <nrf_gpio_pin_set>
    NRFX_DELAY_US(4);
    3a60:	2004      	movs	r0, #4
    3a62:	f002 f998 	bl	5d96 <nrfx_busy_wait>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3a66:	a801      	add	r0, sp, #4
    3a68:	9401      	str	r4, [sp, #4]
    3a6a:	f7ff ff71 	bl	3950 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    3a6e:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
    3a70:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
    3a74:	4803      	ldr	r0, [pc, #12]	; (3a84 <nrfx_twi_twim_bus_recover+0xc4>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    3a76:	40d3      	lsrs	r3, r2
    3a78:	f003 0301 	and.w	r3, r3, #1
    3a7c:	1ac0      	subs	r0, r0, r3
    3a7e:	b003      	add	sp, #12
    3a80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3a82:	bf00      	nop
    3a84:	0bad0001 	.word	0x0bad0001

00003a88 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3a88:	4b0e      	ldr	r3, [pc, #56]	; (3ac4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2c>)
{
    3a8a:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3a8c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    3a90:	3001      	adds	r0, #1
    3a92:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    3a96:	42a6      	cmp	r6, r4
    3a98:	d800      	bhi.n	3a9c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    3a9a:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    3a9c:	e9d4 3500 	ldrd	r3, r5, [r4]
    3aa0:	4628      	mov	r0, r5
    3aa2:	4798      	blx	r3
		if (dev != NULL) {
    3aa4:	b165      	cbz	r5, 3ac0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x28>
				dev->state->init_res = rc;
    3aa6:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    3aa8:	b130      	cbz	r0, 3ab8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x20>
				if (rc < 0) {
    3aaa:	2800      	cmp	r0, #0
    3aac:	bfb8      	it	lt
    3aae:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    3ab0:	28ff      	cmp	r0, #255	; 0xff
    3ab2:	bfa8      	it	ge
    3ab4:	20ff      	movge	r0, #255	; 0xff
    3ab6:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    3ab8:	785a      	ldrb	r2, [r3, #1]
    3aba:	f042 0201 	orr.w	r2, r2, #1
    3abe:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3ac0:	3408      	adds	r4, #8
    3ac2:	e7e8      	b.n	3a96 <z_sys_init_run_level+0xe>
    3ac4:	000062b4 	.word	0x000062b4

00003ac8 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    3ac8:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    3aca:	4605      	mov	r5, r0
    3acc:	b910      	cbnz	r0, 3ad4 <z_impl_device_get_binding+0xc>
		return NULL;
    3ace:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    3ad0:	4620      	mov	r0, r4
    3ad2:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    3ad4:	7803      	ldrb	r3, [r0, #0]
    3ad6:	2b00      	cmp	r3, #0
    3ad8:	d0f9      	beq.n	3ace <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    3ada:	4c0e      	ldr	r4, [pc, #56]	; (3b14 <z_impl_device_get_binding+0x4c>)
    3adc:	4e0e      	ldr	r6, [pc, #56]	; (3b18 <z_impl_device_get_binding+0x50>)
    3ade:	42b4      	cmp	r4, r6
    3ae0:	d108      	bne.n	3af4 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
    3ae2:	4c0c      	ldr	r4, [pc, #48]	; (3b14 <z_impl_device_get_binding+0x4c>)
    3ae4:	42b4      	cmp	r4, r6
    3ae6:	d0f2      	beq.n	3ace <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    3ae8:	4620      	mov	r0, r4
    3aea:	f002 fa0d 	bl	5f08 <z_device_ready>
    3aee:	b950      	cbnz	r0, 3b06 <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
    3af0:	3418      	adds	r4, #24
    3af2:	e7f7      	b.n	3ae4 <z_impl_device_get_binding+0x1c>
		if (z_device_ready(dev) && (dev->name == name)) {
    3af4:	4620      	mov	r0, r4
    3af6:	f002 fa07 	bl	5f08 <z_device_ready>
    3afa:	b110      	cbz	r0, 3b02 <z_impl_device_get_binding+0x3a>
    3afc:	6823      	ldr	r3, [r4, #0]
    3afe:	42ab      	cmp	r3, r5
    3b00:	d0e6      	beq.n	3ad0 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    3b02:	3418      	adds	r4, #24
    3b04:	e7eb      	b.n	3ade <z_impl_device_get_binding+0x16>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    3b06:	6821      	ldr	r1, [r4, #0]
    3b08:	4628      	mov	r0, r5
    3b0a:	f001 ffb7 	bl	5a7c <strcmp>
    3b0e:	2800      	cmp	r0, #0
    3b10:	d1ee      	bne.n	3af0 <z_impl_device_get_binding+0x28>
    3b12:	e7dd      	b.n	3ad0 <z_impl_device_get_binding+0x8>
    3b14:	00005fe4 	.word	0x00005fe4
    3b18:	00006074 	.word	0x00006074

00003b1c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    3b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3b1e:	4604      	mov	r4, r0
    3b20:	460e      	mov	r6, r1
	__asm__ volatile(
    3b22:	f04f 0320 	mov.w	r3, #32
    3b26:	f3ef 8711 	mrs	r7, BASEPRI
    3b2a:	f383 8812 	msr	BASEPRI_MAX, r3
    3b2e:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    3b32:	f001 fa55 	bl	4fe0 <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    3b36:	4631      	mov	r1, r6
    3b38:	4605      	mov	r5, r0
    3b3a:	4620      	mov	r0, r4
    3b3c:	f002 f9f7 	bl	5f2e <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    3b40:	2c04      	cmp	r4, #4
    3b42:	d10c      	bne.n	3b5e <z_fatal_error+0x42>
    3b44:	490a      	ldr	r1, [pc, #40]	; (3b70 <z_fatal_error+0x54>)
    3b46:	4a0b      	ldr	r2, [pc, #44]	; (3b74 <z_fatal_error+0x58>)
    3b48:	480b      	ldr	r0, [pc, #44]	; (3b78 <z_fatal_error+0x5c>)
    3b4a:	238f      	movs	r3, #143	; 0x8f
    3b4c:	f001 fe40 	bl	57d0 <printk>
    3b50:	480a      	ldr	r0, [pc, #40]	; (3b7c <z_fatal_error+0x60>)
    3b52:	f001 fe3d 	bl	57d0 <printk>
    3b56:	4807      	ldr	r0, [pc, #28]	; (3b74 <z_fatal_error+0x58>)
    3b58:	218f      	movs	r1, #143	; 0x8f
    3b5a:	f001 ff00 	bl	595e <assert_post_action>
	__asm__ volatile(
    3b5e:	f387 8811 	msr	BASEPRI, r7
    3b62:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    3b66:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    3b68:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    3b6c:	f7fd bf28 	b.w	19c0 <z_impl_k_thread_abort>
    3b70:	00006d29 	.word	0x00006d29
    3b74:	00006d07 	.word	0x00006d07
    3b78:	00006321 	.word	0x00006321
    3b7c:	00006d46 	.word	0x00006d46

00003b80 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    3b80:	b530      	push	{r4, r5, lr}
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
    3b82:	2300      	movs	r3, #0
{
    3b84:	b087      	sub	sp, #28
	z_setup_new_thread(thread, stack,
    3b86:	2201      	movs	r2, #1
    3b88:	e9cd 2304 	strd	r2, r3, [sp, #16]
    3b8c:	220f      	movs	r2, #15
    3b8e:	e9cd 3202 	strd	r3, r2, [sp, #8]
    3b92:	9301      	str	r3, [sp, #4]
	struct k_thread *thread = &z_idle_threads[i];
    3b94:	4c0c      	ldr	r4, [pc, #48]	; (3bc8 <init_idle_thread+0x48>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    3b96:	4b0d      	ldr	r3, [pc, #52]	; (3bcc <init_idle_thread+0x4c>)
	z_setup_new_thread(thread, stack,
    3b98:	490d      	ldr	r1, [pc, #52]	; (3bd0 <init_idle_thread+0x50>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    3b9a:	2218      	movs	r2, #24
	struct k_thread *thread = &z_idle_threads[i];
    3b9c:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    3ba0:	fb02 3300 	mla	r3, r2, r0, r3
	z_setup_new_thread(thread, stack,
    3ba4:	f44f 7590 	mov.w	r5, #288	; 0x120
    3ba8:	9300      	str	r3, [sp, #0]
    3baa:	fb05 1100 	mla	r1, r5, r0, r1
    3bae:	4b09      	ldr	r3, [pc, #36]	; (3bd4 <init_idle_thread+0x54>)
    3bb0:	f44f 7280 	mov.w	r2, #256	; 0x100
    3bb4:	4620      	mov	r0, r4
    3bb6:	f000 f8a3 	bl	3d00 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3bba:	7b63      	ldrb	r3, [r4, #13]
    3bbc:	f023 0304 	bic.w	r3, r3, #4
    3bc0:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    3bc2:	b007      	add	sp, #28
    3bc4:	bd30      	pop	{r4, r5, pc}
    3bc6:	bf00      	nop
    3bc8:	20000070 	.word	0x20000070
    3bcc:	200002dc 	.word	0x200002dc
    3bd0:	20000760 	.word	0x20000760
    3bd4:	00003f25 	.word	0x00003f25

00003bd8 <bg_thread_main>:
{
    3bd8:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    3bda:	4b0a      	ldr	r3, [pc, #40]	; (3c04 <bg_thread_main+0x2c>)
    3bdc:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    3bde:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    3be0:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    3be2:	f7ff ff51 	bl	3a88 <z_sys_init_run_level>
	boot_banner();
    3be6:	f001 fdd3 	bl	5790 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    3bea:	2003      	movs	r0, #3
    3bec:	f7ff ff4c 	bl	3a88 <z_sys_init_run_level>
	z_init_static_threads();
    3bf0:	f000 f8ea 	bl	3dc8 <z_init_static_threads>
	main();
    3bf4:	f7fc fbe2 	bl	3bc <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    3bf8:	4a03      	ldr	r2, [pc, #12]	; (3c08 <bg_thread_main+0x30>)
    3bfa:	7b13      	ldrb	r3, [r2, #12]
    3bfc:	f023 0301 	bic.w	r3, r3, #1
    3c00:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    3c02:	bd08      	pop	{r3, pc}
    3c04:	20000322 	.word	0x20000322
    3c08:	200000f0 	.word	0x200000f0

00003c0c <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    3c0c:	4802      	ldr	r0, [pc, #8]	; (3c18 <z_bss_zero+0xc>)
    3c0e:	4a03      	ldr	r2, [pc, #12]	; (3c1c <z_bss_zero+0x10>)
    3c10:	2100      	movs	r1, #0
    3c12:	1a12      	subs	r2, r2, r0
    3c14:	f001 bf49 	b.w	5aaa <memset>
    3c18:	20000070 	.word	0x20000070
    3c1c:	20000324 	.word	0x20000324

00003c20 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    3c20:	b580      	push	{r7, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    3c22:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 3ce0 <z_cstart+0xc0>
    3c26:	b0a6      	sub	sp, #152	; 0x98
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    3c28:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    3c2c:	4d2d      	ldr	r5, [pc, #180]	; (3ce4 <z_cstart+0xc4>)
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    3c2e:	4e2e      	ldr	r6, [pc, #184]	; (3ce8 <z_cstart+0xc8>)
    3c30:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3c32:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 3cec <z_cstart+0xcc>
    3c36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3c3a:	2400      	movs	r4, #0
    3c3c:	616b      	str	r3, [r5, #20]
    3c3e:	23e0      	movs	r3, #224	; 0xe0
    3c40:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    3c44:	77ec      	strb	r4, [r5, #31]
    3c46:	762c      	strb	r4, [r5, #24]
    3c48:	766c      	strb	r4, [r5, #25]
    3c4a:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    3c4c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3c4e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    3c52:	626b      	str	r3, [r5, #36]	; 0x24
    3c54:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    3c58:	f7fd fe7c 	bl	1954 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    3c5c:	f7fd fbec 	bl	1438 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    3c60:	f04f 33ff 	mov.w	r3, #4294967295
    3c64:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    3c66:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    3c68:	f7fd ff8a 	bl	1b80 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    3c6c:	f7fd feba 	bl	19e4 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    3c70:	f240 1301 	movw	r3, #257	; 0x101
    3c74:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    3c78:	ab06      	add	r3, sp, #24
    3c7a:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    3c7c:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    3c80:	f002 f941 	bl	5f06 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    3c84:	4620      	mov	r0, r4
    3c86:	f7ff feff 	bl	3a88 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    3c8a:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    3c8c:	4d18      	ldr	r5, [pc, #96]	; (3cf0 <z_cstart+0xd0>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    3c8e:	f7ff fefb 	bl	3a88 <z_sys_init_run_level>
	z_sched_init();
    3c92:	f001 f817 	bl	4cc4 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3c96:	4b17      	ldr	r3, [pc, #92]	; (3cf4 <z_cstart+0xd4>)
    3c98:	9305      	str	r3, [sp, #20]
    3c9a:	2301      	movs	r3, #1
    3c9c:	4916      	ldr	r1, [pc, #88]	; (3cf8 <z_cstart+0xd8>)
    3c9e:	9400      	str	r4, [sp, #0]
    3ca0:	e9cd 4303 	strd	r4, r3, [sp, #12]
    3ca4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3ca8:	464b      	mov	r3, r9
    3caa:	e9cd 4401 	strd	r4, r4, [sp, #4]
    3cae:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
    3cb0:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3cb2:	f000 f825 	bl	3d00 <z_setup_new_thread>
    3cb6:	7b6a      	ldrb	r2, [r5, #13]
    3cb8:	4607      	mov	r7, r0
    3cba:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    3cbe:	4628      	mov	r0, r5
    3cc0:	736a      	strb	r2, [r5, #13]
    3cc2:	f000 fce9 	bl	4698 <z_ready_thread>
		init_idle_thread(i);
    3cc6:	4620      	mov	r0, r4
    3cc8:	f7ff ff5a 	bl	3b80 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    3ccc:	4b0b      	ldr	r3, [pc, #44]	; (3cfc <z_cstart+0xdc>)
    3cce:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    3cd0:	464a      	mov	r2, r9
    3cd2:	4639      	mov	r1, r7
    3cd4:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
    3cd6:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
    3cd8:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    3cdc:	f7fd fcbc 	bl	1658 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    3ce0:	200010a0 	.word	0x200010a0
    3ce4:	e000ed00 	.word	0xe000ed00
    3ce8:	200002dc 	.word	0x200002dc
    3cec:	00003bd9 	.word	0x00003bd9
    3cf0:	200000f0 	.word	0x200000f0
    3cf4:	00006d7b 	.word	0x00006d7b
    3cf8:	20000340 	.word	0x20000340
    3cfc:	20000070 	.word	0x20000070

00003d00 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    3d00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3d04:	b085      	sub	sp, #20
    3d06:	4604      	mov	r4, r0
    3d08:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
    3d0c:	f1b8 0f0f 	cmp.w	r8, #15
{
    3d10:	460f      	mov	r7, r1
    3d12:	4615      	mov	r5, r2
    3d14:	4699      	mov	r9, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
    3d16:	d132      	bne.n	3d7e <z_setup_new_thread+0x7e>
    3d18:	4b25      	ldr	r3, [pc, #148]	; (3db0 <z_setup_new_thread+0xb0>)
    3d1a:	4599      	cmp	r9, r3
    3d1c:	d133      	bne.n	3d86 <z_setup_new_thread+0x86>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    3d1e:	f104 0358 	add.w	r3, r4, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    3d22:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    3d26:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3d28:	7323      	strb	r3, [r4, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    3d2a:	3507      	adds	r5, #7
	thread_base->thread_state = (uint8_t)initial_state;
    3d2c:	2304      	movs	r3, #4
    3d2e:	7363      	strb	r3, [r4, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    3d30:	f025 0507 	bic.w	r5, r5, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    3d34:	f107 0320 	add.w	r3, r7, #32
	new_thread->stack_info.size = stack_buf_size;
    3d38:	e9c4 3519 	strd	r3, r5, [r4, #100]	; 0x64
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3d3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38

	thread_base->prio = priority;
    3d3e:	f884 800e 	strb.w	r8, [r4, #14]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3d42:	9302      	str	r3, [sp, #8]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    3d44:	f105 0820 	add.w	r8, r5, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3d48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3d4a:	9301      	str	r3, [sp, #4]
	thread_base->pended_on = NULL;
    3d4c:	2600      	movs	r6, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3d4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3d50:	9300      	str	r3, [sp, #0]
	stack_ptr = (char *)stack + stack_obj_size;
    3d52:	44b8      	add	r8, r7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3d54:	464b      	mov	r3, r9
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    3d56:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
    3d5a:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
    3d5c:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
    3d5e:	66e6      	str	r6, [r4, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3d60:	4642      	mov	r2, r8
    3d62:	4639      	mov	r1, r7
    3d64:	4620      	mov	r0, r4
    3d66:	f7fd fc45 	bl	15f4 <arch_new_thread>
	if (!_current) {
    3d6a:	4b12      	ldr	r3, [pc, #72]	; (3db4 <z_setup_new_thread+0xb4>)
	new_thread->init_data = NULL;
    3d6c:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
    3d6e:	689b      	ldr	r3, [r3, #8]
    3d70:	b103      	cbz	r3, 3d74 <z_setup_new_thread+0x74>
	new_thread->resource_pool = _current->resource_pool;
    3d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    3d74:	6723      	str	r3, [r4, #112]	; 0x70
}
    3d76:	4640      	mov	r0, r8
    3d78:	b005      	add	sp, #20
    3d7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    3d7e:	f108 0310 	add.w	r3, r8, #16
    3d82:	2b1e      	cmp	r3, #30
    3d84:	d9cb      	bls.n	3d1e <z_setup_new_thread+0x1e>
    3d86:	4a0c      	ldr	r2, [pc, #48]	; (3db8 <z_setup_new_thread+0xb8>)
    3d88:	490c      	ldr	r1, [pc, #48]	; (3dbc <z_setup_new_thread+0xbc>)
    3d8a:	480d      	ldr	r0, [pc, #52]	; (3dc0 <z_setup_new_thread+0xc0>)
    3d8c:	f240 2305 	movw	r3, #517	; 0x205
    3d90:	f001 fd1e 	bl	57d0 <printk>
    3d94:	4641      	mov	r1, r8
    3d96:	480b      	ldr	r0, [pc, #44]	; (3dc4 <z_setup_new_thread+0xc4>)
    3d98:	f06f 030f 	mvn.w	r3, #15
    3d9c:	220e      	movs	r2, #14
    3d9e:	f001 fd17 	bl	57d0 <printk>
    3da2:	4805      	ldr	r0, [pc, #20]	; (3db8 <z_setup_new_thread+0xb8>)
    3da4:	f240 2105 	movw	r1, #517	; 0x205
    3da8:	f001 fdd9 	bl	595e <assert_post_action>
    3dac:	e7b7      	b.n	3d1e <z_setup_new_thread+0x1e>
    3dae:	bf00      	nop
    3db0:	00003f25 	.word	0x00003f25
    3db4:	200002dc 	.word	0x200002dc
    3db8:	00006d80 	.word	0x00006d80
    3dbc:	00006da3 	.word	0x00006da3
    3dc0:	00006321 	.word	0x00006321
    3dc4:	00006e23 	.word	0x00006e23

00003dc8 <z_init_static_threads>:
{
    3dc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3dcc:	4c3b      	ldr	r4, [pc, #236]	; (3ebc <z_init_static_threads+0xf4>)
	_FOREACH_STATIC_THREAD(thread_data) {
    3dce:	4d3c      	ldr	r5, [pc, #240]	; (3ec0 <z_init_static_threads+0xf8>)
    3dd0:	4f3c      	ldr	r7, [pc, #240]	; (3ec4 <z_init_static_threads+0xfc>)
{
    3dd2:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    3dd4:	42ac      	cmp	r4, r5
    3dd6:	4626      	mov	r6, r4
    3dd8:	d90e      	bls.n	3df8 <z_init_static_threads+0x30>
    3dda:	493b      	ldr	r1, [pc, #236]	; (3ec8 <z_init_static_threads+0x100>)
    3ddc:	483b      	ldr	r0, [pc, #236]	; (3ecc <z_init_static_threads+0x104>)
    3dde:	f240 23d5 	movw	r3, #725	; 0x2d5
    3de2:	463a      	mov	r2, r7
    3de4:	f001 fcf4 	bl	57d0 <printk>
    3de8:	4839      	ldr	r0, [pc, #228]	; (3ed0 <z_init_static_threads+0x108>)
    3dea:	f001 fcf1 	bl	57d0 <printk>
    3dee:	f240 21d5 	movw	r1, #725	; 0x2d5
    3df2:	4638      	mov	r0, r7
    3df4:	f001 fdb3 	bl	595e <assert_post_action>
    3df8:	42ae      	cmp	r6, r5
    3dfa:	f104 0430 	add.w	r4, r4, #48	; 0x30
    3dfe:	d31f      	bcc.n	3e40 <z_init_static_threads+0x78>
	k_sched_lock();
    3e00:	f000 fa44 	bl	428c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    3e04:	4c2d      	ldr	r4, [pc, #180]	; (3ebc <z_init_static_threads+0xf4>)
    3e06:	4e2f      	ldr	r6, [pc, #188]	; (3ec4 <z_init_static_threads+0xfc>)
    3e08:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 3ec8 <z_init_static_threads+0x100>
    3e0c:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 3ecc <z_init_static_threads+0x104>
    3e10:	42ac      	cmp	r4, r5
    3e12:	d90e      	bls.n	3e32 <z_init_static_threads+0x6a>
    3e14:	4641      	mov	r1, r8
    3e16:	f44f 733d 	mov.w	r3, #756	; 0x2f4
    3e1a:	4632      	mov	r2, r6
    3e1c:	4648      	mov	r0, r9
    3e1e:	f001 fcd7 	bl	57d0 <printk>
    3e22:	482b      	ldr	r0, [pc, #172]	; (3ed0 <z_init_static_threads+0x108>)
    3e24:	f001 fcd4 	bl	57d0 <printk>
    3e28:	f44f 713d 	mov.w	r1, #756	; 0x2f4
    3e2c:	4630      	mov	r0, r6
    3e2e:	f001 fd96 	bl	595e <assert_post_action>
    3e32:	42ac      	cmp	r4, r5
    3e34:	d320      	bcc.n	3e78 <z_init_static_threads+0xb0>
}
    3e36:	b007      	add	sp, #28
    3e38:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    3e3c:	f000 be76 	b.w	4b2c <k_sched_unlock>
		z_setup_new_thread(
    3e40:	f854 3c04 	ldr.w	r3, [r4, #-4]
    3e44:	9305      	str	r3, [sp, #20]
    3e46:	f854 3c10 	ldr.w	r3, [r4, #-16]
    3e4a:	9304      	str	r3, [sp, #16]
    3e4c:	f854 3c14 	ldr.w	r3, [r4, #-20]
    3e50:	9303      	str	r3, [sp, #12]
    3e52:	f854 3c18 	ldr.w	r3, [r4, #-24]
    3e56:	9302      	str	r3, [sp, #8]
    3e58:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    3e5c:	9301      	str	r3, [sp, #4]
    3e5e:	f854 3c20 	ldr.w	r3, [r4, #-32]
    3e62:	9300      	str	r3, [sp, #0]
    3e64:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    3e68:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    3e6c:	f7ff ff48 	bl	3d00 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    3e70:	f854 3c30 	ldr.w	r3, [r4, #-48]
    3e74:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    3e76:	e7ad      	b.n	3dd4 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    3e78:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3e7a:	1c5a      	adds	r2, r3, #1
    3e7c:	d00f      	beq.n	3e9e <z_init_static_threads+0xd6>
					    K_MSEC(thread_data->init_delay));
    3e7e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
		} else {
			return (t * to_hz + off) / from_hz;
    3e82:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    3e86:	f240 30e7 	movw	r0, #999	; 0x3e7
    3e8a:	2100      	movs	r1, #0
    3e8c:	fbc3 0102 	smlal	r0, r1, r3, r2
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    3e90:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    3e94:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    3e96:	d104      	bne.n	3ea2 <z_init_static_threads+0xda>
	z_sched_start(thread);
    3e98:	4638      	mov	r0, r7
    3e9a:	f000 fc45 	bl	4728 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    3e9e:	3430      	adds	r4, #48	; 0x30
    3ea0:	e7b6      	b.n	3e10 <z_init_static_threads+0x48>
    3ea2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3ea6:	2300      	movs	r3, #0
    3ea8:	f7fc f906 	bl	b8 <__aeabi_uldivmod>
    3eac:	4602      	mov	r2, r0
    3eae:	460b      	mov	r3, r1

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    3eb0:	f107 0018 	add.w	r0, r7, #24
    3eb4:	4907      	ldr	r1, [pc, #28]	; (3ed4 <z_init_static_threads+0x10c>)
    3eb6:	f001 f9b3 	bl	5220 <z_add_timeout>
    3eba:	e7f0      	b.n	3e9e <z_init_static_threads+0xd6>
    3ebc:	2000006c 	.word	0x2000006c
    3ec0:	2000006c 	.word	0x2000006c
    3ec4:	00006d80 	.word	0x00006d80
    3ec8:	00006e54 	.word	0x00006e54
    3ecc:	00006321 	.word	0x00006321
    3ed0:	00006e81 	.word	0x00006e81
    3ed4:	000047d1 	.word	0x000047d1

00003ed8 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    3ed8:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
    3eda:	b138      	cbz	r0, 3eec <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    3edc:	4b04      	ldr	r3, [pc, #16]	; (3ef0 <z_spin_lock_valid+0x18>)
    3ede:	7d1b      	ldrb	r3, [r3, #20]
    3ee0:	f000 0003 	and.w	r0, r0, #3
    3ee4:	1ac0      	subs	r0, r0, r3
    3ee6:	bf18      	it	ne
    3ee8:	2001      	movne	r0, #1
    3eea:	4770      	bx	lr
			return false;
		}
	}
	return true;
    3eec:	2001      	movs	r0, #1
}
    3eee:	4770      	bx	lr
    3ef0:	200002dc 	.word	0x200002dc

00003ef4 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    3ef4:	4906      	ldr	r1, [pc, #24]	; (3f10 <z_spin_unlock_valid+0x1c>)
{
    3ef6:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    3ef8:	688a      	ldr	r2, [r1, #8]
    3efa:	7d08      	ldrb	r0, [r1, #20]
    3efc:	6819      	ldr	r1, [r3, #0]
    3efe:	4302      	orrs	r2, r0
    3f00:	4291      	cmp	r1, r2
    3f02:	f04f 0000 	mov.w	r0, #0
		return false;
	}
	l->thread_cpu = 0;
    3f06:	bf04      	itt	eq
    3f08:	6018      	streq	r0, [r3, #0]
	return true;
    3f0a:	2001      	moveq	r0, #1
}
    3f0c:	4770      	bx	lr
    3f0e:	bf00      	nop
    3f10:	200002dc 	.word	0x200002dc

00003f14 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    3f14:	4a02      	ldr	r2, [pc, #8]	; (3f20 <z_spin_lock_set_owner+0xc>)
    3f16:	7d11      	ldrb	r1, [r2, #20]
    3f18:	6893      	ldr	r3, [r2, #8]
    3f1a:	430b      	orrs	r3, r1
    3f1c:	6003      	str	r3, [r0, #0]
}
    3f1e:	4770      	bx	lr
    3f20:	200002dc 	.word	0x200002dc

00003f24 <idle>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
    3f24:	4c11      	ldr	r4, [pc, #68]	; (3f6c <idle+0x48>)
{
    3f26:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(_current->base.prio >= 0);
    3f28:	68a3      	ldr	r3, [r4, #8]
    3f2a:	f993 300e 	ldrsb.w	r3, [r3, #14]
    3f2e:	2b00      	cmp	r3, #0
    3f30:	da09      	bge.n	3f46 <idle+0x22>
    3f32:	490f      	ldr	r1, [pc, #60]	; (3f70 <idle+0x4c>)
    3f34:	480f      	ldr	r0, [pc, #60]	; (3f74 <idle+0x50>)
    3f36:	4a10      	ldr	r2, [pc, #64]	; (3f78 <idle+0x54>)
    3f38:	2346      	movs	r3, #70	; 0x46
    3f3a:	f001 fc49 	bl	57d0 <printk>
    3f3e:	480e      	ldr	r0, [pc, #56]	; (3f78 <idle+0x54>)
    3f40:	2146      	movs	r1, #70	; 0x46
    3f42:	f001 fd0c 	bl	595e <assert_post_action>
	__asm__ volatile(
    3f46:	f04f 0220 	mov.w	r2, #32
    3f4a:	f3ef 8311 	mrs	r3, BASEPRI
    3f4e:	f382 8812 	msr	BASEPRI_MAX, r2
    3f52:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
    3f56:	f001 fa79 	bl	544c <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
    3f5a:	61a0      	str	r0, [r4, #24]
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
    3f5c:	f7fd f9c2 	bl	12e4 <pm_system_suspend>
    3f60:	2800      	cmp	r0, #0
    3f62:	d1f0      	bne.n	3f46 <idle+0x22>
	arch_cpu_idle();
    3f64:	f7fd fa6e 	bl	1444 <arch_cpu_idle>
}
    3f68:	e7ed      	b.n	3f46 <idle+0x22>
    3f6a:	bf00      	nop
    3f6c:	200002dc 	.word	0x200002dc
    3f70:	00006ec1 	.word	0x00006ec1
    3f74:	00006321 	.word	0x00006321
    3f78:	00006ea0 	.word	0x00006ea0

00003f7c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    3f7c:	b538      	push	{r3, r4, r5, lr}
    3f7e:	4604      	mov	r4, r0
    3f80:	f04f 0320 	mov.w	r3, #32
    3f84:	f3ef 8511 	mrs	r5, BASEPRI
    3f88:	f383 8812 	msr	BASEPRI_MAX, r3
    3f8c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3f90:	4814      	ldr	r0, [pc, #80]	; (3fe4 <z_impl_k_sem_give+0x68>)
    3f92:	f7ff ffa1 	bl	3ed8 <z_spin_lock_valid>
    3f96:	b968      	cbnz	r0, 3fb4 <z_impl_k_sem_give+0x38>
    3f98:	4a13      	ldr	r2, [pc, #76]	; (3fe8 <z_impl_k_sem_give+0x6c>)
    3f9a:	4914      	ldr	r1, [pc, #80]	; (3fec <z_impl_k_sem_give+0x70>)
    3f9c:	4814      	ldr	r0, [pc, #80]	; (3ff0 <z_impl_k_sem_give+0x74>)
    3f9e:	2381      	movs	r3, #129	; 0x81
    3fa0:	f001 fc16 	bl	57d0 <printk>
    3fa4:	490f      	ldr	r1, [pc, #60]	; (3fe4 <z_impl_k_sem_give+0x68>)
    3fa6:	4813      	ldr	r0, [pc, #76]	; (3ff4 <z_impl_k_sem_give+0x78>)
    3fa8:	f001 fc12 	bl	57d0 <printk>
    3fac:	480e      	ldr	r0, [pc, #56]	; (3fe8 <z_impl_k_sem_give+0x6c>)
    3fae:	2181      	movs	r1, #129	; 0x81
    3fb0:	f001 fcd5 	bl	595e <assert_post_action>
	z_spin_lock_set_owner(l);
    3fb4:	480b      	ldr	r0, [pc, #44]	; (3fe4 <z_impl_k_sem_give+0x68>)
    3fb6:	f7ff ffad 	bl	3f14 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    3fba:	4620      	mov	r0, r4
    3fbc:	f000 fe32 	bl	4c24 <z_unpend_first_thread>

	if (thread != NULL) {
    3fc0:	b148      	cbz	r0, 3fd6 <z_impl_k_sem_give+0x5a>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    3fc2:	2200      	movs	r2, #0
    3fc4:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    3fc6:	f000 fb67 	bl	4698 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    3fca:	4629      	mov	r1, r5
    3fcc:	4805      	ldr	r0, [pc, #20]	; (3fe4 <z_impl_k_sem_give+0x68>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    3fce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    3fd2:	f000 b917 	b.w	4204 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    3fd6:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    3fda:	429a      	cmp	r2, r3
    3fdc:	bf18      	it	ne
    3fde:	3301      	addne	r3, #1
    3fe0:	60a3      	str	r3, [r4, #8]
}
    3fe2:	e7f2      	b.n	3fca <z_impl_k_sem_give+0x4e>
    3fe4:	20000304 	.word	0x20000304
    3fe8:	000064a7 	.word	0x000064a7
    3fec:	000064f9 	.word	0x000064f9
    3ff0:	00006321 	.word	0x00006321
    3ff4:	0000650e 	.word	0x0000650e

00003ff8 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    3ff8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3ffa:	4604      	mov	r4, r0
    3ffc:	4616      	mov	r6, r2
    3ffe:	461d      	mov	r5, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4000:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    4004:	b17b      	cbz	r3, 4026 <z_impl_k_sem_take+0x2e>
    4006:	ea52 0305 	orrs.w	r3, r2, r5
    400a:	d00c      	beq.n	4026 <z_impl_k_sem_take+0x2e>
    400c:	4935      	ldr	r1, [pc, #212]	; (40e4 <z_impl_k_sem_take+0xec>)
    400e:	4a36      	ldr	r2, [pc, #216]	; (40e8 <z_impl_k_sem_take+0xf0>)
    4010:	4836      	ldr	r0, [pc, #216]	; (40ec <z_impl_k_sem_take+0xf4>)
    4012:	2379      	movs	r3, #121	; 0x79
    4014:	f001 fbdc 	bl	57d0 <printk>
    4018:	4835      	ldr	r0, [pc, #212]	; (40f0 <z_impl_k_sem_take+0xf8>)
    401a:	f001 fbd9 	bl	57d0 <printk>
    401e:	4832      	ldr	r0, [pc, #200]	; (40e8 <z_impl_k_sem_take+0xf0>)
    4020:	2179      	movs	r1, #121	; 0x79
    4022:	f001 fc9c 	bl	595e <assert_post_action>
    4026:	f04f 0320 	mov.w	r3, #32
    402a:	f3ef 8711 	mrs	r7, BASEPRI
    402e:	f383 8812 	msr	BASEPRI_MAX, r3
    4032:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4036:	482f      	ldr	r0, [pc, #188]	; (40f4 <z_impl_k_sem_take+0xfc>)
    4038:	f7ff ff4e 	bl	3ed8 <z_spin_lock_valid>
    403c:	b968      	cbnz	r0, 405a <z_impl_k_sem_take+0x62>
    403e:	4a2e      	ldr	r2, [pc, #184]	; (40f8 <z_impl_k_sem_take+0x100>)
    4040:	492e      	ldr	r1, [pc, #184]	; (40fc <z_impl_k_sem_take+0x104>)
    4042:	482a      	ldr	r0, [pc, #168]	; (40ec <z_impl_k_sem_take+0xf4>)
    4044:	2381      	movs	r3, #129	; 0x81
    4046:	f001 fbc3 	bl	57d0 <printk>
    404a:	492a      	ldr	r1, [pc, #168]	; (40f4 <z_impl_k_sem_take+0xfc>)
    404c:	482c      	ldr	r0, [pc, #176]	; (4100 <z_impl_k_sem_take+0x108>)
    404e:	f001 fbbf 	bl	57d0 <printk>
    4052:	4829      	ldr	r0, [pc, #164]	; (40f8 <z_impl_k_sem_take+0x100>)
    4054:	2181      	movs	r1, #129	; 0x81
    4056:	f001 fc82 	bl	595e <assert_post_action>
	z_spin_lock_set_owner(l);
    405a:	4826      	ldr	r0, [pc, #152]	; (40f4 <z_impl_k_sem_take+0xfc>)
    405c:	f7ff ff5a 	bl	3f14 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    4060:	68a3      	ldr	r3, [r4, #8]
    4062:	b1d3      	cbz	r3, 409a <z_impl_k_sem_take+0xa2>
		sem->count--;
    4064:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4066:	4823      	ldr	r0, [pc, #140]	; (40f4 <z_impl_k_sem_take+0xfc>)
    4068:	60a3      	str	r3, [r4, #8]
    406a:	f7ff ff43 	bl	3ef4 <z_spin_unlock_valid>
    406e:	b968      	cbnz	r0, 408c <z_impl_k_sem_take+0x94>
    4070:	4a21      	ldr	r2, [pc, #132]	; (40f8 <z_impl_k_sem_take+0x100>)
    4072:	4924      	ldr	r1, [pc, #144]	; (4104 <z_impl_k_sem_take+0x10c>)
    4074:	481d      	ldr	r0, [pc, #116]	; (40ec <z_impl_k_sem_take+0xf4>)
    4076:	23ac      	movs	r3, #172	; 0xac
    4078:	f001 fbaa 	bl	57d0 <printk>
    407c:	491d      	ldr	r1, [pc, #116]	; (40f4 <z_impl_k_sem_take+0xfc>)
    407e:	4822      	ldr	r0, [pc, #136]	; (4108 <z_impl_k_sem_take+0x110>)
    4080:	f001 fba6 	bl	57d0 <printk>
    4084:	481c      	ldr	r0, [pc, #112]	; (40f8 <z_impl_k_sem_take+0x100>)
    4086:	21ac      	movs	r1, #172	; 0xac
    4088:	f001 fc69 	bl	595e <assert_post_action>
	__asm__ volatile(
    408c:	f387 8811 	msr	BASEPRI, r7
    4090:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    4094:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    4096:	b003      	add	sp, #12
    4098:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    409a:	ea56 0305 	orrs.w	r3, r6, r5
    409e:	d118      	bne.n	40d2 <z_impl_k_sem_take+0xda>
    40a0:	4814      	ldr	r0, [pc, #80]	; (40f4 <z_impl_k_sem_take+0xfc>)
    40a2:	f7ff ff27 	bl	3ef4 <z_spin_unlock_valid>
    40a6:	b968      	cbnz	r0, 40c4 <z_impl_k_sem_take+0xcc>
    40a8:	4a13      	ldr	r2, [pc, #76]	; (40f8 <z_impl_k_sem_take+0x100>)
    40aa:	4916      	ldr	r1, [pc, #88]	; (4104 <z_impl_k_sem_take+0x10c>)
    40ac:	480f      	ldr	r0, [pc, #60]	; (40ec <z_impl_k_sem_take+0xf4>)
    40ae:	23ac      	movs	r3, #172	; 0xac
    40b0:	f001 fb8e 	bl	57d0 <printk>
    40b4:	490f      	ldr	r1, [pc, #60]	; (40f4 <z_impl_k_sem_take+0xfc>)
    40b6:	4814      	ldr	r0, [pc, #80]	; (4108 <z_impl_k_sem_take+0x110>)
    40b8:	f001 fb8a 	bl	57d0 <printk>
    40bc:	480e      	ldr	r0, [pc, #56]	; (40f8 <z_impl_k_sem_take+0x100>)
    40be:	21ac      	movs	r1, #172	; 0xac
    40c0:	f001 fc4d 	bl	595e <assert_post_action>
    40c4:	f387 8811 	msr	BASEPRI, r7
    40c8:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    40cc:	f06f 000f 	mvn.w	r0, #15
    40d0:	e7e1      	b.n	4096 <z_impl_k_sem_take+0x9e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    40d2:	e9cd 6500 	strd	r6, r5, [sp]
    40d6:	4622      	mov	r2, r4
    40d8:	4639      	mov	r1, r7
    40da:	4806      	ldr	r0, [pc, #24]	; (40f4 <z_impl_k_sem_take+0xfc>)
    40dc:	f000 fc8c 	bl	49f8 <z_pend_curr>
	return ret;
    40e0:	e7d9      	b.n	4096 <z_impl_k_sem_take+0x9e>
    40e2:	bf00      	nop
    40e4:	00006f09 	.word	0x00006f09
    40e8:	00006ee9 	.word	0x00006ee9
    40ec:	00006321 	.word	0x00006321
    40f0:	00006f56 	.word	0x00006f56
    40f4:	20000304 	.word	0x20000304
    40f8:	000064a7 	.word	0x000064a7
    40fc:	000064f9 	.word	0x000064f9
    4100:	0000650e 	.word	0x0000650e
    4104:	000064cd 	.word	0x000064cd
    4108:	000064e4 	.word	0x000064e4

0000410c <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    410c:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    410e:	4c08      	ldr	r4, [pc, #32]	; (4130 <z_reset_time_slice+0x24>)
    4110:	6823      	ldr	r3, [r4, #0]
    4112:	b15b      	cbz	r3, 412c <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    4114:	f7fe fe22 	bl	2d5c <sys_clock_elapsed>
    4118:	4603      	mov	r3, r0
    411a:	6820      	ldr	r0, [r4, #0]
    411c:	4a05      	ldr	r2, [pc, #20]	; (4134 <z_reset_time_slice+0x28>)
    411e:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
    4120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    4124:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    4126:	2100      	movs	r1, #0
    4128:	f001 b9d8 	b.w	54dc <z_set_timeout_expiry>
}
    412c:	bd10      	pop	{r4, pc}
    412e:	bf00      	nop
    4130:	20000314 	.word	0x20000314
    4134:	200002dc 	.word	0x200002dc

00004138 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    4138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    413a:	4604      	mov	r4, r0
    413c:	460d      	mov	r5, r1
	__asm__ volatile(
    413e:	f04f 0320 	mov.w	r3, #32
    4142:	f3ef 8611 	mrs	r6, BASEPRI
    4146:	f383 8812 	msr	BASEPRI_MAX, r3
    414a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    414e:	4823      	ldr	r0, [pc, #140]	; (41dc <k_sched_time_slice_set+0xa4>)
    4150:	f7ff fec2 	bl	3ed8 <z_spin_lock_valid>
    4154:	b968      	cbnz	r0, 4172 <k_sched_time_slice_set+0x3a>
    4156:	4a22      	ldr	r2, [pc, #136]	; (41e0 <k_sched_time_slice_set+0xa8>)
    4158:	4922      	ldr	r1, [pc, #136]	; (41e4 <k_sched_time_slice_set+0xac>)
    415a:	4823      	ldr	r0, [pc, #140]	; (41e8 <k_sched_time_slice_set+0xb0>)
    415c:	2381      	movs	r3, #129	; 0x81
    415e:	f001 fb37 	bl	57d0 <printk>
    4162:	491e      	ldr	r1, [pc, #120]	; (41dc <k_sched_time_slice_set+0xa4>)
    4164:	4821      	ldr	r0, [pc, #132]	; (41ec <k_sched_time_slice_set+0xb4>)
    4166:	f001 fb33 	bl	57d0 <printk>
    416a:	481d      	ldr	r0, [pc, #116]	; (41e0 <k_sched_time_slice_set+0xa8>)
    416c:	2181      	movs	r1, #129	; 0x81
    416e:	f001 fbf6 	bl	595e <assert_post_action>
	z_spin_lock_set_owner(l);
    4172:	481a      	ldr	r0, [pc, #104]	; (41dc <k_sched_time_slice_set+0xa4>)
    4174:	f7ff fece 	bl	3f14 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    4178:	4b1d      	ldr	r3, [pc, #116]	; (41f0 <k_sched_time_slice_set+0xb8>)
    417a:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    417c:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    4180:	f240 30e7 	movw	r0, #999	; 0x3e7
    4184:	6119      	str	r1, [r3, #16]
    4186:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    418a:	2300      	movs	r3, #0
    418c:	fbe4 0107 	umlal	r0, r1, r4, r7
    4190:	f7fb ff92 	bl	b8 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    4194:	2c00      	cmp	r4, #0
    4196:	4b17      	ldr	r3, [pc, #92]	; (41f4 <k_sched_time_slice_set+0xbc>)
    4198:	dc1b      	bgt.n	41d2 <k_sched_time_slice_set+0x9a>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
    419a:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    419c:	4b16      	ldr	r3, [pc, #88]	; (41f8 <k_sched_time_slice_set+0xc0>)
    419e:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    41a0:	f7ff ffb4 	bl	410c <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    41a4:	480d      	ldr	r0, [pc, #52]	; (41dc <k_sched_time_slice_set+0xa4>)
    41a6:	f7ff fea5 	bl	3ef4 <z_spin_unlock_valid>
    41aa:	b968      	cbnz	r0, 41c8 <k_sched_time_slice_set+0x90>
    41ac:	4a0c      	ldr	r2, [pc, #48]	; (41e0 <k_sched_time_slice_set+0xa8>)
    41ae:	4913      	ldr	r1, [pc, #76]	; (41fc <k_sched_time_slice_set+0xc4>)
    41b0:	480d      	ldr	r0, [pc, #52]	; (41e8 <k_sched_time_slice_set+0xb0>)
    41b2:	23ac      	movs	r3, #172	; 0xac
    41b4:	f001 fb0c 	bl	57d0 <printk>
    41b8:	4908      	ldr	r1, [pc, #32]	; (41dc <k_sched_time_slice_set+0xa4>)
    41ba:	4811      	ldr	r0, [pc, #68]	; (4200 <k_sched_time_slice_set+0xc8>)
    41bc:	f001 fb08 	bl	57d0 <printk>
    41c0:	4807      	ldr	r0, [pc, #28]	; (41e0 <k_sched_time_slice_set+0xa8>)
    41c2:	21ac      	movs	r1, #172	; 0xac
    41c4:	f001 fbcb 	bl	595e <assert_post_action>
	__asm__ volatile(
    41c8:	f386 8811 	msr	BASEPRI, r6
    41cc:	f3bf 8f6f 	isb	sy
	}
}
    41d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
    41d2:	2802      	cmp	r0, #2
    41d4:	bfb8      	it	lt
    41d6:	2002      	movlt	r0, #2
    41d8:	e7df      	b.n	419a <k_sched_time_slice_set+0x62>
    41da:	bf00      	nop
    41dc:	2000030c 	.word	0x2000030c
    41e0:	000064a7 	.word	0x000064a7
    41e4:	000064f9 	.word	0x000064f9
    41e8:	00006321 	.word	0x00006321
    41ec:	0000650e 	.word	0x0000650e
    41f0:	200002dc 	.word	0x200002dc
    41f4:	20000314 	.word	0x20000314
    41f8:	20000310 	.word	0x20000310
    41fc:	000064cd 	.word	0x000064cd
    4200:	000064e4 	.word	0x000064e4

00004204 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    4204:	b538      	push	{r3, r4, r5, lr}
    4206:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    4208:	460d      	mov	r5, r1
    420a:	b9e9      	cbnz	r1, 4248 <z_reschedule+0x44>
    420c:	f3ef 8305 	mrs	r3, IPSR
	if (resched(key.key) && need_swap()) {
    4210:	b9d3      	cbnz	r3, 4248 <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
    4212:	4b19      	ldr	r3, [pc, #100]	; (4278 <z_reschedule+0x74>)
	if (resched(key.key) && need_swap()) {
    4214:	69da      	ldr	r2, [r3, #28]
    4216:	689b      	ldr	r3, [r3, #8]
    4218:	429a      	cmp	r2, r3
    421a:	d015      	beq.n	4248 <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    421c:	f7ff fe6a 	bl	3ef4 <z_spin_unlock_valid>
    4220:	b968      	cbnz	r0, 423e <z_reschedule+0x3a>
    4222:	4a16      	ldr	r2, [pc, #88]	; (427c <z_reschedule+0x78>)
    4224:	4916      	ldr	r1, [pc, #88]	; (4280 <z_reschedule+0x7c>)
    4226:	4817      	ldr	r0, [pc, #92]	; (4284 <z_reschedule+0x80>)
    4228:	23c3      	movs	r3, #195	; 0xc3
    422a:	f001 fad1 	bl	57d0 <printk>
    422e:	4816      	ldr	r0, [pc, #88]	; (4288 <z_reschedule+0x84>)
    4230:	4621      	mov	r1, r4
    4232:	f001 facd 	bl	57d0 <printk>
    4236:	4811      	ldr	r0, [pc, #68]	; (427c <z_reschedule+0x78>)
    4238:	21c3      	movs	r1, #195	; 0xc3
    423a:	f001 fb90 	bl	595e <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    423e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = arch_swap(key);
    4242:	2000      	movs	r0, #0
    4244:	f7fd b982 	b.w	154c <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4248:	4620      	mov	r0, r4
    424a:	f7ff fe53 	bl	3ef4 <z_spin_unlock_valid>
    424e:	b968      	cbnz	r0, 426c <z_reschedule+0x68>
    4250:	4a0a      	ldr	r2, [pc, #40]	; (427c <z_reschedule+0x78>)
    4252:	490b      	ldr	r1, [pc, #44]	; (4280 <z_reschedule+0x7c>)
    4254:	480b      	ldr	r0, [pc, #44]	; (4284 <z_reschedule+0x80>)
    4256:	23ac      	movs	r3, #172	; 0xac
    4258:	f001 faba 	bl	57d0 <printk>
    425c:	480a      	ldr	r0, [pc, #40]	; (4288 <z_reschedule+0x84>)
    425e:	4621      	mov	r1, r4
    4260:	f001 fab6 	bl	57d0 <printk>
    4264:	4805      	ldr	r0, [pc, #20]	; (427c <z_reschedule+0x78>)
    4266:	21ac      	movs	r1, #172	; 0xac
    4268:	f001 fb79 	bl	595e <assert_post_action>
    426c:	f385 8811 	msr	BASEPRI, r5
    4270:	f3bf 8f6f 	isb	sy
    4274:	bd38      	pop	{r3, r4, r5, pc}
    4276:	bf00      	nop
    4278:	200002dc 	.word	0x200002dc
    427c:	000064a7 	.word	0x000064a7
    4280:	000064cd 	.word	0x000064cd
    4284:	00006321 	.word	0x00006321
    4288:	000064e4 	.word	0x000064e4

0000428c <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    428c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    428e:	f04f 0320 	mov.w	r3, #32
    4292:	f3ef 8511 	mrs	r5, BASEPRI
    4296:	f383 8812 	msr	BASEPRI_MAX, r3
    429a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    429e:	4829      	ldr	r0, [pc, #164]	; (4344 <k_sched_lock+0xb8>)
    42a0:	f7ff fe1a 	bl	3ed8 <z_spin_lock_valid>
    42a4:	b968      	cbnz	r0, 42c2 <k_sched_lock+0x36>
    42a6:	4a28      	ldr	r2, [pc, #160]	; (4348 <k_sched_lock+0xbc>)
    42a8:	4928      	ldr	r1, [pc, #160]	; (434c <k_sched_lock+0xc0>)
    42aa:	4829      	ldr	r0, [pc, #164]	; (4350 <k_sched_lock+0xc4>)
    42ac:	2381      	movs	r3, #129	; 0x81
    42ae:	f001 fa8f 	bl	57d0 <printk>
    42b2:	4924      	ldr	r1, [pc, #144]	; (4344 <k_sched_lock+0xb8>)
    42b4:	4827      	ldr	r0, [pc, #156]	; (4354 <k_sched_lock+0xc8>)
    42b6:	f001 fa8b 	bl	57d0 <printk>
    42ba:	4823      	ldr	r0, [pc, #140]	; (4348 <k_sched_lock+0xbc>)
    42bc:	2181      	movs	r1, #129	; 0x81
    42be:	f001 fb4e 	bl	595e <assert_post_action>
	z_spin_lock_set_owner(l);
    42c2:	4820      	ldr	r0, [pc, #128]	; (4344 <k_sched_lock+0xb8>)
    42c4:	f7ff fe26 	bl	3f14 <z_spin_lock_set_owner>
    42c8:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
    42cc:	b163      	cbz	r3, 42e8 <k_sched_lock+0x5c>
    42ce:	4922      	ldr	r1, [pc, #136]	; (4358 <k_sched_lock+0xcc>)
    42d0:	4a22      	ldr	r2, [pc, #136]	; (435c <k_sched_lock+0xd0>)
    42d2:	481f      	ldr	r0, [pc, #124]	; (4350 <k_sched_lock+0xc4>)
    42d4:	23fd      	movs	r3, #253	; 0xfd
    42d6:	f001 fa7b 	bl	57d0 <printk>
    42da:	4821      	ldr	r0, [pc, #132]	; (4360 <k_sched_lock+0xd4>)
    42dc:	f001 fa78 	bl	57d0 <printk>
    42e0:	481e      	ldr	r0, [pc, #120]	; (435c <k_sched_lock+0xd0>)
    42e2:	21fd      	movs	r1, #253	; 0xfd
    42e4:	f001 fb3b 	bl	595e <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    42e8:	4c1e      	ldr	r4, [pc, #120]	; (4364 <k_sched_lock+0xd8>)
    42ea:	68a3      	ldr	r3, [r4, #8]
    42ec:	7bdb      	ldrb	r3, [r3, #15]
    42ee:	2b01      	cmp	r3, #1
    42f0:	d10c      	bne.n	430c <k_sched_lock+0x80>
    42f2:	491d      	ldr	r1, [pc, #116]	; (4368 <k_sched_lock+0xdc>)
    42f4:	4a19      	ldr	r2, [pc, #100]	; (435c <k_sched_lock+0xd0>)
    42f6:	4816      	ldr	r0, [pc, #88]	; (4350 <k_sched_lock+0xc4>)
    42f8:	23fe      	movs	r3, #254	; 0xfe
    42fa:	f001 fa69 	bl	57d0 <printk>
    42fe:	4818      	ldr	r0, [pc, #96]	; (4360 <k_sched_lock+0xd4>)
    4300:	f001 fa66 	bl	57d0 <printk>
    4304:	4815      	ldr	r0, [pc, #84]	; (435c <k_sched_lock+0xd0>)
    4306:	21fe      	movs	r1, #254	; 0xfe
    4308:	f001 fb29 	bl	595e <assert_post_action>

	--_current->base.sched_locked;
    430c:	68a2      	ldr	r2, [r4, #8]
    430e:	7bd3      	ldrb	r3, [r2, #15]
    4310:	3b01      	subs	r3, #1
    4312:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4314:	480b      	ldr	r0, [pc, #44]	; (4344 <k_sched_lock+0xb8>)
    4316:	f7ff fded 	bl	3ef4 <z_spin_unlock_valid>
    431a:	b968      	cbnz	r0, 4338 <k_sched_lock+0xac>
    431c:	4a0a      	ldr	r2, [pc, #40]	; (4348 <k_sched_lock+0xbc>)
    431e:	4913      	ldr	r1, [pc, #76]	; (436c <k_sched_lock+0xe0>)
    4320:	480b      	ldr	r0, [pc, #44]	; (4350 <k_sched_lock+0xc4>)
    4322:	23ac      	movs	r3, #172	; 0xac
    4324:	f001 fa54 	bl	57d0 <printk>
    4328:	4906      	ldr	r1, [pc, #24]	; (4344 <k_sched_lock+0xb8>)
    432a:	4811      	ldr	r0, [pc, #68]	; (4370 <k_sched_lock+0xe4>)
    432c:	f001 fa50 	bl	57d0 <printk>
    4330:	4805      	ldr	r0, [pc, #20]	; (4348 <k_sched_lock+0xbc>)
    4332:	21ac      	movs	r1, #172	; 0xac
    4334:	f001 fb13 	bl	595e <assert_post_action>
	__asm__ volatile(
    4338:	f385 8811 	msr	BASEPRI, r5
    433c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    4340:	bd38      	pop	{r3, r4, r5, pc}
    4342:	bf00      	nop
    4344:	2000030c 	.word	0x2000030c
    4348:	000064a7 	.word	0x000064a7
    434c:	000064f9 	.word	0x000064f9
    4350:	00006321 	.word	0x00006321
    4354:	0000650e 	.word	0x0000650e
    4358:	00006fc7 	.word	0x00006fc7
    435c:	00006f9c 	.word	0x00006f9c
    4360:	00006f56 	.word	0x00006f56
    4364:	200002dc 	.word	0x200002dc
    4368:	00006fd9 	.word	0x00006fd9
    436c:	000064cd 	.word	0x000064cd
    4370:	000064e4 	.word	0x000064e4

00004374 <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    4374:	4b0c      	ldr	r3, [pc, #48]	; (43a8 <z_priq_dumb_remove+0x34>)
    4376:	4299      	cmp	r1, r3
{
    4378:	b510      	push	{r4, lr}
    437a:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    437c:	d10b      	bne.n	4396 <z_priq_dumb_remove+0x22>
    437e:	490b      	ldr	r1, [pc, #44]	; (43ac <z_priq_dumb_remove+0x38>)
    4380:	480b      	ldr	r0, [pc, #44]	; (43b0 <z_priq_dumb_remove+0x3c>)
    4382:	4a0c      	ldr	r2, [pc, #48]	; (43b4 <z_priq_dumb_remove+0x40>)
    4384:	f240 33b5 	movw	r3, #949	; 0x3b5
    4388:	f001 fa22 	bl	57d0 <printk>
    438c:	4809      	ldr	r0, [pc, #36]	; (43b4 <z_priq_dumb_remove+0x40>)
    438e:	f240 31b5 	movw	r1, #949	; 0x3b5
    4392:	f001 fae4 	bl	595e <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    4396:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
    439a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    439c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    439e:	2300      	movs	r3, #0
	node->prev = NULL;
    43a0:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    43a4:	bd10      	pop	{r4, pc}
    43a6:	bf00      	nop
    43a8:	20000070 	.word	0x20000070
    43ac:	00006f7b 	.word	0x00006f7b
    43b0:	00006321 	.word	0x00006321
    43b4:	00006f59 	.word	0x00006f59

000043b8 <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
    43b8:	6883      	ldr	r3, [r0, #8]
{
    43ba:	b510      	push	{r4, lr}
    43bc:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    43be:	b95b      	cbnz	r3, 43d8 <unpend_thread_no_timeout+0x20>
    43c0:	490b      	ldr	r1, [pc, #44]	; (43f0 <unpend_thread_no_timeout+0x38>)
    43c2:	480c      	ldr	r0, [pc, #48]	; (43f4 <unpend_thread_no_timeout+0x3c>)
    43c4:	4a0c      	ldr	r2, [pc, #48]	; (43f8 <unpend_thread_no_timeout+0x40>)
    43c6:	f240 2353 	movw	r3, #595	; 0x253
    43ca:	f001 fa01 	bl	57d0 <printk>
    43ce:	480a      	ldr	r0, [pc, #40]	; (43f8 <unpend_thread_no_timeout+0x40>)
    43d0:	f240 2153 	movw	r1, #595	; 0x253
    43d4:	f001 fac3 	bl	595e <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    43d8:	68a0      	ldr	r0, [r4, #8]
    43da:	4621      	mov	r1, r4
    43dc:	f7ff ffca 	bl	4374 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    43e0:	7b63      	ldrb	r3, [r4, #13]
    43e2:	f023 0302 	bic.w	r3, r3, #2
    43e6:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    43e8:	2300      	movs	r3, #0
    43ea:	60a3      	str	r3, [r4, #8]
}
    43ec:	bd10      	pop	{r4, pc}
    43ee:	bf00      	nop
    43f0:	0000700a 	.word	0x0000700a
    43f4:	00006321 	.word	0x00006321
    43f8:	00006f59 	.word	0x00006f59

000043fc <update_cache>:
{
    43fc:	b538      	push	{r3, r4, r5, lr}
    43fe:	4602      	mov	r2, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
    4400:	4814      	ldr	r0, [pc, #80]	; (4454 <update_cache+0x58>)
    4402:	4d15      	ldr	r5, [pc, #84]	; (4458 <update_cache+0x5c>)
    4404:	f001 fdb9 	bl	5f7a <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    4408:	4604      	mov	r4, r0
    440a:	b900      	cbnz	r0, 440e <update_cache+0x12>
    440c:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
    440e:	b9ca      	cbnz	r2, 4444 <update_cache+0x48>
	__ASSERT(_current != NULL, "");
    4410:	68ab      	ldr	r3, [r5, #8]
    4412:	b963      	cbnz	r3, 442e <update_cache+0x32>
    4414:	4911      	ldr	r1, [pc, #68]	; (445c <update_cache+0x60>)
    4416:	4a12      	ldr	r2, [pc, #72]	; (4460 <update_cache+0x64>)
    4418:	4812      	ldr	r0, [pc, #72]	; (4464 <update_cache+0x68>)
    441a:	2381      	movs	r3, #129	; 0x81
    441c:	f001 f9d8 	bl	57d0 <printk>
    4420:	4811      	ldr	r0, [pc, #68]	; (4468 <update_cache+0x6c>)
    4422:	f001 f9d5 	bl	57d0 <printk>
    4426:	480e      	ldr	r0, [pc, #56]	; (4460 <update_cache+0x64>)
    4428:	2181      	movs	r1, #129	; 0x81
    442a:	f001 fa98 	bl	595e <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
    442e:	68ab      	ldr	r3, [r5, #8]
    4430:	7b5a      	ldrb	r2, [r3, #13]
    4432:	06d2      	lsls	r2, r2, #27
    4434:	d106      	bne.n	4444 <update_cache+0x48>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    4436:	69a2      	ldr	r2, [r4, #24]
    4438:	b922      	cbnz	r2, 4444 <update_cache+0x48>
	if (is_preempt(_current) || is_metairq(thread)) {
    443a:	89da      	ldrh	r2, [r3, #14]
    443c:	2a7f      	cmp	r2, #127	; 0x7f
    443e:	d901      	bls.n	4444 <update_cache+0x48>
		_kernel.ready_q.cache = _current;
    4440:	61eb      	str	r3, [r5, #28]
}
    4442:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    4444:	68ab      	ldr	r3, [r5, #8]
    4446:	42a3      	cmp	r3, r4
    4448:	d001      	beq.n	444e <update_cache+0x52>
			z_reset_time_slice();
    444a:	f7ff fe5f 	bl	410c <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    444e:	61ec      	str	r4, [r5, #28]
}
    4450:	e7f7      	b.n	4442 <update_cache+0x46>
    4452:	bf00      	nop
    4454:	200002fc 	.word	0x200002fc
    4458:	200002dc 	.word	0x200002dc
    445c:	00007021 	.word	0x00007021
    4460:	00006f59 	.word	0x00006f59
    4464:	00006321 	.word	0x00006321
    4468:	00006f56 	.word	0x00006f56

0000446c <move_thread_to_end_of_prio_q>:
{
    446c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    446e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    4472:	7b43      	ldrb	r3, [r0, #13]
    4474:	2a00      	cmp	r2, #0
{
    4476:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    4478:	da06      	bge.n	4488 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    447a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    447e:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
    4480:	4601      	mov	r1, r0
    4482:	481e      	ldr	r0, [pc, #120]	; (44fc <move_thread_to_end_of_prio_q+0x90>)
    4484:	f7ff ff76 	bl	4374 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    4488:	7b63      	ldrb	r3, [r4, #13]
    448a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    448e:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    4490:	4b1b      	ldr	r3, [pc, #108]	; (4500 <move_thread_to_end_of_prio_q+0x94>)
    4492:	429c      	cmp	r4, r3
    4494:	d109      	bne.n	44aa <move_thread_to_end_of_prio_q+0x3e>
    4496:	491b      	ldr	r1, [pc, #108]	; (4504 <move_thread_to_end_of_prio_q+0x98>)
    4498:	481b      	ldr	r0, [pc, #108]	; (4508 <move_thread_to_end_of_prio_q+0x9c>)
    449a:	4a1c      	ldr	r2, [pc, #112]	; (450c <move_thread_to_end_of_prio_q+0xa0>)
    449c:	23b1      	movs	r3, #177	; 0xb1
    449e:	f001 f997 	bl	57d0 <printk>
    44a2:	481a      	ldr	r0, [pc, #104]	; (450c <move_thread_to_end_of_prio_q+0xa0>)
    44a4:	21b1      	movs	r1, #177	; 0xb1
    44a6:	f001 fa5a 	bl	595e <assert_post_action>
	return list->head == list;
    44aa:	4a19      	ldr	r2, [pc, #100]	; (4510 <move_thread_to_end_of_prio_q+0xa4>)
	return (node == list->tail) ? NULL : node->next;
    44ac:	e9d2 3008 	ldrd	r3, r0, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    44b0:	f102 0520 	add.w	r5, r2, #32
    44b4:	42ab      	cmp	r3, r5
    44b6:	d01b      	beq.n	44f0 <move_thread_to_end_of_prio_q+0x84>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    44b8:	b1d3      	cbz	r3, 44f0 <move_thread_to_end_of_prio_q+0x84>
	int32_t b1 = thread_1->base.prio;
    44ba:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    44be:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    44c2:	428e      	cmp	r6, r1
    44c4:	d00f      	beq.n	44e6 <move_thread_to_end_of_prio_q+0x7a>
		return b2 - b1;
    44c6:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    44c8:	2900      	cmp	r1, #0
    44ca:	dd0c      	ble.n	44e6 <move_thread_to_end_of_prio_q+0x7a>
	sys_dnode_t *const prev = successor->prev;
    44cc:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    44ce:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    44d2:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    44d4:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
    44d6:	6890      	ldr	r0, [r2, #8]
    44d8:	1b03      	subs	r3, r0, r4
    44da:	4258      	negs	r0, r3
}
    44dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    44e0:	4158      	adcs	r0, r3
    44e2:	f7ff bf8b 	b.w	43fc <update_cache>
	return (node == list->tail) ? NULL : node->next;
    44e6:	4283      	cmp	r3, r0
    44e8:	d002      	beq.n	44f0 <move_thread_to_end_of_prio_q+0x84>
    44ea:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    44ec:	2b00      	cmp	r3, #0
    44ee:	d1e6      	bne.n	44be <move_thread_to_end_of_prio_q+0x52>
	node->prev = tail;
    44f0:	e9c4 5000 	strd	r5, r0, [r4]
	tail->next = node;
    44f4:	6004      	str	r4, [r0, #0]
	list->tail = node;
    44f6:	6254      	str	r4, [r2, #36]	; 0x24
}
    44f8:	e7ed      	b.n	44d6 <move_thread_to_end_of_prio_q+0x6a>
    44fa:	bf00      	nop
    44fc:	200002fc 	.word	0x200002fc
    4500:	20000070 	.word	0x20000070
    4504:	00006f7b 	.word	0x00006f7b
    4508:	00006321 	.word	0x00006321
    450c:	00006f59 	.word	0x00006f59
    4510:	200002dc 	.word	0x200002dc

00004514 <z_time_slice>:
{
    4514:	b538      	push	{r3, r4, r5, lr}
    4516:	4604      	mov	r4, r0
	__asm__ volatile(
    4518:	f04f 0320 	mov.w	r3, #32
    451c:	f3ef 8511 	mrs	r5, BASEPRI
    4520:	f383 8812 	msr	BASEPRI_MAX, r3
    4524:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4528:	4829      	ldr	r0, [pc, #164]	; (45d0 <z_time_slice+0xbc>)
    452a:	f7ff fcd5 	bl	3ed8 <z_spin_lock_valid>
    452e:	b968      	cbnz	r0, 454c <z_time_slice+0x38>
    4530:	4a28      	ldr	r2, [pc, #160]	; (45d4 <z_time_slice+0xc0>)
    4532:	4929      	ldr	r1, [pc, #164]	; (45d8 <z_time_slice+0xc4>)
    4534:	4829      	ldr	r0, [pc, #164]	; (45dc <z_time_slice+0xc8>)
    4536:	2381      	movs	r3, #129	; 0x81
    4538:	f001 f94a 	bl	57d0 <printk>
    453c:	4924      	ldr	r1, [pc, #144]	; (45d0 <z_time_slice+0xbc>)
    453e:	4828      	ldr	r0, [pc, #160]	; (45e0 <z_time_slice+0xcc>)
    4540:	f001 f946 	bl	57d0 <printk>
    4544:	4823      	ldr	r0, [pc, #140]	; (45d4 <z_time_slice+0xc0>)
    4546:	2181      	movs	r1, #129	; 0x81
    4548:	f001 fa09 	bl	595e <assert_post_action>
	z_spin_lock_set_owner(l);
    454c:	4820      	ldr	r0, [pc, #128]	; (45d0 <z_time_slice+0xbc>)
    454e:	f7ff fce1 	bl	3f14 <z_spin_lock_set_owner>
	if (pending_current == _current) {
    4552:	4b24      	ldr	r3, [pc, #144]	; (45e4 <z_time_slice+0xd0>)
    4554:	4a24      	ldr	r2, [pc, #144]	; (45e8 <z_time_slice+0xd4>)
    4556:	6898      	ldr	r0, [r3, #8]
    4558:	6811      	ldr	r1, [r2, #0]
    455a:	4288      	cmp	r0, r1
    455c:	d118      	bne.n	4590 <z_time_slice+0x7c>
			z_reset_time_slice();
    455e:	f7ff fdd5 	bl	410c <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4562:	481b      	ldr	r0, [pc, #108]	; (45d0 <z_time_slice+0xbc>)
    4564:	f7ff fcc6 	bl	3ef4 <z_spin_unlock_valid>
    4568:	b968      	cbnz	r0, 4586 <z_time_slice+0x72>
    456a:	4a1a      	ldr	r2, [pc, #104]	; (45d4 <z_time_slice+0xc0>)
    456c:	491f      	ldr	r1, [pc, #124]	; (45ec <z_time_slice+0xd8>)
    456e:	481b      	ldr	r0, [pc, #108]	; (45dc <z_time_slice+0xc8>)
    4570:	23ac      	movs	r3, #172	; 0xac
    4572:	f001 f92d 	bl	57d0 <printk>
    4576:	4916      	ldr	r1, [pc, #88]	; (45d0 <z_time_slice+0xbc>)
    4578:	481d      	ldr	r0, [pc, #116]	; (45f0 <z_time_slice+0xdc>)
    457a:	f001 f929 	bl	57d0 <printk>
    457e:	4815      	ldr	r0, [pc, #84]	; (45d4 <z_time_slice+0xc0>)
    4580:	21ac      	movs	r1, #172	; 0xac
    4582:	f001 f9ec 	bl	595e <assert_post_action>
	__asm__ volatile(
    4586:	f385 8811 	msr	BASEPRI, r5
    458a:	f3bf 8f6f 	isb	sy
}
    458e:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    4590:	2100      	movs	r1, #0
    4592:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
    4594:	4a17      	ldr	r2, [pc, #92]	; (45f4 <z_time_slice+0xe0>)
    4596:	6812      	ldr	r2, [r2, #0]
    4598:	b1ba      	cbz	r2, 45ca <z_time_slice+0xb6>
		&& !z_is_idle_thread_object(thread);
    459a:	89c2      	ldrh	r2, [r0, #14]
    459c:	2a7f      	cmp	r2, #127	; 0x7f
    459e:	d814      	bhi.n	45ca <z_time_slice+0xb6>
		&& !z_is_thread_prevented_from_running(thread)
    45a0:	7b42      	ldrb	r2, [r0, #13]
    45a2:	06d2      	lsls	r2, r2, #27
    45a4:	d111      	bne.n	45ca <z_time_slice+0xb6>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    45a6:	4a14      	ldr	r2, [pc, #80]	; (45f8 <z_time_slice+0xe4>)
    45a8:	f990 100e 	ldrsb.w	r1, [r0, #14]
    45ac:	6812      	ldr	r2, [r2, #0]
    45ae:	4291      	cmp	r1, r2
    45b0:	db0b      	blt.n	45ca <z_time_slice+0xb6>
		&& !z_is_idle_thread_object(thread);
    45b2:	4a12      	ldr	r2, [pc, #72]	; (45fc <z_time_slice+0xe8>)
    45b4:	4290      	cmp	r0, r2
    45b6:	d008      	beq.n	45ca <z_time_slice+0xb6>
		if (ticks >= _current_cpu->slice_ticks) {
    45b8:	691a      	ldr	r2, [r3, #16]
    45ba:	42a2      	cmp	r2, r4
    45bc:	dc02      	bgt.n	45c4 <z_time_slice+0xb0>
			move_thread_to_end_of_prio_q(_current);
    45be:	f7ff ff55 	bl	446c <move_thread_to_end_of_prio_q>
    45c2:	e7cc      	b.n	455e <z_time_slice+0x4a>
			_current_cpu->slice_ticks -= ticks;
    45c4:	1b12      	subs	r2, r2, r4
		_current_cpu->slice_ticks = 0;
    45c6:	611a      	str	r2, [r3, #16]
    45c8:	e7cb      	b.n	4562 <z_time_slice+0x4e>
    45ca:	2200      	movs	r2, #0
    45cc:	e7fb      	b.n	45c6 <z_time_slice+0xb2>
    45ce:	bf00      	nop
    45d0:	2000030c 	.word	0x2000030c
    45d4:	000064a7 	.word	0x000064a7
    45d8:	000064f9 	.word	0x000064f9
    45dc:	00006321 	.word	0x00006321
    45e0:	0000650e 	.word	0x0000650e
    45e4:	200002dc 	.word	0x200002dc
    45e8:	20000308 	.word	0x20000308
    45ec:	000064cd 	.word	0x000064cd
    45f0:	000064e4 	.word	0x000064e4
    45f4:	20000314 	.word	0x20000314
    45f8:	20000310 	.word	0x20000310
    45fc:	20000070 	.word	0x20000070

00004600 <ready_thread>:
{
    4600:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    4602:	f990 200d 	ldrsb.w	r2, [r0, #13]
    4606:	7b43      	ldrb	r3, [r0, #13]
    4608:	2a00      	cmp	r2, #0
{
    460a:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    460c:	db39      	blt.n	4682 <ready_thread+0x82>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    460e:	06da      	lsls	r2, r3, #27
    4610:	d137      	bne.n	4682 <ready_thread+0x82>
    4612:	6982      	ldr	r2, [r0, #24]
    4614:	2a00      	cmp	r2, #0
    4616:	d134      	bne.n	4682 <ready_thread+0x82>
	thread->base.thread_state |= _THREAD_QUEUED;
    4618:	f063 037f 	orn	r3, r3, #127	; 0x7f
    461c:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    461e:	4b19      	ldr	r3, [pc, #100]	; (4684 <ready_thread+0x84>)
    4620:	4298      	cmp	r0, r3
    4622:	d109      	bne.n	4638 <ready_thread+0x38>
    4624:	4918      	ldr	r1, [pc, #96]	; (4688 <ready_thread+0x88>)
    4626:	4819      	ldr	r0, [pc, #100]	; (468c <ready_thread+0x8c>)
    4628:	4a19      	ldr	r2, [pc, #100]	; (4690 <ready_thread+0x90>)
    462a:	23b1      	movs	r3, #177	; 0xb1
    462c:	f001 f8d0 	bl	57d0 <printk>
    4630:	4817      	ldr	r0, [pc, #92]	; (4690 <ready_thread+0x90>)
    4632:	21b1      	movs	r1, #177	; 0xb1
    4634:	f001 f993 	bl	595e <assert_post_action>
	return list->head == list;
    4638:	4a16      	ldr	r2, [pc, #88]	; (4694 <ready_thread+0x94>)
	return (node == list->tail) ? NULL : node->next;
    463a:	e9d2 3008 	ldrd	r3, r0, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    463e:	f102 0520 	add.w	r5, r2, #32
    4642:	42ab      	cmp	r3, r5
    4644:	d018      	beq.n	4678 <ready_thread+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4646:	b1bb      	cbz	r3, 4678 <ready_thread+0x78>
	int32_t b1 = thread_1->base.prio;
    4648:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    464c:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    4650:	428e      	cmp	r6, r1
    4652:	d00c      	beq.n	466e <ready_thread+0x6e>
		return b2 - b1;
    4654:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    4656:	2900      	cmp	r1, #0
    4658:	dd09      	ble.n	466e <ready_thread+0x6e>
	sys_dnode_t *const prev = successor->prev;
    465a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    465c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    4660:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    4662:	605c      	str	r4, [r3, #4]
}
    4664:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
    4668:	2000      	movs	r0, #0
    466a:	f7ff bec7 	b.w	43fc <update_cache>
	return (node == list->tail) ? NULL : node->next;
    466e:	4298      	cmp	r0, r3
    4670:	d002      	beq.n	4678 <ready_thread+0x78>
    4672:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4674:	2b00      	cmp	r3, #0
    4676:	d1e9      	bne.n	464c <ready_thread+0x4c>
	node->prev = tail;
    4678:	e9c4 5000 	strd	r5, r0, [r4]
	tail->next = node;
    467c:	6004      	str	r4, [r0, #0]
	list->tail = node;
    467e:	6254      	str	r4, [r2, #36]	; 0x24
}
    4680:	e7f0      	b.n	4664 <ready_thread+0x64>
}
    4682:	bd70      	pop	{r4, r5, r6, pc}
    4684:	20000070 	.word	0x20000070
    4688:	00006f7b 	.word	0x00006f7b
    468c:	00006321 	.word	0x00006321
    4690:	00006f59 	.word	0x00006f59
    4694:	200002dc 	.word	0x200002dc

00004698 <z_ready_thread>:
{
    4698:	b538      	push	{r3, r4, r5, lr}
    469a:	4604      	mov	r4, r0
	__asm__ volatile(
    469c:	f04f 0320 	mov.w	r3, #32
    46a0:	f3ef 8511 	mrs	r5, BASEPRI
    46a4:	f383 8812 	msr	BASEPRI_MAX, r3
    46a8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    46ac:	4817      	ldr	r0, [pc, #92]	; (470c <z_ready_thread+0x74>)
    46ae:	f7ff fc13 	bl	3ed8 <z_spin_lock_valid>
    46b2:	b968      	cbnz	r0, 46d0 <z_ready_thread+0x38>
    46b4:	4a16      	ldr	r2, [pc, #88]	; (4710 <z_ready_thread+0x78>)
    46b6:	4917      	ldr	r1, [pc, #92]	; (4714 <z_ready_thread+0x7c>)
    46b8:	4817      	ldr	r0, [pc, #92]	; (4718 <z_ready_thread+0x80>)
    46ba:	2381      	movs	r3, #129	; 0x81
    46bc:	f001 f888 	bl	57d0 <printk>
    46c0:	4912      	ldr	r1, [pc, #72]	; (470c <z_ready_thread+0x74>)
    46c2:	4816      	ldr	r0, [pc, #88]	; (471c <z_ready_thread+0x84>)
    46c4:	f001 f884 	bl	57d0 <printk>
    46c8:	4811      	ldr	r0, [pc, #68]	; (4710 <z_ready_thread+0x78>)
    46ca:	2181      	movs	r1, #129	; 0x81
    46cc:	f001 f947 	bl	595e <assert_post_action>
	z_spin_lock_set_owner(l);
    46d0:	480e      	ldr	r0, [pc, #56]	; (470c <z_ready_thread+0x74>)
    46d2:	f7ff fc1f 	bl	3f14 <z_spin_lock_set_owner>
			ready_thread(thread);
    46d6:	4620      	mov	r0, r4
    46d8:	f7ff ff92 	bl	4600 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    46dc:	480b      	ldr	r0, [pc, #44]	; (470c <z_ready_thread+0x74>)
    46de:	f7ff fc09 	bl	3ef4 <z_spin_unlock_valid>
    46e2:	b968      	cbnz	r0, 4700 <z_ready_thread+0x68>
    46e4:	4a0a      	ldr	r2, [pc, #40]	; (4710 <z_ready_thread+0x78>)
    46e6:	490e      	ldr	r1, [pc, #56]	; (4720 <z_ready_thread+0x88>)
    46e8:	480b      	ldr	r0, [pc, #44]	; (4718 <z_ready_thread+0x80>)
    46ea:	23ac      	movs	r3, #172	; 0xac
    46ec:	f001 f870 	bl	57d0 <printk>
    46f0:	4906      	ldr	r1, [pc, #24]	; (470c <z_ready_thread+0x74>)
    46f2:	480c      	ldr	r0, [pc, #48]	; (4724 <z_ready_thread+0x8c>)
    46f4:	f001 f86c 	bl	57d0 <printk>
    46f8:	4805      	ldr	r0, [pc, #20]	; (4710 <z_ready_thread+0x78>)
    46fa:	21ac      	movs	r1, #172	; 0xac
    46fc:	f001 f92f 	bl	595e <assert_post_action>
	__asm__ volatile(
    4700:	f385 8811 	msr	BASEPRI, r5
    4704:	f3bf 8f6f 	isb	sy
}
    4708:	bd38      	pop	{r3, r4, r5, pc}
    470a:	bf00      	nop
    470c:	2000030c 	.word	0x2000030c
    4710:	000064a7 	.word	0x000064a7
    4714:	000064f9 	.word	0x000064f9
    4718:	00006321 	.word	0x00006321
    471c:	0000650e 	.word	0x0000650e
    4720:	000064cd 	.word	0x000064cd
    4724:	000064e4 	.word	0x000064e4

00004728 <z_sched_start>:
{
    4728:	b538      	push	{r3, r4, r5, lr}
    472a:	4604      	mov	r4, r0
	__asm__ volatile(
    472c:	f04f 0320 	mov.w	r3, #32
    4730:	f3ef 8511 	mrs	r5, BASEPRI
    4734:	f383 8812 	msr	BASEPRI_MAX, r3
    4738:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    473c:	481d      	ldr	r0, [pc, #116]	; (47b4 <z_sched_start+0x8c>)
    473e:	f7ff fbcb 	bl	3ed8 <z_spin_lock_valid>
    4742:	b968      	cbnz	r0, 4760 <z_sched_start+0x38>
    4744:	4a1c      	ldr	r2, [pc, #112]	; (47b8 <z_sched_start+0x90>)
    4746:	491d      	ldr	r1, [pc, #116]	; (47bc <z_sched_start+0x94>)
    4748:	481d      	ldr	r0, [pc, #116]	; (47c0 <z_sched_start+0x98>)
    474a:	2381      	movs	r3, #129	; 0x81
    474c:	f001 f840 	bl	57d0 <printk>
    4750:	4918      	ldr	r1, [pc, #96]	; (47b4 <z_sched_start+0x8c>)
    4752:	481c      	ldr	r0, [pc, #112]	; (47c4 <z_sched_start+0x9c>)
    4754:	f001 f83c 	bl	57d0 <printk>
    4758:	4817      	ldr	r0, [pc, #92]	; (47b8 <z_sched_start+0x90>)
    475a:	2181      	movs	r1, #129	; 0x81
    475c:	f001 f8ff 	bl	595e <assert_post_action>
	z_spin_lock_set_owner(l);
    4760:	4814      	ldr	r0, [pc, #80]	; (47b4 <z_sched_start+0x8c>)
    4762:	f7ff fbd7 	bl	3f14 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    4766:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
    4768:	075a      	lsls	r2, r3, #29
    476a:	d416      	bmi.n	479a <z_sched_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    476c:	4811      	ldr	r0, [pc, #68]	; (47b4 <z_sched_start+0x8c>)
    476e:	f7ff fbc1 	bl	3ef4 <z_spin_unlock_valid>
    4772:	b968      	cbnz	r0, 4790 <z_sched_start+0x68>
    4774:	4a10      	ldr	r2, [pc, #64]	; (47b8 <z_sched_start+0x90>)
    4776:	4914      	ldr	r1, [pc, #80]	; (47c8 <z_sched_start+0xa0>)
    4778:	4811      	ldr	r0, [pc, #68]	; (47c0 <z_sched_start+0x98>)
    477a:	23ac      	movs	r3, #172	; 0xac
    477c:	f001 f828 	bl	57d0 <printk>
    4780:	490c      	ldr	r1, [pc, #48]	; (47b4 <z_sched_start+0x8c>)
    4782:	4812      	ldr	r0, [pc, #72]	; (47cc <z_sched_start+0xa4>)
    4784:	f001 f824 	bl	57d0 <printk>
    4788:	480b      	ldr	r0, [pc, #44]	; (47b8 <z_sched_start+0x90>)
    478a:	21ac      	movs	r1, #172	; 0xac
    478c:	f001 f8e7 	bl	595e <assert_post_action>
	__asm__ volatile(
    4790:	f385 8811 	msr	BASEPRI, r5
    4794:	f3bf 8f6f 	isb	sy
}
    4798:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    479a:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
    479e:	4620      	mov	r0, r4
    47a0:	7363      	strb	r3, [r4, #13]
    47a2:	f7ff ff2d 	bl	4600 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    47a6:	4629      	mov	r1, r5
    47a8:	4802      	ldr	r0, [pc, #8]	; (47b4 <z_sched_start+0x8c>)
}
    47aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
    47ae:	f7ff bd29 	b.w	4204 <z_reschedule>
    47b2:	bf00      	nop
    47b4:	2000030c 	.word	0x2000030c
    47b8:	000064a7 	.word	0x000064a7
    47bc:	000064f9 	.word	0x000064f9
    47c0:	00006321 	.word	0x00006321
    47c4:	0000650e 	.word	0x0000650e
    47c8:	000064cd 	.word	0x000064cd
    47cc:	000064e4 	.word	0x000064e4

000047d0 <z_thread_timeout>:
{
    47d0:	b570      	push	{r4, r5, r6, lr}
    47d2:	4604      	mov	r4, r0
	__asm__ volatile(
    47d4:	f04f 0320 	mov.w	r3, #32
    47d8:	f3ef 8611 	mrs	r6, BASEPRI
    47dc:	f383 8812 	msr	BASEPRI_MAX, r3
    47e0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    47e4:	4820      	ldr	r0, [pc, #128]	; (4868 <z_thread_timeout+0x98>)
    47e6:	f7ff fb77 	bl	3ed8 <z_spin_lock_valid>
    47ea:	b968      	cbnz	r0, 4808 <z_thread_timeout+0x38>
    47ec:	4a1f      	ldr	r2, [pc, #124]	; (486c <z_thread_timeout+0x9c>)
    47ee:	4920      	ldr	r1, [pc, #128]	; (4870 <z_thread_timeout+0xa0>)
    47f0:	4820      	ldr	r0, [pc, #128]	; (4874 <z_thread_timeout+0xa4>)
    47f2:	2381      	movs	r3, #129	; 0x81
    47f4:	f000 ffec 	bl	57d0 <printk>
    47f8:	491b      	ldr	r1, [pc, #108]	; (4868 <z_thread_timeout+0x98>)
    47fa:	481f      	ldr	r0, [pc, #124]	; (4878 <z_thread_timeout+0xa8>)
    47fc:	f000 ffe8 	bl	57d0 <printk>
    4800:	481a      	ldr	r0, [pc, #104]	; (486c <z_thread_timeout+0x9c>)
    4802:	2181      	movs	r1, #129	; 0x81
    4804:	f001 f8ab 	bl	595e <assert_post_action>
	z_spin_lock_set_owner(l);
    4808:	4817      	ldr	r0, [pc, #92]	; (4868 <z_thread_timeout+0x98>)
    480a:	f7ff fb83 	bl	3f14 <z_spin_lock_set_owner>
		if (!killed) {
    480e:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    4812:	f013 0f28 	tst.w	r3, #40	; 0x28
    4816:	d110      	bne.n	483a <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
    4818:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    481c:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
    4820:	b113      	cbz	r3, 4828 <z_thread_timeout+0x58>
				unpend_thread_no_timeout(thread);
    4822:	4628      	mov	r0, r5
    4824:	f7ff fdc8 	bl	43b8 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    4828:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    482c:	f023 0314 	bic.w	r3, r3, #20
    4830:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    4834:	4628      	mov	r0, r5
    4836:	f7ff fee3 	bl	4600 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    483a:	480b      	ldr	r0, [pc, #44]	; (4868 <z_thread_timeout+0x98>)
    483c:	f7ff fb5a 	bl	3ef4 <z_spin_unlock_valid>
    4840:	b968      	cbnz	r0, 485e <z_thread_timeout+0x8e>
    4842:	4a0a      	ldr	r2, [pc, #40]	; (486c <z_thread_timeout+0x9c>)
    4844:	490d      	ldr	r1, [pc, #52]	; (487c <z_thread_timeout+0xac>)
    4846:	480b      	ldr	r0, [pc, #44]	; (4874 <z_thread_timeout+0xa4>)
    4848:	23ac      	movs	r3, #172	; 0xac
    484a:	f000 ffc1 	bl	57d0 <printk>
    484e:	4906      	ldr	r1, [pc, #24]	; (4868 <z_thread_timeout+0x98>)
    4850:	480b      	ldr	r0, [pc, #44]	; (4880 <z_thread_timeout+0xb0>)
    4852:	f000 ffbd 	bl	57d0 <printk>
    4856:	4805      	ldr	r0, [pc, #20]	; (486c <z_thread_timeout+0x9c>)
    4858:	21ac      	movs	r1, #172	; 0xac
    485a:	f001 f880 	bl	595e <assert_post_action>
	__asm__ volatile(
    485e:	f386 8811 	msr	BASEPRI, r6
    4862:	f3bf 8f6f 	isb	sy
}
    4866:	bd70      	pop	{r4, r5, r6, pc}
    4868:	2000030c 	.word	0x2000030c
    486c:	000064a7 	.word	0x000064a7
    4870:	000064f9 	.word	0x000064f9
    4874:	00006321 	.word	0x00006321
    4878:	0000650e 	.word	0x0000650e
    487c:	000064cd 	.word	0x000064cd
    4880:	000064e4 	.word	0x000064e4

00004884 <unready_thread>:
{
    4884:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
    4886:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    488a:	7b43      	ldrb	r3, [r0, #13]
    488c:	2a00      	cmp	r2, #0
{
    488e:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    4890:	da06      	bge.n	48a0 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4892:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4896:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
    4898:	4601      	mov	r1, r0
    489a:	4806      	ldr	r0, [pc, #24]	; (48b4 <unready_thread+0x30>)
    489c:	f7ff fd6a 	bl	4374 <z_priq_dumb_remove>
	update_cache(thread == _current);
    48a0:	4b05      	ldr	r3, [pc, #20]	; (48b8 <unready_thread+0x34>)
    48a2:	6898      	ldr	r0, [r3, #8]
    48a4:	1b03      	subs	r3, r0, r4
    48a6:	4258      	negs	r0, r3
}
    48a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
    48ac:	4158      	adcs	r0, r3
    48ae:	f7ff bda5 	b.w	43fc <update_cache>
    48b2:	bf00      	nop
    48b4:	200002fc 	.word	0x200002fc
    48b8:	200002dc 	.word	0x200002dc

000048bc <add_to_waitq_locked>:
{
    48bc:	b538      	push	{r3, r4, r5, lr}
    48be:	4604      	mov	r4, r0
    48c0:	460d      	mov	r5, r1
	unready_thread(thread);
    48c2:	f7ff ffdf 	bl	4884 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    48c6:	7b63      	ldrb	r3, [r4, #13]
    48c8:	f043 0302 	orr.w	r3, r3, #2
    48cc:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    48ce:	b1fd      	cbz	r5, 4910 <add_to_waitq_locked+0x54>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    48d0:	4b16      	ldr	r3, [pc, #88]	; (492c <add_to_waitq_locked+0x70>)
		thread->base.pended_on = wait_q;
    48d2:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    48d4:	429c      	cmp	r4, r3
    48d6:	d109      	bne.n	48ec <add_to_waitq_locked+0x30>
    48d8:	4915      	ldr	r1, [pc, #84]	; (4930 <add_to_waitq_locked+0x74>)
    48da:	4816      	ldr	r0, [pc, #88]	; (4934 <add_to_waitq_locked+0x78>)
    48dc:	4a16      	ldr	r2, [pc, #88]	; (4938 <add_to_waitq_locked+0x7c>)
    48de:	23b1      	movs	r3, #177	; 0xb1
    48e0:	f000 ff76 	bl	57d0 <printk>
    48e4:	4814      	ldr	r0, [pc, #80]	; (4938 <add_to_waitq_locked+0x7c>)
    48e6:	21b1      	movs	r1, #177	; 0xb1
    48e8:	f001 f839 	bl	595e <assert_post_action>
	return list->head == list;
    48ec:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    48ee:	429d      	cmp	r5, r3
    48f0:	d015      	beq.n	491e <add_to_waitq_locked+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    48f2:	b1a3      	cbz	r3, 491e <add_to_waitq_locked+0x62>
	int32_t b1 = thread_1->base.prio;
    48f4:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    48f8:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    48fc:	4291      	cmp	r1, r2
    48fe:	d008      	beq.n	4912 <add_to_waitq_locked+0x56>
		return b2 - b1;
    4900:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    4902:	2a00      	cmp	r2, #0
    4904:	dd05      	ble.n	4912 <add_to_waitq_locked+0x56>
	sys_dnode_t *const prev = successor->prev;
    4906:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    4908:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    490c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    490e:	605c      	str	r4, [r3, #4]
}
    4910:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    4912:	686a      	ldr	r2, [r5, #4]
    4914:	4293      	cmp	r3, r2
    4916:	d002      	beq.n	491e <add_to_waitq_locked+0x62>
    4918:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    491a:	2b00      	cmp	r3, #0
    491c:	d1ec      	bne.n	48f8 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const tail = list->tail;
    491e:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    4920:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    4924:	601c      	str	r4, [r3, #0]
	list->tail = node;
    4926:	606c      	str	r4, [r5, #4]
}
    4928:	e7f2      	b.n	4910 <add_to_waitq_locked+0x54>
    492a:	bf00      	nop
    492c:	20000070 	.word	0x20000070
    4930:	00006f7b 	.word	0x00006f7b
    4934:	00006321 	.word	0x00006321
    4938:	00006f59 	.word	0x00006f59

0000493c <pend>:
{
    493c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4940:	4604      	mov	r4, r0
    4942:	4688      	mov	r8, r1
    4944:	4616      	mov	r6, r2
    4946:	461d      	mov	r5, r3
	__asm__ volatile(
    4948:	f04f 0320 	mov.w	r3, #32
    494c:	f3ef 8711 	mrs	r7, BASEPRI
    4950:	f383 8812 	msr	BASEPRI_MAX, r3
    4954:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4958:	481f      	ldr	r0, [pc, #124]	; (49d8 <pend+0x9c>)
    495a:	f7ff fabd 	bl	3ed8 <z_spin_lock_valid>
    495e:	b968      	cbnz	r0, 497c <pend+0x40>
    4960:	4a1e      	ldr	r2, [pc, #120]	; (49dc <pend+0xa0>)
    4962:	491f      	ldr	r1, [pc, #124]	; (49e0 <pend+0xa4>)
    4964:	481f      	ldr	r0, [pc, #124]	; (49e4 <pend+0xa8>)
    4966:	2381      	movs	r3, #129	; 0x81
    4968:	f000 ff32 	bl	57d0 <printk>
    496c:	491a      	ldr	r1, [pc, #104]	; (49d8 <pend+0x9c>)
    496e:	481e      	ldr	r0, [pc, #120]	; (49e8 <pend+0xac>)
    4970:	f000 ff2e 	bl	57d0 <printk>
    4974:	4819      	ldr	r0, [pc, #100]	; (49dc <pend+0xa0>)
    4976:	2181      	movs	r1, #129	; 0x81
    4978:	f000 fff1 	bl	595e <assert_post_action>
	z_spin_lock_set_owner(l);
    497c:	4816      	ldr	r0, [pc, #88]	; (49d8 <pend+0x9c>)
    497e:	f7ff fac9 	bl	3f14 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
    4982:	4620      	mov	r0, r4
    4984:	4641      	mov	r1, r8
    4986:	f7ff ff99 	bl	48bc <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    498a:	4813      	ldr	r0, [pc, #76]	; (49d8 <pend+0x9c>)
    498c:	f7ff fab2 	bl	3ef4 <z_spin_unlock_valid>
    4990:	b968      	cbnz	r0, 49ae <pend+0x72>
    4992:	4a12      	ldr	r2, [pc, #72]	; (49dc <pend+0xa0>)
    4994:	4915      	ldr	r1, [pc, #84]	; (49ec <pend+0xb0>)
    4996:	4813      	ldr	r0, [pc, #76]	; (49e4 <pend+0xa8>)
    4998:	23ac      	movs	r3, #172	; 0xac
    499a:	f000 ff19 	bl	57d0 <printk>
    499e:	490e      	ldr	r1, [pc, #56]	; (49d8 <pend+0x9c>)
    49a0:	4813      	ldr	r0, [pc, #76]	; (49f0 <pend+0xb4>)
    49a2:	f000 ff15 	bl	57d0 <printk>
    49a6:	480d      	ldr	r0, [pc, #52]	; (49dc <pend+0xa0>)
    49a8:	21ac      	movs	r1, #172	; 0xac
    49aa:	f000 ffd8 	bl	595e <assert_post_action>
	__asm__ volatile(
    49ae:	f387 8811 	msr	BASEPRI, r7
    49b2:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    49b6:	f1b5 3fff 	cmp.w	r5, #4294967295
    49ba:	bf08      	it	eq
    49bc:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    49c0:	d008      	beq.n	49d4 <pend+0x98>
    49c2:	4632      	mov	r2, r6
    49c4:	462b      	mov	r3, r5
    49c6:	f104 0018 	add.w	r0, r4, #24
    49ca:	490a      	ldr	r1, [pc, #40]	; (49f4 <pend+0xb8>)
}
    49cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    49d0:	f000 bc26 	b.w	5220 <z_add_timeout>
    49d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    49d8:	2000030c 	.word	0x2000030c
    49dc:	000064a7 	.word	0x000064a7
    49e0:	000064f9 	.word	0x000064f9
    49e4:	00006321 	.word	0x00006321
    49e8:	0000650e 	.word	0x0000650e
    49ec:	000064cd 	.word	0x000064cd
    49f0:	000064e4 	.word	0x000064e4
    49f4:	000047d1 	.word	0x000047d1

000049f8 <z_pend_curr>:
{
    49f8:	b538      	push	{r3, r4, r5, lr}
	pending_current = _current;
    49fa:	4b11      	ldr	r3, [pc, #68]	; (4a40 <z_pend_curr+0x48>)
{
    49fc:	4604      	mov	r4, r0
	pending_current = _current;
    49fe:	6898      	ldr	r0, [r3, #8]
    4a00:	4b10      	ldr	r3, [pc, #64]	; (4a44 <z_pend_curr+0x4c>)
{
    4a02:	460d      	mov	r5, r1
	pending_current = _current;
    4a04:	6018      	str	r0, [r3, #0]
{
    4a06:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    4a08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    4a0c:	f7ff ff96 	bl	493c <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4a10:	4620      	mov	r0, r4
    4a12:	f7ff fa6f 	bl	3ef4 <z_spin_unlock_valid>
    4a16:	b968      	cbnz	r0, 4a34 <z_pend_curr+0x3c>
    4a18:	4a0b      	ldr	r2, [pc, #44]	; (4a48 <z_pend_curr+0x50>)
    4a1a:	490c      	ldr	r1, [pc, #48]	; (4a4c <z_pend_curr+0x54>)
    4a1c:	480c      	ldr	r0, [pc, #48]	; (4a50 <z_pend_curr+0x58>)
    4a1e:	23c3      	movs	r3, #195	; 0xc3
    4a20:	f000 fed6 	bl	57d0 <printk>
    4a24:	480b      	ldr	r0, [pc, #44]	; (4a54 <z_pend_curr+0x5c>)
    4a26:	4621      	mov	r1, r4
    4a28:	f000 fed2 	bl	57d0 <printk>
    4a2c:	4806      	ldr	r0, [pc, #24]	; (4a48 <z_pend_curr+0x50>)
    4a2e:	21c3      	movs	r1, #195	; 0xc3
    4a30:	f000 ff95 	bl	595e <assert_post_action>
    4a34:	4628      	mov	r0, r5
}
    4a36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4a3a:	f7fc bd87 	b.w	154c <arch_swap>
    4a3e:	bf00      	nop
    4a40:	200002dc 	.word	0x200002dc
    4a44:	20000308 	.word	0x20000308
    4a48:	000064a7 	.word	0x000064a7
    4a4c:	000064cd 	.word	0x000064cd
    4a50:	00006321 	.word	0x00006321
    4a54:	000064e4 	.word	0x000064e4

00004a58 <z_impl_k_thread_suspend>:
{
    4a58:	b570      	push	{r4, r5, r6, lr}
    4a5a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    4a5c:	3018      	adds	r0, #24
    4a5e:	f000 fca7 	bl	53b0 <z_abort_timeout>
	__asm__ volatile(
    4a62:	f04f 0320 	mov.w	r3, #32
    4a66:	f3ef 8611 	mrs	r6, BASEPRI
    4a6a:	f383 8812 	msr	BASEPRI_MAX, r3
    4a6e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4a72:	4825      	ldr	r0, [pc, #148]	; (4b08 <z_impl_k_thread_suspend+0xb0>)
    4a74:	f7ff fa30 	bl	3ed8 <z_spin_lock_valid>
    4a78:	b968      	cbnz	r0, 4a96 <z_impl_k_thread_suspend+0x3e>
    4a7a:	4a24      	ldr	r2, [pc, #144]	; (4b0c <z_impl_k_thread_suspend+0xb4>)
    4a7c:	4924      	ldr	r1, [pc, #144]	; (4b10 <z_impl_k_thread_suspend+0xb8>)
    4a7e:	4825      	ldr	r0, [pc, #148]	; (4b14 <z_impl_k_thread_suspend+0xbc>)
    4a80:	2381      	movs	r3, #129	; 0x81
    4a82:	f000 fea5 	bl	57d0 <printk>
    4a86:	4920      	ldr	r1, [pc, #128]	; (4b08 <z_impl_k_thread_suspend+0xb0>)
    4a88:	4823      	ldr	r0, [pc, #140]	; (4b18 <z_impl_k_thread_suspend+0xc0>)
    4a8a:	f000 fea1 	bl	57d0 <printk>
    4a8e:	481f      	ldr	r0, [pc, #124]	; (4b0c <z_impl_k_thread_suspend+0xb4>)
    4a90:	2181      	movs	r1, #129	; 0x81
    4a92:	f000 ff64 	bl	595e <assert_post_action>
	z_spin_lock_set_owner(l);
    4a96:	481c      	ldr	r0, [pc, #112]	; (4b08 <z_impl_k_thread_suspend+0xb0>)
    4a98:	f7ff fa3c 	bl	3f14 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
    4a9c:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    4aa0:	7b63      	ldrb	r3, [r4, #13]
    4aa2:	2a00      	cmp	r2, #0
    4aa4:	da06      	bge.n	4ab4 <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4aa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		_priq_run_remove(pq, thread);
    4aaa:	481c      	ldr	r0, [pc, #112]	; (4b1c <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4aac:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
    4aae:	4621      	mov	r1, r4
    4ab0:	f7ff fc60 	bl	4374 <z_priq_dumb_remove>
		update_cache(thread == _current);
    4ab4:	4d1a      	ldr	r5, [pc, #104]	; (4b20 <z_impl_k_thread_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    4ab6:	7b63      	ldrb	r3, [r4, #13]
    4ab8:	68a8      	ldr	r0, [r5, #8]
    4aba:	f043 0310 	orr.w	r3, r3, #16
    4abe:	7363      	strb	r3, [r4, #13]
    4ac0:	1b03      	subs	r3, r0, r4
    4ac2:	4258      	negs	r0, r3
    4ac4:	4158      	adcs	r0, r3
    4ac6:	f7ff fc99 	bl	43fc <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4aca:	480f      	ldr	r0, [pc, #60]	; (4b08 <z_impl_k_thread_suspend+0xb0>)
    4acc:	f7ff fa12 	bl	3ef4 <z_spin_unlock_valid>
    4ad0:	b968      	cbnz	r0, 4aee <z_impl_k_thread_suspend+0x96>
    4ad2:	4a0e      	ldr	r2, [pc, #56]	; (4b0c <z_impl_k_thread_suspend+0xb4>)
    4ad4:	4913      	ldr	r1, [pc, #76]	; (4b24 <z_impl_k_thread_suspend+0xcc>)
    4ad6:	480f      	ldr	r0, [pc, #60]	; (4b14 <z_impl_k_thread_suspend+0xbc>)
    4ad8:	23ac      	movs	r3, #172	; 0xac
    4ada:	f000 fe79 	bl	57d0 <printk>
    4ade:	490a      	ldr	r1, [pc, #40]	; (4b08 <z_impl_k_thread_suspend+0xb0>)
    4ae0:	4811      	ldr	r0, [pc, #68]	; (4b28 <z_impl_k_thread_suspend+0xd0>)
    4ae2:	f000 fe75 	bl	57d0 <printk>
    4ae6:	4809      	ldr	r0, [pc, #36]	; (4b0c <z_impl_k_thread_suspend+0xb4>)
    4ae8:	21ac      	movs	r1, #172	; 0xac
    4aea:	f000 ff38 	bl	595e <assert_post_action>
	__asm__ volatile(
    4aee:	f386 8811 	msr	BASEPRI, r6
    4af2:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    4af6:	68ab      	ldr	r3, [r5, #8]
    4af8:	42a3      	cmp	r3, r4
    4afa:	d103      	bne.n	4b04 <z_impl_k_thread_suspend+0xac>
}
    4afc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    4b00:	f001 ba31 	b.w	5f66 <z_reschedule_unlocked>
}
    4b04:	bd70      	pop	{r4, r5, r6, pc}
    4b06:	bf00      	nop
    4b08:	2000030c 	.word	0x2000030c
    4b0c:	000064a7 	.word	0x000064a7
    4b10:	000064f9 	.word	0x000064f9
    4b14:	00006321 	.word	0x00006321
    4b18:	0000650e 	.word	0x0000650e
    4b1c:	200002fc 	.word	0x200002fc
    4b20:	200002dc 	.word	0x200002dc
    4b24:	000064cd 	.word	0x000064cd
    4b28:	000064e4 	.word	0x000064e4

00004b2c <k_sched_unlock>:
{
    4b2c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    4b2e:	f04f 0320 	mov.w	r3, #32
    4b32:	f3ef 8511 	mrs	r5, BASEPRI
    4b36:	f383 8812 	msr	BASEPRI_MAX, r3
    4b3a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4b3e:	482d      	ldr	r0, [pc, #180]	; (4bf4 <k_sched_unlock+0xc8>)
    4b40:	f7ff f9ca 	bl	3ed8 <z_spin_lock_valid>
    4b44:	b968      	cbnz	r0, 4b62 <k_sched_unlock+0x36>
    4b46:	4a2c      	ldr	r2, [pc, #176]	; (4bf8 <k_sched_unlock+0xcc>)
    4b48:	492c      	ldr	r1, [pc, #176]	; (4bfc <k_sched_unlock+0xd0>)
    4b4a:	482d      	ldr	r0, [pc, #180]	; (4c00 <k_sched_unlock+0xd4>)
    4b4c:	2381      	movs	r3, #129	; 0x81
    4b4e:	f000 fe3f 	bl	57d0 <printk>
    4b52:	4928      	ldr	r1, [pc, #160]	; (4bf4 <k_sched_unlock+0xc8>)
    4b54:	482b      	ldr	r0, [pc, #172]	; (4c04 <k_sched_unlock+0xd8>)
    4b56:	f000 fe3b 	bl	57d0 <printk>
    4b5a:	4827      	ldr	r0, [pc, #156]	; (4bf8 <k_sched_unlock+0xcc>)
    4b5c:	2181      	movs	r1, #129	; 0x81
    4b5e:	f000 fefe 	bl	595e <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
    4b62:	4c29      	ldr	r4, [pc, #164]	; (4c08 <k_sched_unlock+0xdc>)
	z_spin_lock_set_owner(l);
    4b64:	4823      	ldr	r0, [pc, #140]	; (4bf4 <k_sched_unlock+0xc8>)
    4b66:	f7ff f9d5 	bl	3f14 <z_spin_lock_set_owner>
    4b6a:	68a3      	ldr	r3, [r4, #8]
    4b6c:	7bdb      	ldrb	r3, [r3, #15]
    4b6e:	b973      	cbnz	r3, 4b8e <k_sched_unlock+0x62>
    4b70:	4926      	ldr	r1, [pc, #152]	; (4c0c <k_sched_unlock+0xe0>)
    4b72:	4a27      	ldr	r2, [pc, #156]	; (4c10 <k_sched_unlock+0xe4>)
    4b74:	4822      	ldr	r0, [pc, #136]	; (4c00 <k_sched_unlock+0xd4>)
    4b76:	f240 3355 	movw	r3, #853	; 0x355
    4b7a:	f000 fe29 	bl	57d0 <printk>
    4b7e:	4825      	ldr	r0, [pc, #148]	; (4c14 <k_sched_unlock+0xe8>)
    4b80:	f000 fe26 	bl	57d0 <printk>
    4b84:	4822      	ldr	r0, [pc, #136]	; (4c10 <k_sched_unlock+0xe4>)
    4b86:	f240 3155 	movw	r1, #853	; 0x355
    4b8a:	f000 fee8 	bl	595e <assert_post_action>
    4b8e:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    4b92:	b173      	cbz	r3, 4bb2 <k_sched_unlock+0x86>
    4b94:	4920      	ldr	r1, [pc, #128]	; (4c18 <k_sched_unlock+0xec>)
    4b96:	4a1e      	ldr	r2, [pc, #120]	; (4c10 <k_sched_unlock+0xe4>)
    4b98:	4819      	ldr	r0, [pc, #100]	; (4c00 <k_sched_unlock+0xd4>)
    4b9a:	f240 3356 	movw	r3, #854	; 0x356
    4b9e:	f000 fe17 	bl	57d0 <printk>
    4ba2:	481c      	ldr	r0, [pc, #112]	; (4c14 <k_sched_unlock+0xe8>)
    4ba4:	f000 fe14 	bl	57d0 <printk>
    4ba8:	4819      	ldr	r0, [pc, #100]	; (4c10 <k_sched_unlock+0xe4>)
    4baa:	f240 3156 	movw	r1, #854	; 0x356
    4bae:	f000 fed6 	bl	595e <assert_post_action>
		++_current->base.sched_locked;
    4bb2:	68a2      	ldr	r2, [r4, #8]
    4bb4:	7bd3      	ldrb	r3, [r2, #15]
    4bb6:	3301      	adds	r3, #1
		update_cache(0);
    4bb8:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    4bba:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    4bbc:	f7ff fc1e 	bl	43fc <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4bc0:	480c      	ldr	r0, [pc, #48]	; (4bf4 <k_sched_unlock+0xc8>)
    4bc2:	f7ff f997 	bl	3ef4 <z_spin_unlock_valid>
    4bc6:	b968      	cbnz	r0, 4be4 <k_sched_unlock+0xb8>
    4bc8:	4a0b      	ldr	r2, [pc, #44]	; (4bf8 <k_sched_unlock+0xcc>)
    4bca:	4914      	ldr	r1, [pc, #80]	; (4c1c <k_sched_unlock+0xf0>)
    4bcc:	480c      	ldr	r0, [pc, #48]	; (4c00 <k_sched_unlock+0xd4>)
    4bce:	23ac      	movs	r3, #172	; 0xac
    4bd0:	f000 fdfe 	bl	57d0 <printk>
    4bd4:	4907      	ldr	r1, [pc, #28]	; (4bf4 <k_sched_unlock+0xc8>)
    4bd6:	4812      	ldr	r0, [pc, #72]	; (4c20 <k_sched_unlock+0xf4>)
    4bd8:	f000 fdfa 	bl	57d0 <printk>
    4bdc:	4806      	ldr	r0, [pc, #24]	; (4bf8 <k_sched_unlock+0xcc>)
    4bde:	21ac      	movs	r1, #172	; 0xac
    4be0:	f000 febd 	bl	595e <assert_post_action>
	__asm__ volatile(
    4be4:	f385 8811 	msr	BASEPRI, r5
    4be8:	f3bf 8f6f 	isb	sy
}
    4bec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
    4bf0:	f001 b9b9 	b.w	5f66 <z_reschedule_unlocked>
    4bf4:	2000030c 	.word	0x2000030c
    4bf8:	000064a7 	.word	0x000064a7
    4bfc:	000064f9 	.word	0x000064f9
    4c00:	00006321 	.word	0x00006321
    4c04:	0000650e 	.word	0x0000650e
    4c08:	200002dc 	.word	0x200002dc
    4c0c:	00007048 	.word	0x00007048
    4c10:	00006f59 	.word	0x00006f59
    4c14:	00006f56 	.word	0x00006f56
    4c18:	00006fc7 	.word	0x00006fc7
    4c1c:	000064cd 	.word	0x000064cd
    4c20:	000064e4 	.word	0x000064e4

00004c24 <z_unpend_first_thread>:
{
    4c24:	b538      	push	{r3, r4, r5, lr}
    4c26:	4604      	mov	r4, r0
	__asm__ volatile(
    4c28:	f04f 0320 	mov.w	r3, #32
    4c2c:	f3ef 8511 	mrs	r5, BASEPRI
    4c30:	f383 8812 	msr	BASEPRI_MAX, r3
    4c34:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4c38:	481b      	ldr	r0, [pc, #108]	; (4ca8 <z_unpend_first_thread+0x84>)
    4c3a:	f7ff f94d 	bl	3ed8 <z_spin_lock_valid>
    4c3e:	b968      	cbnz	r0, 4c5c <z_unpend_first_thread+0x38>
    4c40:	4a1a      	ldr	r2, [pc, #104]	; (4cac <z_unpend_first_thread+0x88>)
    4c42:	491b      	ldr	r1, [pc, #108]	; (4cb0 <z_unpend_first_thread+0x8c>)
    4c44:	481b      	ldr	r0, [pc, #108]	; (4cb4 <z_unpend_first_thread+0x90>)
    4c46:	2381      	movs	r3, #129	; 0x81
    4c48:	f000 fdc2 	bl	57d0 <printk>
    4c4c:	4916      	ldr	r1, [pc, #88]	; (4ca8 <z_unpend_first_thread+0x84>)
    4c4e:	481a      	ldr	r0, [pc, #104]	; (4cb8 <z_unpend_first_thread+0x94>)
    4c50:	f000 fdbe 	bl	57d0 <printk>
    4c54:	4815      	ldr	r0, [pc, #84]	; (4cac <z_unpend_first_thread+0x88>)
    4c56:	2181      	movs	r1, #129	; 0x81
    4c58:	f000 fe81 	bl	595e <assert_post_action>
	z_spin_lock_set_owner(l);
    4c5c:	4812      	ldr	r0, [pc, #72]	; (4ca8 <z_unpend_first_thread+0x84>)
    4c5e:	f7ff f959 	bl	3f14 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
    4c62:	4620      	mov	r0, r4
    4c64:	f001 f989 	bl	5f7a <z_priq_dumb_best>
		if (thread != NULL) {
    4c68:	4604      	mov	r4, r0
    4c6a:	b128      	cbz	r0, 4c78 <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
    4c6c:	f7ff fba4 	bl	43b8 <unpend_thread_no_timeout>
    4c70:	f104 0018 	add.w	r0, r4, #24
    4c74:	f000 fb9c 	bl	53b0 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4c78:	480b      	ldr	r0, [pc, #44]	; (4ca8 <z_unpend_first_thread+0x84>)
    4c7a:	f7ff f93b 	bl	3ef4 <z_spin_unlock_valid>
    4c7e:	b968      	cbnz	r0, 4c9c <z_unpend_first_thread+0x78>
    4c80:	4a0a      	ldr	r2, [pc, #40]	; (4cac <z_unpend_first_thread+0x88>)
    4c82:	490e      	ldr	r1, [pc, #56]	; (4cbc <z_unpend_first_thread+0x98>)
    4c84:	480b      	ldr	r0, [pc, #44]	; (4cb4 <z_unpend_first_thread+0x90>)
    4c86:	23ac      	movs	r3, #172	; 0xac
    4c88:	f000 fda2 	bl	57d0 <printk>
    4c8c:	4906      	ldr	r1, [pc, #24]	; (4ca8 <z_unpend_first_thread+0x84>)
    4c8e:	480c      	ldr	r0, [pc, #48]	; (4cc0 <z_unpend_first_thread+0x9c>)
    4c90:	f000 fd9e 	bl	57d0 <printk>
    4c94:	4805      	ldr	r0, [pc, #20]	; (4cac <z_unpend_first_thread+0x88>)
    4c96:	21ac      	movs	r1, #172	; 0xac
    4c98:	f000 fe61 	bl	595e <assert_post_action>
	__asm__ volatile(
    4c9c:	f385 8811 	msr	BASEPRI, r5
    4ca0:	f3bf 8f6f 	isb	sy
}
    4ca4:	4620      	mov	r0, r4
    4ca6:	bd38      	pop	{r3, r4, r5, pc}
    4ca8:	2000030c 	.word	0x2000030c
    4cac:	000064a7 	.word	0x000064a7
    4cb0:	000064f9 	.word	0x000064f9
    4cb4:	00006321 	.word	0x00006321
    4cb8:	0000650e 	.word	0x0000650e
    4cbc:	000064cd 	.word	0x000064cd
    4cc0:	000064e4 	.word	0x000064e4

00004cc4 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    4cc4:	4b04      	ldr	r3, [pc, #16]	; (4cd8 <z_sched_init+0x14>)
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    4cc6:	2100      	movs	r1, #0
    4cc8:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    4ccc:	e9c3 2208 	strd	r2, r2, [r3, #32]
    4cd0:	4608      	mov	r0, r1
    4cd2:	f7ff ba31 	b.w	4138 <k_sched_time_slice_set>
    4cd6:	bf00      	nop
    4cd8:	200002dc 	.word	0x200002dc

00004cdc <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    4cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4cde:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    4ce2:	b173      	cbz	r3, 4d02 <z_impl_k_yield+0x26>
    4ce4:	493f      	ldr	r1, [pc, #252]	; (4de4 <z_impl_k_yield+0x108>)
    4ce6:	4a40      	ldr	r2, [pc, #256]	; (4de8 <z_impl_k_yield+0x10c>)
    4ce8:	4840      	ldr	r0, [pc, #256]	; (4dec <z_impl_k_yield+0x110>)
    4cea:	f240 43a1 	movw	r3, #1185	; 0x4a1
    4cee:	f000 fd6f 	bl	57d0 <printk>
    4cf2:	483f      	ldr	r0, [pc, #252]	; (4df0 <z_impl_k_yield+0x114>)
    4cf4:	f000 fd6c 	bl	57d0 <printk>
    4cf8:	483b      	ldr	r0, [pc, #236]	; (4de8 <z_impl_k_yield+0x10c>)
    4cfa:	f240 41a1 	movw	r1, #1185	; 0x4a1
    4cfe:	f000 fe2e 	bl	595e <assert_post_action>
	__asm__ volatile(
    4d02:	f04f 0320 	mov.w	r3, #32
    4d06:	f3ef 8611 	mrs	r6, BASEPRI
    4d0a:	f383 8812 	msr	BASEPRI_MAX, r3
    4d0e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4d12:	4838      	ldr	r0, [pc, #224]	; (4df4 <z_impl_k_yield+0x118>)
    4d14:	f7ff f8e0 	bl	3ed8 <z_spin_lock_valid>
    4d18:	b968      	cbnz	r0, 4d36 <z_impl_k_yield+0x5a>
    4d1a:	4a37      	ldr	r2, [pc, #220]	; (4df8 <z_impl_k_yield+0x11c>)
    4d1c:	4937      	ldr	r1, [pc, #220]	; (4dfc <z_impl_k_yield+0x120>)
    4d1e:	4833      	ldr	r0, [pc, #204]	; (4dec <z_impl_k_yield+0x110>)
    4d20:	2381      	movs	r3, #129	; 0x81
    4d22:	f000 fd55 	bl	57d0 <printk>
    4d26:	4933      	ldr	r1, [pc, #204]	; (4df4 <z_impl_k_yield+0x118>)
    4d28:	4835      	ldr	r0, [pc, #212]	; (4e00 <z_impl_k_yield+0x124>)
    4d2a:	f000 fd51 	bl	57d0 <printk>
    4d2e:	4832      	ldr	r0, [pc, #200]	; (4df8 <z_impl_k_yield+0x11c>)
    4d30:	2181      	movs	r1, #129	; 0x81
    4d32:	f000 fe14 	bl	595e <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(&_kernel.ready_q.runq,
    4d36:	4d33      	ldr	r5, [pc, #204]	; (4e04 <z_impl_k_yield+0x128>)
	z_spin_lock_set_owner(l);
    4d38:	482e      	ldr	r0, [pc, #184]	; (4df4 <z_impl_k_yield+0x118>)
    4d3a:	f7ff f8eb 	bl	3f14 <z_spin_lock_set_owner>
    4d3e:	68a9      	ldr	r1, [r5, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4d40:	7b4b      	ldrb	r3, [r1, #13]
    4d42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4d46:	734b      	strb	r3, [r1, #13]
		_priq_run_remove(pq, thread);
    4d48:	f105 0020 	add.w	r0, r5, #32
    4d4c:	f7ff fb12 	bl	4374 <z_priq_dumb_remove>
			       _current);
	}
	queue_thread(&_kernel.ready_q.runq, _current);
    4d50:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    4d52:	7b63      	ldrb	r3, [r4, #13]
    4d54:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4d58:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    4d5a:	4b2b      	ldr	r3, [pc, #172]	; (4e08 <z_impl_k_yield+0x12c>)
    4d5c:	429c      	cmp	r4, r3
    4d5e:	d109      	bne.n	4d74 <z_impl_k_yield+0x98>
    4d60:	492a      	ldr	r1, [pc, #168]	; (4e0c <z_impl_k_yield+0x130>)
    4d62:	4822      	ldr	r0, [pc, #136]	; (4dec <z_impl_k_yield+0x110>)
    4d64:	4a20      	ldr	r2, [pc, #128]	; (4de8 <z_impl_k_yield+0x10c>)
    4d66:	23b1      	movs	r3, #177	; 0xb1
    4d68:	f000 fd32 	bl	57d0 <printk>
    4d6c:	481e      	ldr	r0, [pc, #120]	; (4de8 <z_impl_k_yield+0x10c>)
    4d6e:	21b1      	movs	r1, #177	; 0xb1
    4d70:	f000 fdf5 	bl	595e <assert_post_action>
	return (node == list->tail) ? NULL : node->next;
    4d74:	e9d5 3108 	ldrd	r3, r1, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4d78:	4825      	ldr	r0, [pc, #148]	; (4e10 <z_impl_k_yield+0x134>)
    4d7a:	4283      	cmp	r3, r0
    4d7c:	d02d      	beq.n	4dda <z_impl_k_yield+0xfe>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4d7e:	b363      	cbz	r3, 4dda <z_impl_k_yield+0xfe>
	int32_t b1 = thread_1->base.prio;
    4d80:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    4d84:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    4d88:	4297      	cmp	r7, r2
    4d8a:	d021      	beq.n	4dd0 <z_impl_k_yield+0xf4>
		return b2 - b1;
    4d8c:	1bd2      	subs	r2, r2, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
    4d8e:	2a00      	cmp	r2, #0
    4d90:	dd1e      	ble.n	4dd0 <z_impl_k_yield+0xf4>
	sys_dnode_t *const prev = successor->prev;
    4d92:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    4d94:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    4d98:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    4d9a:	605c      	str	r4, [r3, #4]
	update_cache(1);
    4d9c:	2001      	movs	r0, #1
    4d9e:	f7ff fb2d 	bl	43fc <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4da2:	4814      	ldr	r0, [pc, #80]	; (4df4 <z_impl_k_yield+0x118>)
    4da4:	f7ff f8a6 	bl	3ef4 <z_spin_unlock_valid>
    4da8:	b968      	cbnz	r0, 4dc6 <z_impl_k_yield+0xea>
    4daa:	4a13      	ldr	r2, [pc, #76]	; (4df8 <z_impl_k_yield+0x11c>)
    4dac:	4919      	ldr	r1, [pc, #100]	; (4e14 <z_impl_k_yield+0x138>)
    4dae:	480f      	ldr	r0, [pc, #60]	; (4dec <z_impl_k_yield+0x110>)
    4db0:	23c3      	movs	r3, #195	; 0xc3
    4db2:	f000 fd0d 	bl	57d0 <printk>
    4db6:	490f      	ldr	r1, [pc, #60]	; (4df4 <z_impl_k_yield+0x118>)
    4db8:	4817      	ldr	r0, [pc, #92]	; (4e18 <z_impl_k_yield+0x13c>)
    4dba:	f000 fd09 	bl	57d0 <printk>
    4dbe:	480e      	ldr	r0, [pc, #56]	; (4df8 <z_impl_k_yield+0x11c>)
    4dc0:	21c3      	movs	r1, #195	; 0xc3
    4dc2:	f000 fdcc 	bl	595e <assert_post_action>
    4dc6:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
    4dc8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    4dcc:	f7fc bbbe 	b.w	154c <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    4dd0:	428b      	cmp	r3, r1
    4dd2:	d002      	beq.n	4dda <z_impl_k_yield+0xfe>
    4dd4:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4dd6:	2b00      	cmp	r3, #0
    4dd8:	d1d4      	bne.n	4d84 <z_impl_k_yield+0xa8>
	node->prev = tail;
    4dda:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
    4dde:	600c      	str	r4, [r1, #0]
	list->tail = node;
    4de0:	626c      	str	r4, [r5, #36]	; 0x24
}
    4de2:	e7db      	b.n	4d9c <z_impl_k_yield+0xc0>
    4de4:	00006fc7 	.word	0x00006fc7
    4de8:	00006f59 	.word	0x00006f59
    4dec:	00006321 	.word	0x00006321
    4df0:	00006f56 	.word	0x00006f56
    4df4:	2000030c 	.word	0x2000030c
    4df8:	000064a7 	.word	0x000064a7
    4dfc:	000064f9 	.word	0x000064f9
    4e00:	0000650e 	.word	0x0000650e
    4e04:	200002dc 	.word	0x200002dc
    4e08:	20000070 	.word	0x20000070
    4e0c:	00006f7b 	.word	0x00006f7b
    4e10:	200002fc 	.word	0x200002fc
    4e14:	000064cd 	.word	0x000064cd
    4e18:	000064e4 	.word	0x000064e4

00004e1c <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
    4e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4e20:	4605      	mov	r5, r0
    4e22:	460e      	mov	r6, r1
    4e24:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
    4e28:	b173      	cbz	r3, 4e48 <z_tick_sleep+0x2c>
    4e2a:	4943      	ldr	r1, [pc, #268]	; (4f38 <z_tick_sleep+0x11c>)
    4e2c:	4a43      	ldr	r2, [pc, #268]	; (4f3c <z_tick_sleep+0x120>)
    4e2e:	4844      	ldr	r0, [pc, #272]	; (4f40 <z_tick_sleep+0x124>)
    4e30:	f240 43be 	movw	r3, #1214	; 0x4be
    4e34:	f000 fccc 	bl	57d0 <printk>
    4e38:	4842      	ldr	r0, [pc, #264]	; (4f44 <z_tick_sleep+0x128>)
    4e3a:	f000 fcc9 	bl	57d0 <printk>
    4e3e:	483f      	ldr	r0, [pc, #252]	; (4f3c <z_tick_sleep+0x120>)
    4e40:	f240 41be 	movw	r1, #1214	; 0x4be
    4e44:	f000 fd8b 	bl	595e <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    4e48:	ea55 0306 	orrs.w	r3, r5, r6
    4e4c:	d103      	bne.n	4e56 <z_tick_sleep+0x3a>
	z_impl_k_yield();
    4e4e:	f7ff ff45 	bl	4cdc <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
    4e52:	2000      	movs	r0, #0
    4e54:	e06d      	b.n	4f32 <z_tick_sleep+0x116>
	if (Z_TICK_ABS(ticks) <= 0) {
    4e56:	f06f 0401 	mvn.w	r4, #1
    4e5a:	1b64      	subs	r4, r4, r5
    4e5c:	f04f 33ff 	mov.w	r3, #4294967295
    4e60:	eb63 0306 	sbc.w	r3, r3, r6
    4e64:	2c01      	cmp	r4, #1
    4e66:	f173 0300 	sbcs.w	r3, r3, #0
    4e6a:	da02      	bge.n	4e72 <z_tick_sleep+0x56>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    4e6c:	f001 f88b 	bl	5f86 <sys_clock_tick_get_32>
    4e70:	1944      	adds	r4, r0, r5
    4e72:	f04f 0320 	mov.w	r3, #32
    4e76:	f3ef 8811 	mrs	r8, BASEPRI
    4e7a:	f383 8812 	msr	BASEPRI_MAX, r3
    4e7e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4e82:	4831      	ldr	r0, [pc, #196]	; (4f48 <z_tick_sleep+0x12c>)
    4e84:	f7ff f828 	bl	3ed8 <z_spin_lock_valid>
    4e88:	b968      	cbnz	r0, 4ea6 <z_tick_sleep+0x8a>
    4e8a:	4a30      	ldr	r2, [pc, #192]	; (4f4c <z_tick_sleep+0x130>)
    4e8c:	4930      	ldr	r1, [pc, #192]	; (4f50 <z_tick_sleep+0x134>)
    4e8e:	482c      	ldr	r0, [pc, #176]	; (4f40 <z_tick_sleep+0x124>)
    4e90:	2381      	movs	r3, #129	; 0x81
    4e92:	f000 fc9d 	bl	57d0 <printk>
    4e96:	492c      	ldr	r1, [pc, #176]	; (4f48 <z_tick_sleep+0x12c>)
    4e98:	482e      	ldr	r0, [pc, #184]	; (4f54 <z_tick_sleep+0x138>)
    4e9a:	f000 fc99 	bl	57d0 <printk>
    4e9e:	482b      	ldr	r0, [pc, #172]	; (4f4c <z_tick_sleep+0x130>)
    4ea0:	2181      	movs	r1, #129	; 0x81
    4ea2:	f000 fd5c 	bl	595e <assert_post_action>
	pending_current = _current;
    4ea6:	4f2c      	ldr	r7, [pc, #176]	; (4f58 <z_tick_sleep+0x13c>)
	z_spin_lock_set_owner(l);
    4ea8:	4827      	ldr	r0, [pc, #156]	; (4f48 <z_tick_sleep+0x12c>)
    4eaa:	f7ff f833 	bl	3f14 <z_spin_lock_set_owner>
    4eae:	4b2b      	ldr	r3, [pc, #172]	; (4f5c <z_tick_sleep+0x140>)
    4eb0:	68b8      	ldr	r0, [r7, #8]
    4eb2:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    4eb4:	f7ff fce6 	bl	4884 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    4eb8:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    4eba:	4929      	ldr	r1, [pc, #164]	; (4f60 <z_tick_sleep+0x144>)
    4ebc:	462a      	mov	r2, r5
    4ebe:	4633      	mov	r3, r6
    4ec0:	3018      	adds	r0, #24
    4ec2:	f000 f9ad 	bl	5220 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    4ec6:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4ec8:	481f      	ldr	r0, [pc, #124]	; (4f48 <z_tick_sleep+0x12c>)
    4eca:	7b53      	ldrb	r3, [r2, #13]
    4ecc:	f043 0310 	orr.w	r3, r3, #16
    4ed0:	7353      	strb	r3, [r2, #13]
    4ed2:	f7ff f80f 	bl	3ef4 <z_spin_unlock_valid>
    4ed6:	b968      	cbnz	r0, 4ef4 <z_tick_sleep+0xd8>
    4ed8:	4a1c      	ldr	r2, [pc, #112]	; (4f4c <z_tick_sleep+0x130>)
    4eda:	4922      	ldr	r1, [pc, #136]	; (4f64 <z_tick_sleep+0x148>)
    4edc:	4818      	ldr	r0, [pc, #96]	; (4f40 <z_tick_sleep+0x124>)
    4ede:	23c3      	movs	r3, #195	; 0xc3
    4ee0:	f000 fc76 	bl	57d0 <printk>
    4ee4:	4918      	ldr	r1, [pc, #96]	; (4f48 <z_tick_sleep+0x12c>)
    4ee6:	4820      	ldr	r0, [pc, #128]	; (4f68 <z_tick_sleep+0x14c>)
    4ee8:	f000 fc72 	bl	57d0 <printk>
    4eec:	4817      	ldr	r0, [pc, #92]	; (4f4c <z_tick_sleep+0x130>)
    4eee:	21c3      	movs	r1, #195	; 0xc3
    4ef0:	f000 fd35 	bl	595e <assert_post_action>
    4ef4:	4640      	mov	r0, r8
    4ef6:	f7fc fb29 	bl	154c <arch_swap>
	return (thread->base.thread_state & state) != 0U;
    4efa:	68bb      	ldr	r3, [r7, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    4efc:	7b5b      	ldrb	r3, [r3, #13]
    4efe:	06db      	lsls	r3, r3, #27
    4f00:	d50e      	bpl.n	4f20 <z_tick_sleep+0x104>
    4f02:	491a      	ldr	r1, [pc, #104]	; (4f6c <z_tick_sleep+0x150>)
    4f04:	4a0d      	ldr	r2, [pc, #52]	; (4f3c <z_tick_sleep+0x120>)
    4f06:	480e      	ldr	r0, [pc, #56]	; (4f40 <z_tick_sleep+0x124>)
    4f08:	f240 43df 	movw	r3, #1247	; 0x4df
    4f0c:	f000 fc60 	bl	57d0 <printk>
    4f10:	480c      	ldr	r0, [pc, #48]	; (4f44 <z_tick_sleep+0x128>)
    4f12:	f000 fc5d 	bl	57d0 <printk>
    4f16:	4809      	ldr	r0, [pc, #36]	; (4f3c <z_tick_sleep+0x120>)
    4f18:	f240 41df 	movw	r1, #1247	; 0x4df
    4f1c:	f000 fd1f 	bl	595e <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    4f20:	f001 f831 	bl	5f86 <sys_clock_tick_get_32>
    4f24:	1a20      	subs	r0, r4, r0
    4f26:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    4f2a:	2801      	cmp	r0, #1
    4f2c:	f173 0300 	sbcs.w	r3, r3, #0
    4f30:	db8f      	blt.n	4e52 <z_tick_sleep+0x36>
}
    4f32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4f36:	bf00      	nop
    4f38:	00006fc7 	.word	0x00006fc7
    4f3c:	00006f59 	.word	0x00006f59
    4f40:	00006321 	.word	0x00006321
    4f44:	00006f56 	.word	0x00006f56
    4f48:	2000030c 	.word	0x2000030c
    4f4c:	000064a7 	.word	0x000064a7
    4f50:	000064f9 	.word	0x000064f9
    4f54:	0000650e 	.word	0x0000650e
    4f58:	200002dc 	.word	0x200002dc
    4f5c:	20000308 	.word	0x20000308
    4f60:	000047d1 	.word	0x000047d1
    4f64:	000064cd 	.word	0x000064cd
    4f68:	000064e4 	.word	0x000064e4
    4f6c:	00007079 	.word	0x00007079

00004f70 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    4f70:	b538      	push	{r3, r4, r5, lr}
    4f72:	4605      	mov	r5, r0
    4f74:	460c      	mov	r4, r1
    4f76:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
    4f7a:	b173      	cbz	r3, 4f9a <z_impl_k_sleep+0x2a>
    4f7c:	4913      	ldr	r1, [pc, #76]	; (4fcc <z_impl_k_sleep+0x5c>)
    4f7e:	4a14      	ldr	r2, [pc, #80]	; (4fd0 <z_impl_k_sleep+0x60>)
    4f80:	4814      	ldr	r0, [pc, #80]	; (4fd4 <z_impl_k_sleep+0x64>)
    4f82:	f240 43ee 	movw	r3, #1262	; 0x4ee
    4f86:	f000 fc23 	bl	57d0 <printk>
    4f8a:	4813      	ldr	r0, [pc, #76]	; (4fd8 <z_impl_k_sleep+0x68>)
    4f8c:	f000 fc20 	bl	57d0 <printk>
    4f90:	480f      	ldr	r0, [pc, #60]	; (4fd0 <z_impl_k_sleep+0x60>)
    4f92:	f240 41ee 	movw	r1, #1262	; 0x4ee
    4f96:	f000 fce2 	bl	595e <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4f9a:	f1b4 3fff 	cmp.w	r4, #4294967295
    4f9e:	bf08      	it	eq
    4fa0:	f1b5 3fff 	cmpeq.w	r5, #4294967295
    4fa4:	d106      	bne.n	4fb4 <z_impl_k_sleep+0x44>
		k_thread_suspend(_current);
    4fa6:	4b0d      	ldr	r3, [pc, #52]	; (4fdc <z_impl_k_sleep+0x6c>)
    4fa8:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    4faa:	f7ff fd55 	bl	4a58 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    4fae:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    4fb2:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
    4fb4:	4628      	mov	r0, r5
    4fb6:	4621      	mov	r1, r4
    4fb8:	f7ff ff30 	bl	4e1c <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
    4fbc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    4fc0:	fb80 0303 	smull	r0, r3, r0, r3
    4fc4:	0bc0      	lsrs	r0, r0, #15
    4fc6:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    4fca:	e7f2      	b.n	4fb2 <z_impl_k_sleep+0x42>
    4fcc:	00006fc7 	.word	0x00006fc7
    4fd0:	00006f59 	.word	0x00006f59
    4fd4:	00006321 	.word	0x00006321
    4fd8:	00006f56 	.word	0x00006f56
    4fdc:	200002dc 	.word	0x200002dc

00004fe0 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    4fe0:	4b01      	ldr	r3, [pc, #4]	; (4fe8 <z_impl_z_current_get+0x8>)
    4fe2:	6898      	ldr	r0, [r3, #8]
    4fe4:	4770      	bx	lr
    4fe6:	bf00      	nop
    4fe8:	200002dc 	.word	0x200002dc

00004fec <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    4fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4ff0:	4604      	mov	r4, r0
    4ff2:	f04f 0320 	mov.w	r3, #32
    4ff6:	f3ef 8611 	mrs	r6, BASEPRI
    4ffa:	f383 8812 	msr	BASEPRI_MAX, r3
    4ffe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5002:	4848      	ldr	r0, [pc, #288]	; (5124 <z_thread_abort+0x138>)
    5004:	f7fe ff68 	bl	3ed8 <z_spin_lock_valid>
    5008:	b968      	cbnz	r0, 5026 <z_thread_abort+0x3a>
    500a:	4a47      	ldr	r2, [pc, #284]	; (5128 <z_thread_abort+0x13c>)
    500c:	4947      	ldr	r1, [pc, #284]	; (512c <z_thread_abort+0x140>)
    500e:	4848      	ldr	r0, [pc, #288]	; (5130 <z_thread_abort+0x144>)
    5010:	2381      	movs	r3, #129	; 0x81
    5012:	f000 fbdd 	bl	57d0 <printk>
    5016:	4943      	ldr	r1, [pc, #268]	; (5124 <z_thread_abort+0x138>)
    5018:	4846      	ldr	r0, [pc, #280]	; (5134 <z_thread_abort+0x148>)
    501a:	f000 fbd9 	bl	57d0 <printk>
    501e:	4842      	ldr	r0, [pc, #264]	; (5128 <z_thread_abort+0x13c>)
    5020:	2181      	movs	r1, #129	; 0x81
    5022:	f000 fc9c 	bl	595e <assert_post_action>
	z_spin_lock_set_owner(l);
    5026:	483f      	ldr	r0, [pc, #252]	; (5124 <z_thread_abort+0x138>)
    5028:	f7fe ff74 	bl	3f14 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    502c:	7b63      	ldrb	r3, [r4, #13]
    502e:	071a      	lsls	r2, r3, #28
    5030:	d517      	bpl.n	5062 <z_thread_abort+0x76>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5032:	483c      	ldr	r0, [pc, #240]	; (5124 <z_thread_abort+0x138>)
    5034:	f7fe ff5e 	bl	3ef4 <z_spin_unlock_valid>
    5038:	b968      	cbnz	r0, 5056 <z_thread_abort+0x6a>
    503a:	4a3b      	ldr	r2, [pc, #236]	; (5128 <z_thread_abort+0x13c>)
    503c:	493e      	ldr	r1, [pc, #248]	; (5138 <z_thread_abort+0x14c>)
    503e:	483c      	ldr	r0, [pc, #240]	; (5130 <z_thread_abort+0x144>)
    5040:	23ac      	movs	r3, #172	; 0xac
    5042:	f000 fbc5 	bl	57d0 <printk>
    5046:	4937      	ldr	r1, [pc, #220]	; (5124 <z_thread_abort+0x138>)
    5048:	483c      	ldr	r0, [pc, #240]	; (513c <z_thread_abort+0x150>)
    504a:	f000 fbc1 	bl	57d0 <printk>
    504e:	4836      	ldr	r0, [pc, #216]	; (5128 <z_thread_abort+0x13c>)
    5050:	21ac      	movs	r1, #172	; 0xac
    5052:	f000 fc84 	bl	595e <assert_post_action>
	__asm__ volatile(
    5056:	f386 8811 	msr	BASEPRI, r6
    505a:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    505e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    5062:	f023 0220 	bic.w	r2, r3, #32
    5066:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    506a:	09d2      	lsrs	r2, r2, #7
    506c:	d142      	bne.n	50f4 <z_thread_abort+0x108>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    506e:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
    5070:	68a3      	ldr	r3, [r4, #8]
    5072:	b113      	cbz	r3, 507a <z_thread_abort+0x8e>
			unpend_thread_no_timeout(thread);
    5074:	4620      	mov	r0, r4
    5076:	f7ff f99f 	bl	43b8 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    507a:	f104 0018 	add.w	r0, r4, #24
    507e:	f000 f997 	bl	53b0 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    5082:	f104 0758 	add.w	r7, r4, #88	; 0x58
    5086:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    508a:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    508c:	42bd      	cmp	r5, r7
    508e:	d001      	beq.n	5094 <z_thread_abort+0xa8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    5090:	2d00      	cmp	r5, #0
    5092:	d139      	bne.n	5108 <z_thread_abort+0x11c>
		update_cache(1);
    5094:	2001      	movs	r0, #1
    5096:	f7ff f9b1 	bl	43fc <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    509a:	4b29      	ldr	r3, [pc, #164]	; (5140 <z_thread_abort+0x154>)
    509c:	689b      	ldr	r3, [r3, #8]
    509e:	42a3      	cmp	r3, r4
    50a0:	d1c7      	bne.n	5032 <z_thread_abort+0x46>
    50a2:	f3ef 8305 	mrs	r3, IPSR
    50a6:	2b00      	cmp	r3, #0
    50a8:	d1c3      	bne.n	5032 <z_thread_abort+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    50aa:	481e      	ldr	r0, [pc, #120]	; (5124 <z_thread_abort+0x138>)
    50ac:	f7fe ff22 	bl	3ef4 <z_spin_unlock_valid>
    50b0:	b968      	cbnz	r0, 50ce <z_thread_abort+0xe2>
    50b2:	4a1d      	ldr	r2, [pc, #116]	; (5128 <z_thread_abort+0x13c>)
    50b4:	4920      	ldr	r1, [pc, #128]	; (5138 <z_thread_abort+0x14c>)
    50b6:	481e      	ldr	r0, [pc, #120]	; (5130 <z_thread_abort+0x144>)
    50b8:	23c3      	movs	r3, #195	; 0xc3
    50ba:	f000 fb89 	bl	57d0 <printk>
    50be:	4919      	ldr	r1, [pc, #100]	; (5124 <z_thread_abort+0x138>)
    50c0:	481e      	ldr	r0, [pc, #120]	; (513c <z_thread_abort+0x150>)
    50c2:	f000 fb85 	bl	57d0 <printk>
    50c6:	4818      	ldr	r0, [pc, #96]	; (5128 <z_thread_abort+0x13c>)
    50c8:	21c3      	movs	r1, #195	; 0xc3
    50ca:	f000 fc48 	bl	595e <assert_post_action>
    50ce:	4630      	mov	r0, r6
    50d0:	f7fc fa3c 	bl	154c <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
    50d4:	4a1b      	ldr	r2, [pc, #108]	; (5144 <z_thread_abort+0x158>)
    50d6:	491c      	ldr	r1, [pc, #112]	; (5148 <z_thread_abort+0x15c>)
    50d8:	4815      	ldr	r0, [pc, #84]	; (5130 <z_thread_abort+0x144>)
    50da:	f240 6309 	movw	r3, #1545	; 0x609
    50de:	f000 fb77 	bl	57d0 <printk>
    50e2:	481a      	ldr	r0, [pc, #104]	; (514c <z_thread_abort+0x160>)
    50e4:	f000 fb74 	bl	57d0 <printk>
    50e8:	4816      	ldr	r0, [pc, #88]	; (5144 <z_thread_abort+0x158>)
    50ea:	f240 6109 	movw	r1, #1545	; 0x609
    50ee:	f000 fc36 	bl	595e <assert_post_action>
    50f2:	e79e      	b.n	5032 <z_thread_abort+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    50f4:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    50f8:	f043 0308 	orr.w	r3, r3, #8
		_priq_run_remove(pq, thread);
    50fc:	4814      	ldr	r0, [pc, #80]	; (5150 <z_thread_abort+0x164>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    50fe:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
    5100:	4621      	mov	r1, r4
    5102:	f7ff f937 	bl	4374 <z_priq_dumb_remove>
}
    5106:	e7b3      	b.n	5070 <z_thread_abort+0x84>
		unpend_thread_no_timeout(thread);
    5108:	4628      	mov	r0, r5
    510a:	f7ff f955 	bl	43b8 <unpend_thread_no_timeout>
    510e:	f105 0018 	add.w	r0, r5, #24
    5112:	f000 f94d 	bl	53b0 <z_abort_timeout>
    5116:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    511a:	4628      	mov	r0, r5
    511c:	f7ff fa70 	bl	4600 <ready_thread>
    5120:	e7b3      	b.n	508a <z_thread_abort+0x9e>
    5122:	bf00      	nop
    5124:	2000030c 	.word	0x2000030c
    5128:	000064a7 	.word	0x000064a7
    512c:	000064f9 	.word	0x000064f9
    5130:	00006321 	.word	0x00006321
    5134:	0000650e 	.word	0x0000650e
    5138:	000064cd 	.word	0x000064cd
    513c:	000064e4 	.word	0x000064e4
    5140:	200002dc 	.word	0x200002dc
    5144:	00006f59 	.word	0x00006f59
    5148:	0000648f 	.word	0x0000648f
    514c:	000070b9 	.word	0x000070b9
    5150:	200002fc 	.word	0x200002fc

00005154 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    5154:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
    5156:	4806      	ldr	r0, [pc, #24]	; (5170 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
    5158:	4a06      	ldr	r2, [pc, #24]	; (5174 <z_data_copy+0x20>)
    515a:	4907      	ldr	r1, [pc, #28]	; (5178 <z_data_copy+0x24>)
    515c:	1a12      	subs	r2, r2, r0
    515e:	f000 fc99 	bl	5a94 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    5162:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
    5166:	4a05      	ldr	r2, [pc, #20]	; (517c <z_data_copy+0x28>)
    5168:	4905      	ldr	r1, [pc, #20]	; (5180 <z_data_copy+0x2c>)
    516a:	4806      	ldr	r0, [pc, #24]	; (5184 <z_data_copy+0x30>)
    516c:	f000 bc92 	b.w	5a94 <memcpy>
    5170:	20000000 	.word	0x20000000
    5174:	2000006c 	.word	0x2000006c
    5178:	00007164 	.word	0x00007164
    517c:	00000000 	.word	0x00000000
    5180:	00007164 	.word	0x00007164
    5184:	20000000 	.word	0x20000000

00005188 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    5188:	4b03      	ldr	r3, [pc, #12]	; (5198 <elapsed+0x10>)
    518a:	681b      	ldr	r3, [r3, #0]
    518c:	b90b      	cbnz	r3, 5192 <elapsed+0xa>
    518e:	f7fd bde5 	b.w	2d5c <sys_clock_elapsed>
}
    5192:	2000      	movs	r0, #0
    5194:	4770      	bx	lr
    5196:	bf00      	nop
    5198:	20000318 	.word	0x20000318

0000519c <next_timeout>:
	return list->head == list;
    519c:	4b11      	ldr	r3, [pc, #68]	; (51e4 <next_timeout+0x48>)

static int32_t next_timeout(void)
{
    519e:	b510      	push	{r4, lr}
    51a0:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    51a2:	429c      	cmp	r4, r3
    51a4:	bf08      	it	eq
    51a6:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    51a8:	f7ff ffee 	bl	5188 <elapsed>
    51ac:	4603      	mov	r3, r0
	int32_t ret = to == NULL ? MAX_WAIT
    51ae:	b16c      	cbz	r4, 51cc <next_timeout+0x30>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    51b0:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
    51b4:	1ac0      	subs	r0, r0, r3
    51b6:	eb62 73e3 	sbc.w	r3, r2, r3, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    51ba:	2801      	cmp	r0, #1
    51bc:	f173 0200 	sbcs.w	r2, r3, #0
    51c0:	db0d      	blt.n	51de <next_timeout+0x42>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    51c2:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    51c6:	f173 0300 	sbcs.w	r3, r3, #0
    51ca:	db01      	blt.n	51d0 <next_timeout+0x34>
	int32_t ret = to == NULL ? MAX_WAIT
    51cc:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    51d0:	4b05      	ldr	r3, [pc, #20]	; (51e8 <next_timeout+0x4c>)
    51d2:	691b      	ldr	r3, [r3, #16]
    51d4:	b113      	cbz	r3, 51dc <next_timeout+0x40>
    51d6:	4298      	cmp	r0, r3
    51d8:	bfa8      	it	ge
    51da:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    51dc:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    51de:	2000      	movs	r0, #0
    51e0:	e7f6      	b.n	51d0 <next_timeout+0x34>
    51e2:	bf00      	nop
    51e4:	2000004c 	.word	0x2000004c
    51e8:	200002dc 	.word	0x200002dc

000051ec <remove_timeout>:
{
    51ec:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
    51ee:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    51f0:	b168      	cbz	r0, 520e <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    51f2:	4a0a      	ldr	r2, [pc, #40]	; (521c <remove_timeout+0x30>)
    51f4:	6852      	ldr	r2, [r2, #4]
    51f6:	4290      	cmp	r0, r2
    51f8:	d009      	beq.n	520e <remove_timeout+0x22>
	if (next(t) != NULL) {
    51fa:	b143      	cbz	r3, 520e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    51fc:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    5200:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    5204:	1912      	adds	r2, r2, r4
    5206:	eb41 0105 	adc.w	r1, r1, r5
    520a:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
    520e:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
    5210:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    5212:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    5214:	2300      	movs	r3, #0
	node->prev = NULL;
    5216:	e9c0 3300 	strd	r3, r3, [r0]
}
    521a:	bd30      	pop	{r4, r5, pc}
    521c:	2000004c 	.word	0x2000004c

00005220 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5220:	f1b3 3fff 	cmp.w	r3, #4294967295
    5224:	bf08      	it	eq
    5226:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    522a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    522e:	4604      	mov	r4, r0
    5230:	460e      	mov	r6, r1
    5232:	4698      	mov	r8, r3
    5234:	4615      	mov	r5, r2
    5236:	461f      	mov	r7, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5238:	f000 809e 	beq.w	5378 <z_add_timeout+0x158>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    523c:	6803      	ldr	r3, [r0, #0]
    523e:	b163      	cbz	r3, 525a <z_add_timeout+0x3a>
    5240:	494e      	ldr	r1, [pc, #312]	; (537c <z_add_timeout+0x15c>)
    5242:	4a4f      	ldr	r2, [pc, #316]	; (5380 <z_add_timeout+0x160>)
    5244:	484f      	ldr	r0, [pc, #316]	; (5384 <z_add_timeout+0x164>)
    5246:	235d      	movs	r3, #93	; 0x5d
    5248:	f000 fac2 	bl	57d0 <printk>
    524c:	484e      	ldr	r0, [pc, #312]	; (5388 <z_add_timeout+0x168>)
    524e:	f000 fabf 	bl	57d0 <printk>
    5252:	484b      	ldr	r0, [pc, #300]	; (5380 <z_add_timeout+0x160>)
    5254:	215d      	movs	r1, #93	; 0x5d
    5256:	f000 fb82 	bl	595e <assert_post_action>
	to->fn = fn;
    525a:	60a6      	str	r6, [r4, #8]
	__asm__ volatile(
    525c:	f04f 0320 	mov.w	r3, #32
    5260:	f3ef 8611 	mrs	r6, BASEPRI
    5264:	f383 8812 	msr	BASEPRI_MAX, r3
    5268:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    526c:	4847      	ldr	r0, [pc, #284]	; (538c <z_add_timeout+0x16c>)
    526e:	f7fe fe33 	bl	3ed8 <z_spin_lock_valid>
    5272:	b968      	cbnz	r0, 5290 <z_add_timeout+0x70>
    5274:	4a46      	ldr	r2, [pc, #280]	; (5390 <z_add_timeout+0x170>)
    5276:	4947      	ldr	r1, [pc, #284]	; (5394 <z_add_timeout+0x174>)
    5278:	4842      	ldr	r0, [pc, #264]	; (5384 <z_add_timeout+0x164>)
    527a:	2381      	movs	r3, #129	; 0x81
    527c:	f000 faa8 	bl	57d0 <printk>
    5280:	4942      	ldr	r1, [pc, #264]	; (538c <z_add_timeout+0x16c>)
    5282:	4845      	ldr	r0, [pc, #276]	; (5398 <z_add_timeout+0x178>)
    5284:	f000 faa4 	bl	57d0 <printk>
    5288:	4841      	ldr	r0, [pc, #260]	; (5390 <z_add_timeout+0x170>)
    528a:	2181      	movs	r1, #129	; 0x81
    528c:	f000 fb67 	bl	595e <assert_post_action>
	z_spin_lock_set_owner(l);
    5290:	483e      	ldr	r0, [pc, #248]	; (538c <z_add_timeout+0x16c>)
    5292:	f7fe fe3f 	bl	3f14 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    5296:	f06f 0201 	mvn.w	r2, #1
    529a:	1b53      	subs	r3, r2, r5
    529c:	f04f 30ff 	mov.w	r0, #4294967295
    52a0:	eb60 0307 	sbc.w	r3, r0, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    52a4:	2b00      	cmp	r3, #0
    52a6:	db1b      	blt.n	52e0 <z_add_timeout+0xc0>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    52a8:	4b3c      	ldr	r3, [pc, #240]	; (539c <z_add_timeout+0x17c>)
    52aa:	e9d3 1300 	ldrd	r1, r3, [r3]
    52ae:	1a52      	subs	r2, r2, r1
    52b0:	eb60 0303 	sbc.w	r3, r0, r3
    52b4:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
    52b6:	eb63 0707 	sbc.w	r7, r3, r7
    52ba:	2d01      	cmp	r5, #1
    52bc:	f177 0300 	sbcs.w	r3, r7, #0
    52c0:	bfbc      	itt	lt
    52c2:	2501      	movlt	r5, #1
    52c4:	2700      	movlt	r7, #0
    52c6:	e9c4 5704 	strd	r5, r7, [r4, #16]
	return list->head == list;
    52ca:	4a35      	ldr	r2, [pc, #212]	; (53a0 <z_add_timeout+0x180>)
	sys_dnode_t *const tail = list->tail;
    52cc:	e9d2 3c00 	ldrd	r3, ip, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    52d0:	4293      	cmp	r3, r2
    52d2:	d118      	bne.n	5306 <z_add_timeout+0xe6>
	node->prev = tail;
    52d4:	e9c4 2c00 	strd	r2, ip, [r4]
	tail->next = node;
    52d8:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    52dc:	6054      	str	r4, [r2, #4]
}
    52de:	e026      	b.n	532e <z_add_timeout+0x10e>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    52e0:	f7ff ff52 	bl	5188 <elapsed>
    52e4:	3501      	adds	r5, #1
    52e6:	f148 0800 	adc.w	r8, r8, #0
    52ea:	182d      	adds	r5, r5, r0
    52ec:	eb48 70e0 	adc.w	r0, r8, r0, asr #31
    52f0:	e9c4 5004 	strd	r5, r0, [r4, #16]
    52f4:	e7e9      	b.n	52ca <z_add_timeout+0xaa>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    52f6:	1a09      	subs	r1, r1, r0
    52f8:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
    52fc:	459c      	cmp	ip, r3
    52fe:	e9c4 1504 	strd	r1, r5, [r4, #16]
    5302:	d0e7      	beq.n	52d4 <z_add_timeout+0xb4>
    5304:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    5306:	2b00      	cmp	r3, #0
    5308:	d0e4      	beq.n	52d4 <z_add_timeout+0xb4>
			if (t->dticks > to->dticks) {
    530a:	e9d3 0704 	ldrd	r0, r7, [r3, #16]
    530e:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
    5312:	4281      	cmp	r1, r0
    5314:	eb75 0e07 	sbcs.w	lr, r5, r7
    5318:	daed      	bge.n	52f6 <z_add_timeout+0xd6>
				t->dticks -= to->dticks;
    531a:	1a41      	subs	r1, r0, r1
    531c:	eb67 0505 	sbc.w	r5, r7, r5
    5320:	e9c3 1504 	strd	r1, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    5324:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    5326:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    532a:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    532c:	605c      	str	r4, [r3, #4]
	return list->head == list;
    532e:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5330:	4293      	cmp	r3, r2
    5332:	d00b      	beq.n	534c <z_add_timeout+0x12c>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    5334:	429c      	cmp	r4, r3
    5336:	d109      	bne.n	534c <z_add_timeout+0x12c>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    5338:	f7ff ff30 	bl	519c <next_timeout>

			if (next_time == 0 ||
    533c:	b118      	cbz	r0, 5346 <z_add_timeout+0x126>
			    _current_cpu->slice_ticks != next_time) {
    533e:	4b19      	ldr	r3, [pc, #100]	; (53a4 <z_add_timeout+0x184>)
			if (next_time == 0 ||
    5340:	691b      	ldr	r3, [r3, #16]
    5342:	4283      	cmp	r3, r0
    5344:	d002      	beq.n	534c <z_add_timeout+0x12c>
				sys_clock_set_timeout(next_time, false);
    5346:	2100      	movs	r1, #0
    5348:	f7fd fcd6 	bl	2cf8 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    534c:	480f      	ldr	r0, [pc, #60]	; (538c <z_add_timeout+0x16c>)
    534e:	f7fe fdd1 	bl	3ef4 <z_spin_unlock_valid>
    5352:	b968      	cbnz	r0, 5370 <z_add_timeout+0x150>
    5354:	4a0e      	ldr	r2, [pc, #56]	; (5390 <z_add_timeout+0x170>)
    5356:	4914      	ldr	r1, [pc, #80]	; (53a8 <z_add_timeout+0x188>)
    5358:	480a      	ldr	r0, [pc, #40]	; (5384 <z_add_timeout+0x164>)
    535a:	23ac      	movs	r3, #172	; 0xac
    535c:	f000 fa38 	bl	57d0 <printk>
    5360:	490a      	ldr	r1, [pc, #40]	; (538c <z_add_timeout+0x16c>)
    5362:	4812      	ldr	r0, [pc, #72]	; (53ac <z_add_timeout+0x18c>)
    5364:	f000 fa34 	bl	57d0 <printk>
    5368:	4809      	ldr	r0, [pc, #36]	; (5390 <z_add_timeout+0x170>)
    536a:	21ac      	movs	r1, #172	; 0xac
    536c:	f000 faf7 	bl	595e <assert_post_action>
	__asm__ volatile(
    5370:	f386 8811 	msr	BASEPRI, r6
    5374:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    5378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    537c:	000070ff 	.word	0x000070ff
    5380:	000070db 	.word	0x000070db
    5384:	00006321 	.word	0x00006321
    5388:	00006f56 	.word	0x00006f56
    538c:	2000031c 	.word	0x2000031c
    5390:	000064a7 	.word	0x000064a7
    5394:	000064f9 	.word	0x000064f9
    5398:	0000650e 	.word	0x0000650e
    539c:	20000170 	.word	0x20000170
    53a0:	2000004c 	.word	0x2000004c
    53a4:	200002dc 	.word	0x200002dc
    53a8:	000064cd 	.word	0x000064cd
    53ac:	000064e4 	.word	0x000064e4

000053b0 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    53b0:	b538      	push	{r3, r4, r5, lr}
    53b2:	4604      	mov	r4, r0
	__asm__ volatile(
    53b4:	f04f 0320 	mov.w	r3, #32
    53b8:	f3ef 8511 	mrs	r5, BASEPRI
    53bc:	f383 8812 	msr	BASEPRI_MAX, r3
    53c0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    53c4:	481a      	ldr	r0, [pc, #104]	; (5430 <z_abort_timeout+0x80>)
    53c6:	f7fe fd87 	bl	3ed8 <z_spin_lock_valid>
    53ca:	b968      	cbnz	r0, 53e8 <z_abort_timeout+0x38>
    53cc:	4a19      	ldr	r2, [pc, #100]	; (5434 <z_abort_timeout+0x84>)
    53ce:	491a      	ldr	r1, [pc, #104]	; (5438 <z_abort_timeout+0x88>)
    53d0:	481a      	ldr	r0, [pc, #104]	; (543c <z_abort_timeout+0x8c>)
    53d2:	2381      	movs	r3, #129	; 0x81
    53d4:	f000 f9fc 	bl	57d0 <printk>
    53d8:	4915      	ldr	r1, [pc, #84]	; (5430 <z_abort_timeout+0x80>)
    53da:	4819      	ldr	r0, [pc, #100]	; (5440 <z_abort_timeout+0x90>)
    53dc:	f000 f9f8 	bl	57d0 <printk>
    53e0:	4814      	ldr	r0, [pc, #80]	; (5434 <z_abort_timeout+0x84>)
    53e2:	2181      	movs	r1, #129	; 0x81
    53e4:	f000 fabb 	bl	595e <assert_post_action>
	z_spin_lock_set_owner(l);
    53e8:	4811      	ldr	r0, [pc, #68]	; (5430 <z_abort_timeout+0x80>)
    53ea:	f7fe fd93 	bl	3f14 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
    53ee:	6823      	ldr	r3, [r4, #0]
    53f0:	b1db      	cbz	r3, 542a <z_abort_timeout+0x7a>
			remove_timeout(to);
    53f2:	4620      	mov	r0, r4
    53f4:	f7ff fefa 	bl	51ec <remove_timeout>
			ret = 0;
    53f8:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    53fa:	480d      	ldr	r0, [pc, #52]	; (5430 <z_abort_timeout+0x80>)
    53fc:	f7fe fd7a 	bl	3ef4 <z_spin_unlock_valid>
    5400:	b968      	cbnz	r0, 541e <z_abort_timeout+0x6e>
    5402:	4a0c      	ldr	r2, [pc, #48]	; (5434 <z_abort_timeout+0x84>)
    5404:	490f      	ldr	r1, [pc, #60]	; (5444 <z_abort_timeout+0x94>)
    5406:	480d      	ldr	r0, [pc, #52]	; (543c <z_abort_timeout+0x8c>)
    5408:	23ac      	movs	r3, #172	; 0xac
    540a:	f000 f9e1 	bl	57d0 <printk>
    540e:	4908      	ldr	r1, [pc, #32]	; (5430 <z_abort_timeout+0x80>)
    5410:	480d      	ldr	r0, [pc, #52]	; (5448 <z_abort_timeout+0x98>)
    5412:	f000 f9dd 	bl	57d0 <printk>
    5416:	4807      	ldr	r0, [pc, #28]	; (5434 <z_abort_timeout+0x84>)
    5418:	21ac      	movs	r1, #172	; 0xac
    541a:	f000 faa0 	bl	595e <assert_post_action>
	__asm__ volatile(
    541e:	f385 8811 	msr	BASEPRI, r5
    5422:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
    5426:	4620      	mov	r0, r4
    5428:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
    542a:	f06f 0415 	mvn.w	r4, #21
    542e:	e7e4      	b.n	53fa <z_abort_timeout+0x4a>
    5430:	2000031c 	.word	0x2000031c
    5434:	000064a7 	.word	0x000064a7
    5438:	000064f9 	.word	0x000064f9
    543c:	00006321 	.word	0x00006321
    5440:	0000650e 	.word	0x0000650e
    5444:	000064cd 	.word	0x000064cd
    5448:	000064e4 	.word	0x000064e4

0000544c <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    544c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    544e:	f04f 0320 	mov.w	r3, #32
    5452:	f3ef 8511 	mrs	r5, BASEPRI
    5456:	f383 8812 	msr	BASEPRI_MAX, r3
    545a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    545e:	4818      	ldr	r0, [pc, #96]	; (54c0 <z_get_next_timeout_expiry+0x74>)
    5460:	f7fe fd3a 	bl	3ed8 <z_spin_lock_valid>
    5464:	b968      	cbnz	r0, 5482 <z_get_next_timeout_expiry+0x36>
    5466:	4a17      	ldr	r2, [pc, #92]	; (54c4 <z_get_next_timeout_expiry+0x78>)
    5468:	4917      	ldr	r1, [pc, #92]	; (54c8 <z_get_next_timeout_expiry+0x7c>)
    546a:	4818      	ldr	r0, [pc, #96]	; (54cc <z_get_next_timeout_expiry+0x80>)
    546c:	2381      	movs	r3, #129	; 0x81
    546e:	f000 f9af 	bl	57d0 <printk>
    5472:	4913      	ldr	r1, [pc, #76]	; (54c0 <z_get_next_timeout_expiry+0x74>)
    5474:	4816      	ldr	r0, [pc, #88]	; (54d0 <z_get_next_timeout_expiry+0x84>)
    5476:	f000 f9ab 	bl	57d0 <printk>
    547a:	4812      	ldr	r0, [pc, #72]	; (54c4 <z_get_next_timeout_expiry+0x78>)
    547c:	2181      	movs	r1, #129	; 0x81
    547e:	f000 fa6e 	bl	595e <assert_post_action>
	z_spin_lock_set_owner(l);
    5482:	480f      	ldr	r0, [pc, #60]	; (54c0 <z_get_next_timeout_expiry+0x74>)
    5484:	f7fe fd46 	bl	3f14 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
    5488:	f7ff fe88 	bl	519c <next_timeout>
    548c:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    548e:	480c      	ldr	r0, [pc, #48]	; (54c0 <z_get_next_timeout_expiry+0x74>)
    5490:	f7fe fd30 	bl	3ef4 <z_spin_unlock_valid>
    5494:	b968      	cbnz	r0, 54b2 <z_get_next_timeout_expiry+0x66>
    5496:	4a0b      	ldr	r2, [pc, #44]	; (54c4 <z_get_next_timeout_expiry+0x78>)
    5498:	490e      	ldr	r1, [pc, #56]	; (54d4 <z_get_next_timeout_expiry+0x88>)
    549a:	480c      	ldr	r0, [pc, #48]	; (54cc <z_get_next_timeout_expiry+0x80>)
    549c:	23ac      	movs	r3, #172	; 0xac
    549e:	f000 f997 	bl	57d0 <printk>
    54a2:	4907      	ldr	r1, [pc, #28]	; (54c0 <z_get_next_timeout_expiry+0x74>)
    54a4:	480c      	ldr	r0, [pc, #48]	; (54d8 <z_get_next_timeout_expiry+0x8c>)
    54a6:	f000 f993 	bl	57d0 <printk>
    54aa:	4806      	ldr	r0, [pc, #24]	; (54c4 <z_get_next_timeout_expiry+0x78>)
    54ac:	21ac      	movs	r1, #172	; 0xac
    54ae:	f000 fa56 	bl	595e <assert_post_action>
	__asm__ volatile(
    54b2:	f385 8811 	msr	BASEPRI, r5
    54b6:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
    54ba:	4620      	mov	r0, r4
    54bc:	bd38      	pop	{r3, r4, r5, pc}
    54be:	bf00      	nop
    54c0:	2000031c 	.word	0x2000031c
    54c4:	000064a7 	.word	0x000064a7
    54c8:	000064f9 	.word	0x000064f9
    54cc:	00006321 	.word	0x00006321
    54d0:	0000650e 	.word	0x0000650e
    54d4:	000064cd 	.word	0x000064cd
    54d8:	000064e4 	.word	0x000064e4

000054dc <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    54dc:	b570      	push	{r4, r5, r6, lr}
    54de:	4604      	mov	r4, r0
    54e0:	460d      	mov	r5, r1
	__asm__ volatile(
    54e2:	f04f 0320 	mov.w	r3, #32
    54e6:	f3ef 8611 	mrs	r6, BASEPRI
    54ea:	f383 8812 	msr	BASEPRI_MAX, r3
    54ee:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    54f2:	481b      	ldr	r0, [pc, #108]	; (5560 <z_set_timeout_expiry+0x84>)
    54f4:	f7fe fcf0 	bl	3ed8 <z_spin_lock_valid>
    54f8:	b968      	cbnz	r0, 5516 <z_set_timeout_expiry+0x3a>
    54fa:	4a1a      	ldr	r2, [pc, #104]	; (5564 <z_set_timeout_expiry+0x88>)
    54fc:	491a      	ldr	r1, [pc, #104]	; (5568 <z_set_timeout_expiry+0x8c>)
    54fe:	481b      	ldr	r0, [pc, #108]	; (556c <z_set_timeout_expiry+0x90>)
    5500:	2381      	movs	r3, #129	; 0x81
    5502:	f000 f965 	bl	57d0 <printk>
    5506:	4916      	ldr	r1, [pc, #88]	; (5560 <z_set_timeout_expiry+0x84>)
    5508:	4819      	ldr	r0, [pc, #100]	; (5570 <z_set_timeout_expiry+0x94>)
    550a:	f000 f961 	bl	57d0 <printk>
    550e:	4815      	ldr	r0, [pc, #84]	; (5564 <z_set_timeout_expiry+0x88>)
    5510:	2181      	movs	r1, #129	; 0x81
    5512:	f000 fa24 	bl	595e <assert_post_action>
	z_spin_lock_set_owner(l);
    5516:	4812      	ldr	r0, [pc, #72]	; (5560 <z_set_timeout_expiry+0x84>)
    5518:	f7fe fcfc 	bl	3f14 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
    551c:	f7ff fe3e 	bl	519c <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    5520:	2801      	cmp	r0, #1
    5522:	dd05      	ble.n	5530 <z_set_timeout_expiry+0x54>
    5524:	42a0      	cmp	r0, r4
    5526:	db03      	blt.n	5530 <z_set_timeout_expiry+0x54>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    5528:	4629      	mov	r1, r5
    552a:	4620      	mov	r0, r4
    552c:	f7fd fbe4 	bl	2cf8 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5530:	480b      	ldr	r0, [pc, #44]	; (5560 <z_set_timeout_expiry+0x84>)
    5532:	f7fe fcdf 	bl	3ef4 <z_spin_unlock_valid>
    5536:	b968      	cbnz	r0, 5554 <z_set_timeout_expiry+0x78>
    5538:	4a0a      	ldr	r2, [pc, #40]	; (5564 <z_set_timeout_expiry+0x88>)
    553a:	490e      	ldr	r1, [pc, #56]	; (5574 <z_set_timeout_expiry+0x98>)
    553c:	480b      	ldr	r0, [pc, #44]	; (556c <z_set_timeout_expiry+0x90>)
    553e:	23ac      	movs	r3, #172	; 0xac
    5540:	f000 f946 	bl	57d0 <printk>
    5544:	4906      	ldr	r1, [pc, #24]	; (5560 <z_set_timeout_expiry+0x84>)
    5546:	480c      	ldr	r0, [pc, #48]	; (5578 <z_set_timeout_expiry+0x9c>)
    5548:	f000 f942 	bl	57d0 <printk>
    554c:	4805      	ldr	r0, [pc, #20]	; (5564 <z_set_timeout_expiry+0x88>)
    554e:	21ac      	movs	r1, #172	; 0xac
    5550:	f000 fa05 	bl	595e <assert_post_action>
	__asm__ volatile(
    5554:	f386 8811 	msr	BASEPRI, r6
    5558:	f3bf 8f6f 	isb	sy
		}
	}
}
    555c:	bd70      	pop	{r4, r5, r6, pc}
    555e:	bf00      	nop
    5560:	2000031c 	.word	0x2000031c
    5564:	000064a7 	.word	0x000064a7
    5568:	000064f9 	.word	0x000064f9
    556c:	00006321 	.word	0x00006321
    5570:	0000650e 	.word	0x0000650e
    5574:	000064cd 	.word	0x000064cd
    5578:	000064e4 	.word	0x000064e4

0000557c <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    557c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5580:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    5582:	f7fe ffc7 	bl	4514 <z_time_slice>
	__asm__ volatile(
    5586:	f04f 0320 	mov.w	r3, #32
    558a:	f3ef 8511 	mrs	r5, BASEPRI
    558e:	f383 8812 	msr	BASEPRI_MAX, r3
    5592:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5596:	484c      	ldr	r0, [pc, #304]	; (56c8 <sys_clock_announce+0x14c>)
    5598:	f7fe fc9e 	bl	3ed8 <z_spin_lock_valid>
    559c:	b968      	cbnz	r0, 55ba <sys_clock_announce+0x3e>
    559e:	4a4b      	ldr	r2, [pc, #300]	; (56cc <sys_clock_announce+0x150>)
    55a0:	494b      	ldr	r1, [pc, #300]	; (56d0 <sys_clock_announce+0x154>)
    55a2:	484c      	ldr	r0, [pc, #304]	; (56d4 <sys_clock_announce+0x158>)
    55a4:	2381      	movs	r3, #129	; 0x81
    55a6:	f000 f913 	bl	57d0 <printk>
    55aa:	4947      	ldr	r1, [pc, #284]	; (56c8 <sys_clock_announce+0x14c>)
    55ac:	484a      	ldr	r0, [pc, #296]	; (56d8 <sys_clock_announce+0x15c>)
    55ae:	f000 f90f 	bl	57d0 <printk>
    55b2:	4846      	ldr	r0, [pc, #280]	; (56cc <sys_clock_announce+0x150>)
    55b4:	2181      	movs	r1, #129	; 0x81
    55b6:	f000 f9d2 	bl	595e <assert_post_action>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    55ba:	4f48      	ldr	r7, [pc, #288]	; (56dc <sys_clock_announce+0x160>)
	z_spin_lock_set_owner(l);
    55bc:	4842      	ldr	r0, [pc, #264]	; (56c8 <sys_clock_announce+0x14c>)
	return list->head == list;
    55be:	f8df 8120 	ldr.w	r8, [pc, #288]	; 56e0 <sys_clock_announce+0x164>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    55c2:	4e48      	ldr	r6, [pc, #288]	; (56e4 <sys_clock_announce+0x168>)
    55c4:	f7fe fca6 	bl	3f14 <z_spin_lock_set_owner>
	announce_remaining = ticks;
    55c8:	603c      	str	r4, [r7, #0]
    55ca:	f8d8 4000 	ldr.w	r4, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    55ce:	683a      	ldr	r2, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    55d0:	4544      	cmp	r4, r8
		curr_tick += dt;
    55d2:	e9d6 1e00 	ldrd	r1, lr, [r6]
    55d6:	ea4f 70e2 	mov.w	r0, r2, asr #31
    55da:	d00b      	beq.n	55f4 <sys_clock_announce+0x78>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    55dc:	b154      	cbz	r4, 55f4 <sys_clock_announce+0x78>
    55de:	e9d4 3c04 	ldrd	r3, ip, [r4, #16]
    55e2:	429a      	cmp	r2, r3
    55e4:	eb70 090c 	sbcs.w	r9, r0, ip
    55e8:	da28      	bge.n	563c <sys_clock_announce+0xc0>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    55ea:	1a9b      	subs	r3, r3, r2
    55ec:	eb6c 0c00 	sbc.w	ip, ip, r0
    55f0:	e9c4 3c04 	strd	r3, ip, [r4, #16]
	}

	curr_tick += announce_remaining;
    55f4:	1852      	adds	r2, r2, r1
    55f6:	eb4e 0000 	adc.w	r0, lr, r0
	announce_remaining = 0;
    55fa:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    55fc:	e9c6 2000 	strd	r2, r0, [r6]
	announce_remaining = 0;
    5600:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
    5602:	f7ff fdcb 	bl	519c <next_timeout>
    5606:	4621      	mov	r1, r4
    5608:	f7fd fb76 	bl	2cf8 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    560c:	482e      	ldr	r0, [pc, #184]	; (56c8 <sys_clock_announce+0x14c>)
    560e:	f7fe fc71 	bl	3ef4 <z_spin_unlock_valid>
    5612:	b968      	cbnz	r0, 5630 <sys_clock_announce+0xb4>
    5614:	4a2d      	ldr	r2, [pc, #180]	; (56cc <sys_clock_announce+0x150>)
    5616:	4934      	ldr	r1, [pc, #208]	; (56e8 <sys_clock_announce+0x16c>)
    5618:	482e      	ldr	r0, [pc, #184]	; (56d4 <sys_clock_announce+0x158>)
    561a:	23ac      	movs	r3, #172	; 0xac
    561c:	f000 f8d8 	bl	57d0 <printk>
    5620:	4929      	ldr	r1, [pc, #164]	; (56c8 <sys_clock_announce+0x14c>)
    5622:	4832      	ldr	r0, [pc, #200]	; (56ec <sys_clock_announce+0x170>)
    5624:	f000 f8d4 	bl	57d0 <printk>
    5628:	4828      	ldr	r0, [pc, #160]	; (56cc <sys_clock_announce+0x150>)
    562a:	21ac      	movs	r1, #172	; 0xac
    562c:	f000 f997 	bl	595e <assert_post_action>
	__asm__ volatile(
    5630:	f385 8811 	msr	BASEPRI, r5
    5634:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    5638:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    563c:	1859      	adds	r1, r3, r1
    563e:	eb4e 70e3 	adc.w	r0, lr, r3, asr #31
		announce_remaining -= dt;
    5642:	1ad3      	subs	r3, r2, r3
    5644:	603b      	str	r3, [r7, #0]
		t->dticks = 0;
    5646:	2200      	movs	r2, #0
    5648:	2300      	movs	r3, #0
		curr_tick += dt;
    564a:	e9c6 1000 	strd	r1, r0, [r6]
		t->dticks = 0;
    564e:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    5652:	4620      	mov	r0, r4
    5654:	f7ff fdca 	bl	51ec <remove_timeout>
    5658:	481b      	ldr	r0, [pc, #108]	; (56c8 <sys_clock_announce+0x14c>)
    565a:	f7fe fc4b 	bl	3ef4 <z_spin_unlock_valid>
    565e:	b968      	cbnz	r0, 567c <sys_clock_announce+0x100>
    5660:	4a1a      	ldr	r2, [pc, #104]	; (56cc <sys_clock_announce+0x150>)
    5662:	4921      	ldr	r1, [pc, #132]	; (56e8 <sys_clock_announce+0x16c>)
    5664:	481b      	ldr	r0, [pc, #108]	; (56d4 <sys_clock_announce+0x158>)
    5666:	23ac      	movs	r3, #172	; 0xac
    5668:	f000 f8b2 	bl	57d0 <printk>
    566c:	4916      	ldr	r1, [pc, #88]	; (56c8 <sys_clock_announce+0x14c>)
    566e:	481f      	ldr	r0, [pc, #124]	; (56ec <sys_clock_announce+0x170>)
    5670:	f000 f8ae 	bl	57d0 <printk>
    5674:	4815      	ldr	r0, [pc, #84]	; (56cc <sys_clock_announce+0x150>)
    5676:	21ac      	movs	r1, #172	; 0xac
    5678:	f000 f971 	bl	595e <assert_post_action>
    567c:	f385 8811 	msr	BASEPRI, r5
    5680:	f3bf 8f6f 	isb	sy
		t->fn(t);
    5684:	68a3      	ldr	r3, [r4, #8]
    5686:	4620      	mov	r0, r4
    5688:	4798      	blx	r3
	__asm__ volatile(
    568a:	f04f 0320 	mov.w	r3, #32
    568e:	f3ef 8511 	mrs	r5, BASEPRI
    5692:	f383 8812 	msr	BASEPRI_MAX, r3
    5696:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    569a:	480b      	ldr	r0, [pc, #44]	; (56c8 <sys_clock_announce+0x14c>)
    569c:	f7fe fc1c 	bl	3ed8 <z_spin_lock_valid>
    56a0:	b968      	cbnz	r0, 56be <sys_clock_announce+0x142>
    56a2:	4a0a      	ldr	r2, [pc, #40]	; (56cc <sys_clock_announce+0x150>)
    56a4:	490a      	ldr	r1, [pc, #40]	; (56d0 <sys_clock_announce+0x154>)
    56a6:	480b      	ldr	r0, [pc, #44]	; (56d4 <sys_clock_announce+0x158>)
    56a8:	2381      	movs	r3, #129	; 0x81
    56aa:	f000 f891 	bl	57d0 <printk>
    56ae:	4906      	ldr	r1, [pc, #24]	; (56c8 <sys_clock_announce+0x14c>)
    56b0:	4809      	ldr	r0, [pc, #36]	; (56d8 <sys_clock_announce+0x15c>)
    56b2:	f000 f88d 	bl	57d0 <printk>
    56b6:	4805      	ldr	r0, [pc, #20]	; (56cc <sys_clock_announce+0x150>)
    56b8:	2181      	movs	r1, #129	; 0x81
    56ba:	f000 f950 	bl	595e <assert_post_action>
	z_spin_lock_set_owner(l);
    56be:	4802      	ldr	r0, [pc, #8]	; (56c8 <sys_clock_announce+0x14c>)
    56c0:	f7fe fc28 	bl	3f14 <z_spin_lock_set_owner>
	return k;
    56c4:	e781      	b.n	55ca <sys_clock_announce+0x4e>
    56c6:	bf00      	nop
    56c8:	2000031c 	.word	0x2000031c
    56cc:	000064a7 	.word	0x000064a7
    56d0:	000064f9 	.word	0x000064f9
    56d4:	00006321 	.word	0x00006321
    56d8:	0000650e 	.word	0x0000650e
    56dc:	20000318 	.word	0x20000318
    56e0:	2000004c 	.word	0x2000004c
    56e4:	20000170 	.word	0x20000170
    56e8:	000064cd 	.word	0x000064cd
    56ec:	000064e4 	.word	0x000064e4

000056f0 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    56f0:	b570      	push	{r4, r5, r6, lr}
    56f2:	f04f 0320 	mov.w	r3, #32
    56f6:	f3ef 8611 	mrs	r6, BASEPRI
    56fa:	f383 8812 	msr	BASEPRI_MAX, r3
    56fe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5702:	481b      	ldr	r0, [pc, #108]	; (5770 <sys_clock_tick_get+0x80>)
    5704:	f7fe fbe8 	bl	3ed8 <z_spin_lock_valid>
    5708:	b968      	cbnz	r0, 5726 <sys_clock_tick_get+0x36>
    570a:	4a1a      	ldr	r2, [pc, #104]	; (5774 <sys_clock_tick_get+0x84>)
    570c:	491a      	ldr	r1, [pc, #104]	; (5778 <sys_clock_tick_get+0x88>)
    570e:	481b      	ldr	r0, [pc, #108]	; (577c <sys_clock_tick_get+0x8c>)
    5710:	2381      	movs	r3, #129	; 0x81
    5712:	f000 f85d 	bl	57d0 <printk>
    5716:	4916      	ldr	r1, [pc, #88]	; (5770 <sys_clock_tick_get+0x80>)
    5718:	4819      	ldr	r0, [pc, #100]	; (5780 <sys_clock_tick_get+0x90>)
    571a:	f000 f859 	bl	57d0 <printk>
    571e:	4815      	ldr	r0, [pc, #84]	; (5774 <sys_clock_tick_get+0x84>)
    5720:	2181      	movs	r1, #129	; 0x81
    5722:	f000 f91c 	bl	595e <assert_post_action>
	z_spin_lock_set_owner(l);
    5726:	4812      	ldr	r0, [pc, #72]	; (5770 <sys_clock_tick_get+0x80>)
    5728:	f7fe fbf4 	bl	3f14 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    572c:	f7fd fb16 	bl	2d5c <sys_clock_elapsed>
    5730:	4b14      	ldr	r3, [pc, #80]	; (5784 <sys_clock_tick_get+0x94>)
    5732:	e9d3 4500 	ldrd	r4, r5, [r3]
    5736:	1904      	adds	r4, r0, r4
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5738:	480d      	ldr	r0, [pc, #52]	; (5770 <sys_clock_tick_get+0x80>)
    573a:	f145 0500 	adc.w	r5, r5, #0
    573e:	f7fe fbd9 	bl	3ef4 <z_spin_unlock_valid>
    5742:	b968      	cbnz	r0, 5760 <sys_clock_tick_get+0x70>
    5744:	4a0b      	ldr	r2, [pc, #44]	; (5774 <sys_clock_tick_get+0x84>)
    5746:	4910      	ldr	r1, [pc, #64]	; (5788 <sys_clock_tick_get+0x98>)
    5748:	480c      	ldr	r0, [pc, #48]	; (577c <sys_clock_tick_get+0x8c>)
    574a:	23ac      	movs	r3, #172	; 0xac
    574c:	f000 f840 	bl	57d0 <printk>
    5750:	4907      	ldr	r1, [pc, #28]	; (5770 <sys_clock_tick_get+0x80>)
    5752:	480e      	ldr	r0, [pc, #56]	; (578c <sys_clock_tick_get+0x9c>)
    5754:	f000 f83c 	bl	57d0 <printk>
    5758:	4806      	ldr	r0, [pc, #24]	; (5774 <sys_clock_tick_get+0x84>)
    575a:	21ac      	movs	r1, #172	; 0xac
    575c:	f000 f8ff 	bl	595e <assert_post_action>
	__asm__ volatile(
    5760:	f386 8811 	msr	BASEPRI, r6
    5764:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    5768:	4620      	mov	r0, r4
    576a:	4629      	mov	r1, r5
    576c:	bd70      	pop	{r4, r5, r6, pc}
    576e:	bf00      	nop
    5770:	2000031c 	.word	0x2000031c
    5774:	000064a7 	.word	0x000064a7
    5778:	000064f9 	.word	0x000064f9
    577c:	00006321 	.word	0x00006321
    5780:	0000650e 	.word	0x0000650e
    5784:	20000170 	.word	0x20000170
    5788:	000064cd 	.word	0x000064cd
    578c:	000064e4 	.word	0x000064e4

00005790 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    5790:	4a02      	ldr	r2, [pc, #8]	; (579c <boot_banner+0xc>)
    5792:	4903      	ldr	r1, [pc, #12]	; (57a0 <boot_banner+0x10>)
    5794:	4803      	ldr	r0, [pc, #12]	; (57a4 <boot_banner+0x14>)
    5796:	f000 b81b 	b.w	57d0 <printk>
    579a:	bf00      	nop
    579c:	00006f58 	.word	0x00006f58
    57a0:	0000711f 	.word	0x0000711f
    57a4:	0000713b 	.word	0x0000713b

000057a8 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    57a8:	4770      	bx	lr

000057aa <sys_notify_validate>:
	if (notify == NULL) {
    57aa:	4603      	mov	r3, r0
    57ac:	b158      	cbz	r0, 57c6 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    57ae:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    57b0:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
    57b4:	2a01      	cmp	r2, #1
    57b6:	d003      	beq.n	57c0 <sys_notify_validate+0x16>
    57b8:	2a03      	cmp	r2, #3
    57ba:	d104      	bne.n	57c6 <sys_notify_validate+0x1c>
		if (notify->method.callback == NULL) {
    57bc:	6802      	ldr	r2, [r0, #0]
    57be:	b112      	cbz	r2, 57c6 <sys_notify_validate+0x1c>
		notify->result = 0;
    57c0:	2000      	movs	r0, #0
    57c2:	6098      	str	r0, [r3, #8]
    57c4:	4770      	bx	lr
		return -EINVAL;
    57c6:	f06f 0015 	mvn.w	r0, #21
}
    57ca:	4770      	bx	lr

000057cc <arch_printk_char_out>:
}
    57cc:	2000      	movs	r0, #0
    57ce:	4770      	bx	lr

000057d0 <printk>:
 *
 * @return N/A
 */

void printk(const char *fmt, ...)
{
    57d0:	b40f      	push	{r0, r1, r2, r3}
    57d2:	b507      	push	{r0, r1, r2, lr}
    57d4:	a904      	add	r1, sp, #16
    57d6:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    57da:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
    57dc:	f7fa fe7c 	bl	4d8 <vprintk>
	}
	va_end(ap);
}
    57e0:	b003      	add	sp, #12
    57e2:	f85d eb04 	ldr.w	lr, [sp], #4
    57e6:	b004      	add	sp, #16
    57e8:	4770      	bx	lr

000057ea <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    57ea:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
    57ec:	f013 0307 	ands.w	r3, r3, #7
    57f0:	d105      	bne.n	57fe <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    57f2:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    57f4:	2b00      	cmp	r3, #0
    57f6:	bf0c      	ite	eq
    57f8:	2000      	moveq	r0, #0
    57fa:	2003      	movne	r0, #3
    57fc:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    57fe:	2b02      	cmp	r3, #2
    5800:	d105      	bne.n	580e <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    5802:	8bc3      	ldrh	r3, [r0, #30]
		evt = EVT_STOP;
    5804:	2b00      	cmp	r3, #0
    5806:	bf14      	ite	ne
    5808:	2000      	movne	r0, #0
    580a:	2004      	moveq	r0, #4
    580c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    580e:	2b01      	cmp	r3, #1
    5810:	d105      	bne.n	581e <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    5812:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    5814:	2b00      	cmp	r3, #0
    5816:	bf0c      	ite	eq
    5818:	2000      	moveq	r0, #0
    581a:	2005      	movne	r0, #5
    581c:	4770      	bx	lr
	int evt = EVT_NOP;
    581e:	2000      	movs	r0, #0
}
    5820:	4770      	bx	lr

00005822 <notify_one>:
{
    5822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5826:	460d      	mov	r5, r1
    5828:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    582a:	4619      	mov	r1, r3
    582c:	1d28      	adds	r0, r5, #4
{
    582e:	4690      	mov	r8, r2
    5830:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    5832:	f7fa fe23 	bl	47c <sys_notify_finalize>
	if (cb) {
    5836:	4604      	mov	r4, r0
    5838:	b138      	cbz	r0, 584a <notify_one+0x28>
		cb(mgr, cli, state, res);
    583a:	4633      	mov	r3, r6
    583c:	4642      	mov	r2, r8
    583e:	4629      	mov	r1, r5
    5840:	4638      	mov	r0, r7
    5842:	46a4      	mov	ip, r4
}
    5844:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    5848:	4760      	bx	ip
}
    584a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000584e <validate_args>:
{
    584e:	b510      	push	{r4, lr}
    5850:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    5852:	b140      	cbz	r0, 5866 <validate_args+0x18>
    5854:	b139      	cbz	r1, 5866 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    5856:	1d08      	adds	r0, r1, #4
    5858:	f7ff ffa7 	bl	57aa <sys_notify_validate>
	if ((rv == 0)
    585c:	b928      	cbnz	r0, 586a <validate_args+0x1c>
	    && ((cli->notify.flags
    585e:	68a3      	ldr	r3, [r4, #8]
    5860:	f033 0303 	bics.w	r3, r3, #3
    5864:	d001      	beq.n	586a <validate_args+0x1c>
		rv = -EINVAL;
    5866:	f06f 0015 	mvn.w	r0, #21
}
    586a:	bd10      	pop	{r4, pc}

0000586c <onoff_manager_init>:
{
    586c:	b538      	push	{r3, r4, r5, lr}
    586e:	460c      	mov	r4, r1
	if ((mgr == NULL)
    5870:	4605      	mov	r5, r0
    5872:	b158      	cbz	r0, 588c <onoff_manager_init+0x20>
	    || (transitions == NULL)
    5874:	b151      	cbz	r1, 588c <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    5876:	680b      	ldr	r3, [r1, #0]
    5878:	b143      	cbz	r3, 588c <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    587a:	684b      	ldr	r3, [r1, #4]
    587c:	b133      	cbz	r3, 588c <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    587e:	2220      	movs	r2, #32
    5880:	2100      	movs	r1, #0
    5882:	f000 f912 	bl	5aaa <memset>
    5886:	612c      	str	r4, [r5, #16]
	return 0;
    5888:	2000      	movs	r0, #0
}
    588a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    588c:	f06f 0015 	mvn.w	r0, #21
    5890:	e7fb      	b.n	588a <onoff_manager_init+0x1e>

00005892 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    5892:	4604      	mov	r4, r0
    5894:	b508      	push	{r3, lr}
    5896:	4608      	mov	r0, r1
    5898:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    589a:	461a      	mov	r2, r3
    589c:	47a0      	blx	r4
	return z_impl_z_current_get();
    589e:	f7ff fb9f 	bl	4fe0 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    58a2:	f7fc f88d 	bl	19c0 <z_impl_k_thread_abort>

000058a6 <encode_uint>:
{
    58a6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    58aa:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    58ac:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    58ae:	2b6f      	cmp	r3, #111	; 0x6f
{
    58b0:	4680      	mov	r8, r0
    58b2:	460f      	mov	r7, r1
    58b4:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    58b6:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    58ba:	d029      	beq.n	5910 <encode_uint+0x6a>
    58bc:	d824      	bhi.n	5908 <encode_uint+0x62>
		return 16;
    58be:	2b58      	cmp	r3, #88	; 0x58
    58c0:	bf14      	ite	ne
    58c2:	260a      	movne	r6, #10
    58c4:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
    58c6:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    58ca:	4632      	mov	r2, r6
    58cc:	2300      	movs	r3, #0
    58ce:	4640      	mov	r0, r8
    58d0:	4639      	mov	r1, r7
    58d2:	f7fa fbf1 	bl	b8 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    58d6:	2a09      	cmp	r2, #9
    58d8:	b2d4      	uxtb	r4, r2
    58da:	d81e      	bhi.n	591a <encode_uint+0x74>
    58dc:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    58de:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    58e0:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    58e2:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    58e6:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    58ea:	d301      	bcc.n	58f0 <encode_uint+0x4a>
    58ec:	45d1      	cmp	r9, sl
    58ee:	d811      	bhi.n	5914 <encode_uint+0x6e>
	if (conv->flag_hash) {
    58f0:	782b      	ldrb	r3, [r5, #0]
    58f2:	069b      	lsls	r3, r3, #26
    58f4:	d505      	bpl.n	5902 <encode_uint+0x5c>
		if (radix == 8) {
    58f6:	2e08      	cmp	r6, #8
    58f8:	d115      	bne.n	5926 <encode_uint+0x80>
			conv->altform_0 = true;
    58fa:	78ab      	ldrb	r3, [r5, #2]
    58fc:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    5900:	70ab      	strb	r3, [r5, #2]
}
    5902:	4648      	mov	r0, r9
    5904:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    5908:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    590c:	2b70      	cmp	r3, #112	; 0x70
    590e:	e7d7      	b.n	58c0 <encode_uint+0x1a>
	switch (specifier) {
    5910:	2608      	movs	r6, #8
    5912:	e7d8      	b.n	58c6 <encode_uint+0x20>
		value /= radix;
    5914:	4680      	mov	r8, r0
    5916:	460f      	mov	r7, r1
    5918:	e7d7      	b.n	58ca <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    591a:	f1bb 0f19 	cmp.w	fp, #25
    591e:	bf94      	ite	ls
    5920:	3437      	addls	r4, #55	; 0x37
    5922:	3457      	addhi	r4, #87	; 0x57
    5924:	e7db      	b.n	58de <encode_uint+0x38>
		} else if (radix == 16) {
    5926:	2e10      	cmp	r6, #16
    5928:	d1eb      	bne.n	5902 <encode_uint+0x5c>
			conv->altform_0c = true;
    592a:	78ab      	ldrb	r3, [r5, #2]
    592c:	f043 0310 	orr.w	r3, r3, #16
    5930:	e7e6      	b.n	5900 <encode_uint+0x5a>

00005932 <outs>:
{
    5932:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5936:	4607      	mov	r7, r0
    5938:	4688      	mov	r8, r1
    593a:	4615      	mov	r5, r2
    593c:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    593e:	4614      	mov	r4, r2
    5940:	42b4      	cmp	r4, r6
    5942:	eba4 0005 	sub.w	r0, r4, r5
    5946:	d302      	bcc.n	594e <outs+0x1c>
    5948:	b93e      	cbnz	r6, 595a <outs+0x28>
    594a:	7823      	ldrb	r3, [r4, #0]
    594c:	b12b      	cbz	r3, 595a <outs+0x28>
		int rc = out((int)*sp++, ctx);
    594e:	f814 0b01 	ldrb.w	r0, [r4], #1
    5952:	4641      	mov	r1, r8
    5954:	47b8      	blx	r7
		if (rc < 0) {
    5956:	2800      	cmp	r0, #0
    5958:	daf2      	bge.n	5940 <outs+0xe>
}
    595a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000595e <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    595e:	4040      	eors	r0, r0
    5960:	f380 8811 	msr	BASEPRI, r0
    5964:	f04f 0004 	mov.w	r0, #4
    5968:	df02      	svc	2
}
    596a:	4770      	bx	lr

0000596c <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_TMP100, 1);

GEN_ABS_SYM_END
    596c:	4770      	bx	lr

0000596e <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
    596e:	2200      	movs	r2, #0
    5970:	e9c0 2200 	strd	r2, r2, [r0]
    5974:	6082      	str	r2, [r0, #8]
}
    5976:	4770      	bx	lr

00005978 <tmp100_reg_read.isra.0>:
static int tmp100_reg_read(struct tmp100_data *drv_data,
    5978:	b570      	push	{r4, r5, r6, lr}
    597a:	b088      	sub	sp, #32
    597c:	4615      	mov	r5, r2
				 const void *write_buf, size_t num_write,
				 void *read_buf, size_t num_read)
{
	struct i2c_msg msg[2];

	msg[0].buf = (uint8_t *)write_buf;
    597e:	f10d 0207 	add.w	r2, sp, #7
    5982:	9202      	str	r2, [sp, #8]
	msg[0].len = num_write;
    5984:	2201      	movs	r2, #1
    5986:	f88d 1007 	strb.w	r1, [sp, #7]
    598a:	9203      	str	r2, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
    598c:	2400      	movs	r4, #0

	msg[1].buf = (uint8_t *)read_buf;
	msg[1].len = num_read;
    598e:	2202      	movs	r2, #2
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    5990:	2107      	movs	r1, #7
	msg[0].flags = I2C_MSG_WRITE;
    5992:	f88d 4010 	strb.w	r4, [sp, #16]
	msg[1].buf = (uint8_t *)read_buf;
    5996:	9505      	str	r5, [sp, #20]
	msg[1].len = num_read;
    5998:	9206      	str	r2, [sp, #24]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    599a:	f88d 101c 	strb.w	r1, [sp, #28]
	return api->transfer(dev, msgs, num_msgs, addr);
    599e:	6883      	ldr	r3, [r0, #8]
    59a0:	a902      	add	r1, sp, #8
    59a2:	685e      	ldr	r6, [r3, #4]
    59a4:	2348      	movs	r3, #72	; 0x48
    59a6:	47b0      	blx	r6
    if (i2c_burst_read(drv_data->i2c, TMP100_I2C_ADDRESS,
    59a8:	42a0      	cmp	r0, r4
    59aa:	db05      	blt.n	59b8 <tmp100_reg_read.isra.0+0x40>
	*val = sys_be16_to_cpu(*val);
    59ac:	882b      	ldrh	r3, [r5, #0]
    59ae:	ba5b      	rev16	r3, r3
    59b0:	802b      	strh	r3, [r5, #0]
	return 0;
    59b2:	4620      	mov	r0, r4
}
    59b4:	b008      	add	sp, #32
    59b6:	bd70      	pop	{r4, r5, r6, pc}
        return -EIO;
    59b8:	f06f 0004 	mvn.w	r0, #4
    59bc:	e7fa      	b.n	59b4 <tmp100_reg_read.isra.0+0x3c>

000059be <tmp100_attr_set>:
{
    59be:	b530      	push	{r4, r5, lr}
	if (chan != SENSOR_CHAN_AMBIENT_TEMP) {
    59c0:	290d      	cmp	r1, #13
    struct tmp100_data *drv_data = dev->data;
    59c2:	6905      	ldr	r5, [r0, #16]
{
    59c4:	b089      	sub	sp, #36	; 0x24
	if (chan != SENSOR_CHAN_AMBIENT_TEMP) {
    59c6:	d135      	bne.n	5a34 <tmp100_attr_set+0x76>
	if(attr == SENSOR_ATTR_FULL_SCALE) {
    59c8:	2a07      	cmp	r2, #7
    59ca:	d102      	bne.n	59d2 <tmp100_attr_set+0x14>
		if (val->val1 == 128) {
    59cc:	681b      	ldr	r3, [r3, #0]
    59ce:	2b80      	cmp	r3, #128	; 0x80
    59d0:	d130      	bne.n	5a34 <tmp100_attr_set+0x76>
    uint16_t old_val = 0U;
    59d2:	2400      	movs	r4, #0
    if (tmp100_reg_read(drv_data, reg, &old_val) < 0) {
    59d4:	6828      	ldr	r0, [r5, #0]
    uint16_t old_val = 0U;
    59d6:	f8ad 4004 	strh.w	r4, [sp, #4]
    if (tmp100_reg_read(drv_data, reg, &old_val) < 0) {
    59da:	aa01      	add	r2, sp, #4
    59dc:	2101      	movs	r1, #1
    59de:	f7ff ffcb 	bl	5978 <tmp100_reg_read.isra.0>
    59e2:	42a0      	cmp	r0, r4
    59e4:	da03      	bge.n	59ee <tmp100_attr_set+0x30>
            return -EIO;
    59e6:	f06f 0004 	mvn.w	r0, #4
}
    59ea:	b009      	add	sp, #36	; 0x24
    59ec:	bd30      	pop	{r4, r5, pc}
    new_val = old_val & ~mask;
    59ee:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    59f2:	6828      	ldr	r0, [r5, #0]
{
	struct i2c_msg msg[2];

	msg[0].buf = &start_addr;
	msg[0].len = 1U;
	msg[0].flags = I2C_MSG_WRITE;
    59f4:	f88d 4010 	strb.w	r4, [sp, #16]
    59f8:	f023 0301 	bic.w	r3, r3, #1
    uint16_t val_be = sys_cpu_to_be16(val);
    59fc:	ba5b      	rev16	r3, r3
	msg[0].buf = &start_addr;
    59fe:	f10d 0203 	add.w	r2, sp, #3
    5a02:	f8ad 3006 	strh.w	r3, [sp, #6]
static inline int i2c_burst_write(const struct device *dev,
    5a06:	2301      	movs	r3, #1
	msg[0].len = 1U;
    5a08:	e9cd 2302 	strd	r2, r3, [sp, #8]
    5a0c:	f88d 3003 	strb.w	r3, [sp, #3]

	msg[1].buf = (uint8_t *)buf;
	msg[1].len = num_bytes;
    5a10:	2202      	movs	r2, #2
	msg[1].buf = (uint8_t *)buf;
    5a12:	f10d 0306 	add.w	r3, sp, #6
    5a16:	9305      	str	r3, [sp, #20]
	msg[1].len = num_bytes;
    5a18:	9206      	str	r2, [sp, #24]
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    5a1a:	f88d 201c 	strb.w	r2, [sp, #28]
	return api->transfer(dev, msgs, num_msgs, addr);
    5a1e:	6883      	ldr	r3, [r0, #8]
    5a20:	a902      	add	r1, sp, #8
    5a22:	685c      	ldr	r4, [r3, #4]
    5a24:	2348      	movs	r3, #72	; 0x48
    5a26:	47a0      	blx	r4
            return -EIO;
    5a28:	2800      	cmp	r0, #0
    5a2a:	bfac      	ite	ge
    5a2c:	2000      	movge	r0, #0
    5a2e:	f06f 0004 	mvnlt.w	r0, #4
    5a32:	e7da      	b.n	59ea <tmp100_attr_set+0x2c>
		return -ENOTSUP;
    5a34:	f06f 0085 	mvn.w	r0, #133	; 0x85
    5a38:	e7d7      	b.n	59ea <tmp100_attr_set+0x2c>

00005a3a <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    5a3a:	f7fe b86f 	b.w	3b1c <z_fatal_error>

00005a3e <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    5a3e:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    5a40:	6800      	ldr	r0, [r0, #0]
    5a42:	f7fe b86b 	b.w	3b1c <z_fatal_error>

00005a46 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    5a46:	2100      	movs	r1, #0
    5a48:	2001      	movs	r0, #1
    5a4a:	f7ff bff6 	b.w	5a3a <z_arm_fatal_error>

00005a4e <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    5a4e:	b508      	push	{r3, lr}
	handler();
    5a50:	f7fb fd62 	bl	1518 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    5a54:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    5a58:	f7fb be34 	b.w	16c4 <z_arm_exc_exit>

00005a5c <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    5a5c:	4603      	mov	r3, r0
	size_t n = 0;
    5a5e:	2000      	movs	r0, #0

	while (*s != '\0') {
    5a60:	5c1a      	ldrb	r2, [r3, r0]
    5a62:	b902      	cbnz	r2, 5a66 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    5a64:	4770      	bx	lr
		n++;
    5a66:	3001      	adds	r0, #1
    5a68:	e7fa      	b.n	5a60 <strlen+0x4>

00005a6a <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    5a6a:	4603      	mov	r3, r0
	size_t n = 0;
    5a6c:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    5a6e:	5c1a      	ldrb	r2, [r3, r0]
    5a70:	b10a      	cbz	r2, 5a76 <strnlen+0xc>
    5a72:	4288      	cmp	r0, r1
    5a74:	d100      	bne.n	5a78 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    5a76:	4770      	bx	lr
		n++;
    5a78:	3001      	adds	r0, #1
    5a7a:	e7f8      	b.n	5a6e <strnlen+0x4>

00005a7c <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    5a7c:	1e43      	subs	r3, r0, #1
    5a7e:	3901      	subs	r1, #1
    5a80:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    5a84:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    5a88:	4282      	cmp	r2, r0
    5a8a:	d101      	bne.n	5a90 <strcmp+0x14>
    5a8c:	2a00      	cmp	r2, #0
    5a8e:	d1f7      	bne.n	5a80 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    5a90:	1a10      	subs	r0, r2, r0
    5a92:	4770      	bx	lr

00005a94 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    5a94:	b510      	push	{r4, lr}
    5a96:	1e43      	subs	r3, r0, #1
    5a98:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    5a9a:	4291      	cmp	r1, r2
    5a9c:	d100      	bne.n	5aa0 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    5a9e:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    5aa0:	f811 4b01 	ldrb.w	r4, [r1], #1
    5aa4:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    5aa8:	e7f7      	b.n	5a9a <memcpy+0x6>

00005aaa <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    5aaa:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    5aac:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    5aae:	4603      	mov	r3, r0
	while (n > 0) {
    5ab0:	4293      	cmp	r3, r2
    5ab2:	d100      	bne.n	5ab6 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    5ab4:	4770      	bx	lr
		*(d_byte++) = c_byte;
    5ab6:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    5aba:	e7f9      	b.n	5ab0 <memset+0x6>

00005abc <_stdout_hook_default>:
}
    5abc:	f04f 30ff 	mov.w	r0, #4294967295
    5ac0:	4770      	bx	lr

00005ac2 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    5ac2:	f04f 0220 	mov.w	r2, #32
    5ac6:	f3ef 8311 	mrs	r3, BASEPRI
    5aca:	f382 8812 	msr	BASEPRI_MAX, r2
    5ace:	f3bf 8f6f 	isb	sy
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    5ad2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5ad6:	2101      	movs	r1, #1
    5ad8:	f8c2 1578 	str.w	r1, [r2, #1400]	; 0x578
	__asm__ volatile(
    5adc:	f383 8811 	msr	BASEPRI, r3
    5ae0:	f3bf 8f6f 	isb	sy
}
    5ae4:	2000      	movs	r0, #0
    5ae6:	4770      	bx	lr

00005ae8 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
    5ae8:	b084      	sub	sp, #16
    5aea:	ab04      	add	r3, sp, #16
    5aec:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    5af0:	f89d 3004 	ldrb.w	r3, [sp, #4]
    5af4:	2b06      	cmp	r3, #6
    5af6:	d108      	bne.n	5b0a <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    5af8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5afc:	2201      	movs	r2, #1
    5afe:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    5b02:	f3bf 8f4f 	dsb	sy
        __WFE();
    5b06:	bf20      	wfe
    while (true)
    5b08:	e7fd      	b.n	5b06 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    5b0a:	b004      	add	sp, #16
    5b0c:	4770      	bx	lr

00005b0e <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    5b0e:	b084      	sub	sp, #16
    5b10:	ab04      	add	r3, sp, #16
    5b12:	e903 0007 	stmdb	r3, {r0, r1, r2}
    5b16:	2300      	movs	r3, #0
    5b18:	f383 8811 	msr	BASEPRI, r3
    5b1c:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    5b20:	b004      	add	sp, #16
    5b22:	4770      	bx	lr

00005b24 <set_on_state>:
	__asm__ volatile(
    5b24:	f04f 0320 	mov.w	r3, #32
    5b28:	f3ef 8211 	mrs	r2, BASEPRI
    5b2c:	f383 8812 	msr	BASEPRI_MAX, r3
    5b30:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    5b34:	6803      	ldr	r3, [r0, #0]
    5b36:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    5b3a:	f043 0302 	orr.w	r3, r3, #2
    5b3e:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    5b40:	f382 8811 	msr	BASEPRI, r2
    5b44:	f3bf 8f6f 	isb	sy
}
    5b48:	4770      	bx	lr

00005b4a <async_start>:
{
    5b4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5b4c:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    5b4e:	6904      	ldr	r4, [r0, #16]
{
    5b50:	4605      	mov	r5, r0
    5b52:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    5b54:	f04f 0020 	mov.w	r0, #32
    5b58:	f3ef 8c11 	mrs	ip, BASEPRI
    5b5c:	f380 8812 	msr	BASEPRI_MAX, r0
    5b60:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    5b64:	260c      	movs	r6, #12
    5b66:	fb06 4601 	mla	r6, r6, r1, r4
    5b6a:	6cb0      	ldr	r0, [r6, #72]	; 0x48
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    5b6c:	f000 0e07 	and.w	lr, r0, #7
    5b70:	f1be 0f01 	cmp.w	lr, #1
    5b74:	d111      	bne.n	5b9a <async_start+0x50>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    5b76:	64b7      	str	r7, [r6, #72]	; 0x48
	int err = 0;
    5b78:	2600      	movs	r6, #0
	__asm__ volatile(
    5b7a:	f38c 8811 	msr	BASEPRI, ip
    5b7e:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    5b82:	b946      	cbnz	r6, 5b96 <async_start+0x4c>
	subdata->cb = cb;
    5b84:	200c      	movs	r0, #12
    5b86:	fb00 4401 	mla	r4, r0, r1, r4
	subdata->user_data = user_data;
    5b8a:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    5b8e:	686b      	ldr	r3, [r5, #4]
    5b90:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
    5b94:	4798      	blx	r3
}
    5b96:	4630      	mov	r0, r6
    5b98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    5b9a:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
    5b9e:	4287      	cmp	r7, r0
    5ba0:	bf14      	ite	ne
    5ba2:	f04f 36ff 	movne.w	r6, #4294967295
    5ba6:	f06f 0677 	mvneq.w	r6, #119	; 0x77
    5baa:	e7e6      	b.n	5b7a <async_start+0x30>

00005bac <api_start>:
{
    5bac:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    5bae:	2480      	movs	r4, #128	; 0x80
    5bb0:	9400      	str	r4, [sp, #0]
    5bb2:	f7ff ffca 	bl	5b4a <async_start>
}
    5bb6:	b002      	add	sp, #8
    5bb8:	bd10      	pop	{r4, pc}

00005bba <onoff_started_callback>:
	return &data->mgr[type];
    5bba:	6900      	ldr	r0, [r0, #16]
    5bbc:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    5bbe:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    5bc2:	2100      	movs	r1, #0
    5bc4:	4710      	bx	r2

00005bc6 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    5bc6:	2000      	movs	r0, #0
    5bc8:	f7fd ba4e 	b.w	3068 <nrfx_clock_start>

00005bcc <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    5bcc:	2000      	movs	r0, #0
    5bce:	f7fd ba9f 	b.w	3110 <nrfx_clock_stop>

00005bd2 <api_stop>:
	return stop(dev, subsys, CTX_API);
    5bd2:	2280      	movs	r2, #128	; 0x80
    5bd4:	f7fc b882 	b.w	1cdc <stop>

00005bd8 <blocking_start_callback>:
{
    5bd8:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    5bda:	f7fe b9cf 	b.w	3f7c <z_impl_k_sem_give>

00005bde <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5bde:	6843      	ldr	r3, [r0, #4]
    5be0:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    5be2:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    5be6:	600b      	str	r3, [r1, #0]
}
    5be8:	2000      	movs	r0, #0
    5bea:	4770      	bx	lr

00005bec <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5bec:	6843      	ldr	r3, [r0, #4]
    5bee:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    5bf0:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    5bf4:	4042      	eors	r2, r0
    5bf6:	400a      	ands	r2, r1
    5bf8:	4042      	eors	r2, r0
    p_reg->OUT = value;
    5bfa:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    5bfe:	2000      	movs	r0, #0
    5c00:	4770      	bx	lr

00005c02 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5c02:	6843      	ldr	r3, [r0, #4]
    5c04:	685b      	ldr	r3, [r3, #4]
}
    5c06:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    5c08:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    5c0c:	4770      	bx	lr

00005c0e <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5c0e:	6843      	ldr	r3, [r0, #4]
    5c10:	685b      	ldr	r3, [r3, #4]
}
    5c12:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    5c14:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    5c18:	4770      	bx	lr

00005c1a <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5c1a:	6843      	ldr	r3, [r0, #4]
    5c1c:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    5c1e:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    5c22:	404b      	eors	r3, r1
    p_reg->OUT = value;
    5c24:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    5c28:	2000      	movs	r0, #0
    5c2a:	4770      	bx	lr

00005c2c <nrf_gpio_cfg_sense_set>:
{
    5c2c:	b513      	push	{r0, r1, r4, lr}
    5c2e:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5c30:	a801      	add	r0, sp, #4
{
    5c32:	460c      	mov	r4, r1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5c34:	f7fc faa6 	bl	2184 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    5c38:	9b01      	ldr	r3, [sp, #4]
    5c3a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    5c3e:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    5c42:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    5c46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
    5c4a:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
    5c4e:	b002      	add	sp, #8
    5c50:	bd10      	pop	{r4, pc}

00005c52 <i2c_nrfx_twi_configure>:
	if (I2C_ADDR_10_BITS & dev_config) {
    5c52:	07ca      	lsls	r2, r1, #31
	return dev->config;
    5c54:	6843      	ldr	r3, [r0, #4]
	if (I2C_ADDR_10_BITS & dev_config) {
    5c56:	d405      	bmi.n	5c64 <i2c_nrfx_twi_configure+0x12>
	switch (I2C_SPEED_GET(dev_config)) {
    5c58:	f3c1 0242 	ubfx	r2, r1, #1, #3
    5c5c:	2a01      	cmp	r2, #1
    5c5e:	d004      	beq.n	5c6a <i2c_nrfx_twi_configure+0x18>
    5c60:	2a02      	cmp	r2, #2
    5c62:	d00b      	beq.n	5c7c <i2c_nrfx_twi_configure+0x2a>
		return -EINVAL;
    5c64:	f06f 0015 	mvn.w	r0, #21
}
    5c68:	4770      	bx	lr
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_100K);
    5c6a:	681b      	ldr	r3, [r3, #0]
    p_reg->FREQUENCY = frequency;
    5c6c:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
    5c70:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	get_dev_data(dev)->dev_config = dev_config;
    5c74:	6903      	ldr	r3, [r0, #16]
	return 0;
    5c76:	2000      	movs	r0, #0
	get_dev_data(dev)->dev_config = dev_config;
    5c78:	6259      	str	r1, [r3, #36]	; 0x24
	return 0;
    5c7a:	4770      	bx	lr
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_400K);
    5c7c:	681b      	ldr	r3, [r3, #0]
    5c7e:	f04f 62cd 	mov.w	r2, #107479040	; 0x6680000
    5c82:	e7f5      	b.n	5c70 <i2c_nrfx_twi_configure+0x1e>

00005c84 <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
    5c84:	6902      	ldr	r2, [r0, #16]
{
    5c86:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    5c88:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    5c8c:	e883 0003 	stmia.w	r3, {r0, r1}
}
    5c90:	2000      	movs	r0, #0
    5c92:	4770      	bx	lr

00005c94 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    5c94:	6843      	ldr	r3, [r0, #4]
    5c96:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    5c98:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    5c9c:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    5ca0:	4770      	bx	lr

00005ca2 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    5ca2:	6843      	ldr	r3, [r0, #4]
	return dev->data;
    5ca4:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    5ca6:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5ca8:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    5cac:	b148      	cbz	r0, 5cc2 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
    5cae:	7c52      	ldrb	r2, [r2, #17]
    5cb0:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5cb2:	2000      	movs	r0, #0
    5cb4:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    5cb8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5cbc:	2201      	movs	r2, #1
    5cbe:	601a      	str	r2, [r3, #0]
	return 0;
    5cc0:	4770      	bx	lr
		return -1;
    5cc2:	f04f 30ff 	mov.w	r0, #4294967295
}
    5cc6:	4770      	bx	lr

00005cc8 <nrf_gpio_cfg_input>:
{
    5cc8:	b513      	push	{r0, r1, r4, lr}
    5cca:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5ccc:	a801      	add	r0, sp, #4
{
    5cce:	460c      	mov	r4, r1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5cd0:	f7fc fd54 	bl	277c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    5cd4:	9b01      	ldr	r3, [sp, #4]
    5cd6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    5cda:	00a4      	lsls	r4, r4, #2
    reg->PIN_CNF[pin_number] = cnf;
    5cdc:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
}
    5ce0:	b002      	add	sp, #8
    5ce2:	bd10      	pop	{r4, pc}

00005ce4 <is_tx_ready.isra.0>:
	return config->uarte_regs;
    5ce4:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    5ce6:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5ce8:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    5cec:	b940      	cbnz	r0, 5d00 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    5cee:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    5cf0:	071b      	lsls	r3, r3, #28
    5cf2:	d406      	bmi.n	5d02 <is_tx_ready.isra.0+0x1e>
    5cf4:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    5cf8:	3800      	subs	r0, #0
    5cfa:	bf18      	it	ne
    5cfc:	2001      	movne	r0, #1
    5cfe:	4770      	bx	lr
    5d00:	2001      	movs	r0, #1
}
    5d02:	4770      	bx	lr

00005d04 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
    5d04:	6843      	ldr	r3, [r0, #4]
    5d06:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
    5d08:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    5d0c:	05d1      	lsls	r1, r2, #23
    5d0e:	d518      	bpl.n	5d42 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5d10:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    5d14:	b1aa      	cbz	r2, 5d42 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    5d16:	f04f 0120 	mov.w	r1, #32
    5d1a:	f3ef 8211 	mrs	r2, BASEPRI
    5d1e:	f381 8812 	msr	BASEPRI_MAX, r1
    5d22:	f3bf 8f6f 	isb	sy
    5d26:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    5d2a:	b131      	cbz	r1, 5d3a <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5d2c:	2100      	movs	r1, #0
    5d2e:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    5d32:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5d36:	2101      	movs	r1, #1
    5d38:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    5d3a:	f382 8811 	msr	BASEPRI, r2
    5d3e:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    5d42:	6842      	ldr	r2, [r0, #4]
    5d44:	6852      	ldr	r2, [r2, #4]
    5d46:	06d2      	lsls	r2, r2, #27
    5d48:	d515      	bpl.n	5d76 <uarte_nrfx_isr_int+0x72>
	__asm__ volatile(
    5d4a:	f04f 0120 	mov.w	r1, #32
    5d4e:	f3ef 8211 	mrs	r2, BASEPRI
    5d52:	f381 8812 	msr	BASEPRI_MAX, r1
    5d56:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5d5a:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    5d5e:	b111      	cbz	r1, 5d66 <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    5d60:	2100      	movs	r1, #0
    5d62:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    5d66:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    5d6a:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    5d6e:	f382 8811 	msr	BASEPRI, r2
    5d72:	f3bf 8f6f 	isb	sy
}
    5d76:	4770      	bx	lr

00005d78 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    5d78:	4770      	bx	lr

00005d7a <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5d7a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    5d7e:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
            if (var1 == 0x08)
    5d82:	2808      	cmp	r0, #8
    5d84:	d004      	beq.n	5d90 <nrf52_errata_136+0x16>
            if (var1 == 0x0E)
    5d86:	f1a0 030e 	sub.w	r3, r0, #14
    5d8a:	4258      	negs	r0, r3
    5d8c:	4158      	adcs	r0, r3
    5d8e:	4770      	bx	lr
    5d90:	2001      	movs	r0, #1
}
    5d92:	4770      	bx	lr

00005d94 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    5d94:	4700      	bx	r0

00005d96 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    5d96:	f000 b8fa 	b.w	5f8e <z_impl_k_busy_wait>

00005d9a <twi_send_byte>:
    if (p_cb->bytes_transferred < p_cb->curr_length)
    5d9a:	6a8b      	ldr	r3, [r1, #40]	; 0x28
{
    5d9c:	4602      	mov	r2, r0
    if (p_cb->bytes_transferred < p_cb->curr_length)
    5d9e:	6b48      	ldr	r0, [r1, #52]	; 0x34
    5da0:	4298      	cmp	r0, r3
{
    5da2:	b510      	push	{r4, lr}
    5da4:	f04f 0301 	mov.w	r3, #1
    if (p_cb->bytes_transferred < p_cb->curr_length)
    5da8:	d205      	bcs.n	5db6 <twi_send_byte+0x1c>
        nrf_twi_txd_set(p_twi, p_cb->p_curr_buf[p_cb->bytes_transferred]);
    5daa:	6a49      	ldr	r1, [r1, #36]	; 0x24
    p_reg->TXD = data;
    5dac:	5c09      	ldrb	r1, [r1, r0]
    5dae:	f8c2 151c 	str.w	r1, [r2, #1308]	; 0x51c
    return true;
    5db2:	4618      	mov	r0, r3
}
    5db4:	e004      	b.n	5dc0 <twi_send_byte+0x26>
        if (p_cb->curr_tx_no_stop)
    5db6:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
    5dba:	b110      	cbz	r0, 5dc2 <twi_send_byte+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5dbc:	61d3      	str	r3, [r2, #28]
            return false;
    5dbe:	2000      	movs	r0, #0
}
    5dc0:	bd10      	pop	{r4, pc}
        else if(TWI_FLAG_SUSPEND(p_cb->flags))
    5dc2:	6a0c      	ldr	r4, [r1, #32]
    5dc4:	0664      	lsls	r4, r4, #25
    5dc6:	d503      	bpl.n	5dd0 <twi_send_byte+0x36>
    5dc8:	61d3      	str	r3, [r2, #28]
            p_cb->prev_suspend = TWI_SUSPEND_TX;
    5dca:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
            return false;
    5dce:	e7f7      	b.n	5dc0 <twi_send_byte+0x26>
    5dd0:	6153      	str	r3, [r2, #20]
    5dd2:	e7ee      	b.n	5db2 <twi_send_byte+0x18>

00005dd4 <twi_transfer>:
{
    5dd4:	b570      	push	{r4, r5, r6, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5dd6:	f8d0 6104 	ldr.w	r6, [r0, #260]	; 0x104
    5dda:	4604      	mov	r4, r0
    5ddc:	460d      	mov	r5, r1
    if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_STOPPED))
    5dde:	b12e      	cbz	r6, 5dec <twi_transfer+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5de0:	2300      	movs	r3, #0
    5de2:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    5de6:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
        stopped = true;
    5dea:	2601      	movs	r6, #1
    if (p_cb->error)
    5dec:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    5df0:	b320      	cbz	r0, 5e3c <twi_transfer+0x68>
    5df2:	2300      	movs	r3, #0
    5df4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    5df8:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
    5dfc:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
    5e00:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
    5e04:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    5e08:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    if (stopped)
    5e0c:	2e00      	cmp	r6, #0
    5e0e:	d068      	beq.n	5ee2 <twi_transfer+0x10e>
        if (!p_cb->error)
    5e10:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
        p_cb->prev_suspend = TWI_NO_SUSPEND;
    5e14:	2300      	movs	r3, #0
    5e16:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
        if (!p_cb->error)
    5e1a:	bb88      	cbnz	r0, 5e80 <twi_transfer+0xac>
    if (p_cb->bytes_transferred != p_cb->curr_length)
    5e1c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5e1e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    5e20:	429a      	cmp	r2, r3
        return false;
    5e22:	bf1c      	itt	ne
    5e24:	4606      	movne	r6, r0
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    5e26:	2305      	movne	r3, #5
            p_cb->error = !xfer_completeness_check(p_twi, p_cb);
    5e28:	f086 0601 	eor.w	r6, r6, #1
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    5e2c:	bf1c      	itt	ne
    5e2e:	f8c4 0500 	strne.w	r0, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    5e32:	f8c4 3500 	strne.w	r3, [r4, #1280]	; 0x500
    5e36:	f885 602f 	strb.w	r6, [r5, #47]	; 0x2f
    5e3a:	e022      	b.n	5e82 <twi_transfer+0xae>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5e3c:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
    else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
    5e40:	b142      	cbz	r2, 5e54 <twi_transfer+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5e42:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
    5e46:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5e4a:	2301      	movs	r3, #1
    5e4c:	6163      	str	r3, [r4, #20]
                p_cb->error = true;
    5e4e:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    5e52:	e7db      	b.n	5e0c <twi_transfer+0x38>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5e54:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
        if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_TXDSENT))
    5e58:	b1a3      	cbz	r3, 5e84 <twi_transfer+0xb0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5e5a:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
    5e5e:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
            ++(p_cb->bytes_transferred);
    5e62:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    5e64:	3301      	adds	r3, #1
    5e66:	636b      	str	r3, [r5, #52]	; 0x34
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5e68:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
    5e6c:	b113      	cbz	r3, 5e74 <twi_transfer+0xa0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5e6e:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
    5e72:	e7e8      	b.n	5e46 <twi_transfer+0x72>
                if (!twi_send_byte(p_twi, p_cb))
    5e74:	4629      	mov	r1, r5
    5e76:	4620      	mov	r0, r4
    5e78:	f7ff ff8f 	bl	5d9a <twi_send_byte>
    5e7c:	2800      	cmp	r0, #0
    5e7e:	d1c5      	bne.n	5e0c <twi_transfer+0x38>
                    return false;
    5e80:	2000      	movs	r0, #0
}
    5e82:	bd70      	pop	{r4, r5, r6, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5e84:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
        else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_RXDREADY))
    5e88:	2a00      	cmp	r2, #0
    5e8a:	d0bf      	beq.n	5e0c <twi_transfer+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5e8c:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    5e90:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5e94:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
    5e98:	b112      	cbz	r2, 5ea0 <twi_transfer+0xcc>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5e9a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    5e9e:	e7d2      	b.n	5e46 <twi_transfer+0x72>
    if (p_cb->bytes_transferred < p_cb->curr_length)
    5ea0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    5ea2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    5ea4:	4293      	cmp	r3, r2
    5ea6:	d2b1      	bcs.n	5e0c <twi_transfer+0x38>
        p_cb->p_curr_buf[p_cb->bytes_transferred] = nrf_twi_rxd_get(p_twi);
    5ea8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    return (uint8_t)p_reg->RXD;
    5eaa:	f8d4 1518 	ldr.w	r1, [r4, #1304]	; 0x518
    5eae:	54d1      	strb	r1, [r2, r3]
        ++(p_cb->bytes_transferred);
    5eb0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    5eb2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
        ++(p_cb->bytes_transferred);
    5eb4:	3301      	adds	r3, #1
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    5eb6:	1e51      	subs	r1, r2, #1
    5eb8:	428b      	cmp	r3, r1
        ++(p_cb->bytes_transferred);
    5eba:	636b      	str	r3, [r5, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    5ebc:	d108      	bne.n	5ed0 <twi_transfer+0xfc>
    5ebe:	6a29      	ldr	r1, [r5, #32]
    5ec0:	0649      	lsls	r1, r1, #25
    5ec2:	d410      	bmi.n	5ee6 <twi_transfer+0x112>
    p_reg->SHORTS = mask;
    5ec4:	2302      	movs	r3, #2
    5ec6:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5eca:	2301      	movs	r3, #1
    5ecc:	6223      	str	r3, [r4, #32]
    5ece:	e79d      	b.n	5e0c <twi_transfer+0x38>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    5ed0:	4293      	cmp	r3, r2
    5ed2:	d1fa      	bne.n	5eca <twi_transfer+0xf6>
    5ed4:	6a2b      	ldr	r3, [r5, #32]
    5ed6:	065b      	lsls	r3, r3, #25
    5ed8:	d598      	bpl.n	5e0c <twi_transfer+0x38>
            p_cb->prev_suspend = TWI_SUSPEND_RX;
    5eda:	2302      	movs	r3, #2
    5edc:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
            return false;
    5ee0:	e7cf      	b.n	5e82 <twi_transfer+0xae>
    return true;
    5ee2:	2001      	movs	r0, #1
    5ee4:	e7cd      	b.n	5e82 <twi_transfer+0xae>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    5ee6:	4293      	cmp	r3, r2
    5ee8:	d1ef      	bne.n	5eca <twi_transfer+0xf6>
    5eea:	e7f6      	b.n	5eda <twi_transfer+0x106>

00005eec <nrf_gpio_pin_set>:
{
    5eec:	b507      	push	{r0, r1, r2, lr}
    5eee:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5ef0:	a801      	add	r0, sp, #4
    5ef2:	f7fd fd2d 	bl	3950 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    5ef6:	9a01      	ldr	r2, [sp, #4]
    5ef8:	2301      	movs	r3, #1
    5efa:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    5efc:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
    5f00:	b003      	add	sp, #12
    5f02:	f85d fb04 	ldr.w	pc, [sp], #4

00005f06 <z_device_state_init>:
}
    5f06:	4770      	bx	lr

00005f08 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    5f08:	b138      	cbz	r0, 5f1a <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    5f0a:	68c3      	ldr	r3, [r0, #12]
    5f0c:	8818      	ldrh	r0, [r3, #0]
    5f0e:	f3c0 0008 	ubfx	r0, r0, #0, #9
    5f12:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    5f16:	4258      	negs	r0, r3
    5f18:	4158      	adcs	r0, r3
}
    5f1a:	4770      	bx	lr

00005f1c <arch_system_halt>:
	__asm__ volatile(
    5f1c:	f04f 0220 	mov.w	r2, #32
    5f20:	f3ef 8311 	mrs	r3, BASEPRI
    5f24:	f382 8812 	msr	BASEPRI_MAX, r2
    5f28:	f3bf 8f6f 	isb	sy
	for (;;) {
    5f2c:	e7fe      	b.n	5f2c <arch_system_halt+0x10>

00005f2e <k_sys_fatal_error_handler>:
{
    5f2e:	b508      	push	{r3, lr}
	arch_system_halt(reason);
    5f30:	f7ff fff4 	bl	5f1c <arch_system_halt>

00005f34 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    5f34:	f3ef 8005 	mrs	r0, IPSR
}
    5f38:	3800      	subs	r0, #0
    5f3a:	bf18      	it	ne
    5f3c:	2001      	movne	r0, #1
    5f3e:	4770      	bx	lr

00005f40 <z_pm_save_idle_exit>:
{
    5f40:	b508      	push	{r3, lr}
	pm_system_resume();
    5f42:	f7fb f9a9 	bl	1298 <pm_system_resume>
}
    5f46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    5f4a:	f7ff bf15 	b.w	5d78 <sys_clock_idle_exit>

00005f4e <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    5f4e:	4603      	mov	r3, r0
    5f50:	b920      	cbnz	r0, 5f5c <z_reschedule_irqlock+0xe>
    5f52:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    5f56:	b90a      	cbnz	r2, 5f5c <z_reschedule_irqlock+0xe>
    5f58:	f7fb baf8 	b.w	154c <arch_swap>
	__asm__ volatile(
    5f5c:	f383 8811 	msr	BASEPRI, r3
    5f60:	f3bf 8f6f 	isb	sy
}
    5f64:	4770      	bx	lr

00005f66 <z_reschedule_unlocked>:
	__asm__ volatile(
    5f66:	f04f 0320 	mov.w	r3, #32
    5f6a:	f3ef 8011 	mrs	r0, BASEPRI
    5f6e:	f383 8812 	msr	BASEPRI_MAX, r3
    5f72:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    5f76:	f7ff bfea 	b.w	5f4e <z_reschedule_irqlock>

00005f7a <z_priq_dumb_best>:
{
    5f7a:	4603      	mov	r3, r0
	return list->head == list;
    5f7c:	6800      	ldr	r0, [r0, #0]
}
    5f7e:	4283      	cmp	r3, r0
    5f80:	bf08      	it	eq
    5f82:	2000      	moveq	r0, #0
    5f84:	4770      	bx	lr

00005f86 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    5f86:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    5f88:	f7ff fbb2 	bl	56f0 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    5f8c:	bd08      	pop	{r3, pc}

00005f8e <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    5f8e:	b108      	cbz	r0, 5f94 <__kernel_ram_size+0x4>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    5f90:	f7fb be5e 	b.w	1c50 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    5f94:	4770      	bx	lr
	...

00005f98 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    5f98:	f7fc bf1a 	b.w	2dd0 <SystemInit>
